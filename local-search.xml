<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Siri 建议 — 使用 Objective-C 集成 Siri Shortcuts</title>
    <link href="/2023/07/05/Siri%E5%BB%BA%E8%AE%AE/"/>
    <url>/2023/07/05/Siri%E5%BB%BA%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Siri-建议-—-使用-Objective-C-集成-Siri-Shortcuts"><a href="#Siri-建议-—-使用-Objective-C-集成-Siri-Shortcuts" class="headerlink" title="Siri 建议 — 使用 Objective-C 集成 Siri Shortcuts"></a>Siri 建议 — 使用 Objective-C 集成 Siri Shortcuts</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Siri Shortcuts 是 iOS 12 引入的一项功能，旨在提供应用程序与 Siri 的深度集成。通过 Siri Shortcuts，应用可以在适当的时候向用户推荐相关操作，从而提升用户体验和应用的使用率。本文将介绍如何在 Objective-C 项目中集成 Siri Shortcuts 并进行模块化处理。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li><strong>提高用户体验</strong>：通过向用户推荐相关操作，提升应用的便利性和易用性。</li><li><strong>增加应用曝光率</strong>：用户可以在 Siri 建议中看到应用的推荐操作，从而增加应用的曝光率。</li><li><strong>简化用户操作</strong>：用户可以通过 Siri 语音命令快速执行应用中的常用操作。</li></ol><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="配置-Info-plist"><a href="#配置-Info-plist" class="headerlink" title="配置 Info.plist"></a>配置 Info.plist</h3><p>首先，在 <code>Info.plist</code> 文件中添加 <code>NSUserActivityTypes</code> 键，以声明应用支持的用户活动类型：</p><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>NSUserActivityTypes<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>loying.myAppName.myUserBehaviorA<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></code></pre></div><h3 id="上报-Siri-建议"><a href="#上报-Siri-建议" class="headerlink" title="上报 Siri 建议"></a>上报 Siri 建议</h3><div class="hljs code-wrapper"><pre><code class="hljs objc">- (<span class="hljs-keyword">void</span>)reportUserActivity &#123;    <span class="hljs-built_in">NSUserActivity</span> *userActivity = [[<span class="hljs-built_in">NSUserActivity</span> alloc] initWithActivityType:<span class="hljs-string">@&quot;loying.myAppName.myUserBehaviorA&quot;</span>];    userActivity.eligibleForSearch = <span class="hljs-literal">YES</span>;    userActivity.eligibleForPrediction = <span class="hljs-literal">YES</span>;    userActivity.eligibleForPublicIndexing = <span class="hljs-literal">YES</span>;    userActivity.title = <span class="hljs-string">@&quot;BehaviorA Title&quot;</span>;    userActivity.persistentIdentifier = <span class="hljs-string">@&quot;myUserBehaviorA&quot;</span>;    userActivity.userInfo = @&#123;<span class="hljs-string">@&quot;testKey&quot;</span> : <span class="hljs-string">@&quot;testValue&quot;</span>&#125;;    userActivity.webpageURL = [<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@&quot;https://www.infoq.cn/article/lsuikfdr0eyv2lusatjt&quot;</span>];        <span class="hljs-keyword">if</span> (@available(iOS <span class="hljs-number">14.0</span>, *)) &#123;        userActivity.contentAttributeSet = [[CSSearchableItemAttributeSet alloc] initWithContentType:UTTypeItem];        userActivity.contentAttributeSet.contentDescription = <span class="hljs-string">@&quot;BehaviorA subTitle&quot;</span>;    &#125;        [userActivity becomeCurrent];&#125;</code></pre></div><h3 id="处理-Siri-建议点击后的回调"><a href="#处理-Siri-建议点击后的回调" class="headerlink" title="处理 Siri 建议点击后的回调"></a>处理 Siri 建议点击后的回调</h3><div class="hljs code-wrapper"><pre><code class="hljs objc">- (<span class="hljs-built_in">BOOL</span>)application:(<span class="hljs-built_in">UIApplication</span> *)application continueUserActivity:(<span class="hljs-built_in">NSUserActivity</span> *)userActivity restorationHandler:(<span class="hljs-keyword">void</span> (^)(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-keyword">id</span>&lt;<span class="hljs-built_in">UIUserActivityRestoring</span>&gt;&gt; * _Nullable))restorationHandler &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;continueUserActivity&quot;</span>);        <span class="hljs-keyword">if</span> ([userActivity.activityType isEqualToString:<span class="hljs-string">@&quot;loying.LearnSiriShortcut.type&quot;</span>]) &#123;        <span class="hljs-comment">// 执行相应的业务逻辑</span>    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;&#125;</code></pre></div><h3 id="删除-Siri-建议"><a href="#删除-Siri-建议" class="headerlink" title="删除 Siri 建议"></a>删除 Siri 建议</h3><p>您可以删除指定或全部 Siri Shortcuts：</p><div class="hljs code-wrapper"><pre><code class="hljs objc"><span class="hljs-comment">// 删除指定的 Shortcut</span>[<span class="hljs-built_in">NSUserActivity</span> deleteSavedUserActivitiesWithPersistentIdentifiers:identifer completionHandler:^&#123;    <span class="hljs-comment">// 处理删除完成后的逻辑</span>&#125;];<span class="hljs-comment">// 删除全部 Shortcuts</span>[<span class="hljs-built_in">NSUserActivity</span> deleteAllSavedUserActivitiesWithCompletionHandler:^&#123;    <span class="hljs-comment">// 处理删除完成后的逻辑</span>&#125;];</code></pre></div><h3 id="进阶的-Siri-建议"><a href="#进阶的-Siri-建议" class="headerlink" title="进阶的 Siri 建议"></a>进阶的 Siri 建议</h3><p>除了基础的用户活动上报，您还可以配置更多的用户活动信息，如时间、地点、联系人等，以提升 Siri 建议的智能化程度：</p><div class="hljs code-wrapper"><pre><code class="hljs objc">- (<span class="hljs-keyword">void</span>)reportAdvancedUserActivity &#123;    <span class="hljs-built_in">NSUserActivity</span> *userActivity = [[<span class="hljs-built_in">NSUserActivity</span> alloc] initWithActivityType:<span class="hljs-string">@&quot;com.example.app.viewLatestArticles&quot;</span>];    userActivity.title = <span class="hljs-string">@&quot;View Latest Articles&quot;</span>;    <span class="hljs-comment">// 设置时间信息</span>    <span class="hljs-built_in">NSDate</span> *startDate = [<span class="hljs-built_in">NSDate</span> date];    <span class="hljs-built_in">NSDate</span> *endDate = [<span class="hljs-built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="hljs-number">3600</span>];    userActivity.startDate = startDate;    userActivity.endDate = endDate;    <span class="hljs-comment">// 设置地点信息</span>    <span class="hljs-built_in">CLLocationCoordinate2D</span> location = <span class="hljs-built_in">CLLocationCoordinate2DMake</span>(<span class="hljs-number">37.7749</span>, <span class="hljs-number">-122.4194</span>);    <span class="hljs-built_in">MKPlacemark</span> *placemark = [[<span class="hljs-built_in">MKPlacemark</span> alloc] initWithCoordinate:location];    userActivity.mapItem = [[<span class="hljs-built_in">MKMapItem</span> alloc] initWithPlacemark:placemark];    <span class="hljs-comment">// 设置联系人信息</span>    <span class="hljs-built_in">CNMutableContact</span> *contact = [[<span class="hljs-built_in">CNMutableContact</span> alloc] init];    contact.givenName = <span class="hljs-string">@&quot;John&quot;</span>;    contact.familyName = <span class="hljs-string">@&quot;Doe&quot;</span>;    userActivity.contact = contact;    <span class="hljs-comment">// 设置提醒信息</span>    EKEventStore *eventStore = [[EKEventStore alloc] init];    EKReminder *reminder = [EKReminder reminderWithEventStore:eventStore];    reminder.title = <span class="hljs-string">@&quot;Buy Groceries&quot;</span>;    reminder.dueDateComponents = [[<span class="hljs-built_in">NSCalendar</span> currentCalendar] components:<span class="hljs-built_in">NSCalendarUnitYear</span> | <span class="hljs-built_in">NSCalendarUnitMonth</span> | <span class="hljs-built_in">NSCalendarUnitDay</span> fromDate:[<span class="hljs-built_in">NSDate</span> date]];    userActivity.calendarItemIdentifier = reminder.calendarItemIdentifier;    <span class="hljs-comment">// 设置网页链接</span>    userActivity.webpageURL = [<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@&quot;https://www.example.com&quot;</span>];    <span class="hljs-comment">// 设置附加信息</span>    userActivity.userInfo = @&#123;<span class="hljs-string">@&quot;key&quot;</span>: <span class="hljs-string">@&quot;value&quot;</span>&#125;;    <span class="hljs-comment">// 提交用户活动</span>    [userActivity becomeCurrent];&#125;</code></pre></div><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.infoq.cn/article/lsuikfdr0eyv2lusatjt">爱奇艺 iOS 深度实践：SiriKit 详解应用篇</a></li><li><a href="https://cloud.tencent.com/developer/article/1351163">十分钟接入iOS 12新特性——Siri Shortcuts</a></li></ul><p>通过上述步骤，您可以在 Objective-C 项目中顺利集成 Siri Shortcuts，实现对用户行为的智能推荐，从而提升用户体验和应用的使用率。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Objective-C, Siri, Shortcuts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lottie Swift 桥接文件 （Objective-C 项目集成 lottie-swift 并模块化处理）</title>
    <link href="/2023/05/19/Lottie%20Swift%20%E6%A1%A5%E6%8E%A5%E6%96%87%E4%BB%B6/"/>
    <url>/2023/05/19/Lottie%20Swift%20%E6%A1%A5%E6%8E%A5%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Lottie-Swift-桥接文件（Objective-C-项目集成-lottie-swift-并模块化处理）"><a href="#Lottie-Swift-桥接文件（Objective-C-项目集成-lottie-swift-并模块化处理）" class="headerlink" title="Lottie Swift 桥接文件（Objective-C 项目集成 lottie-swift 并模块化处理）"></a>Lottie Swift 桥接文件（Objective-C 项目集成 lottie-swift 并模块化处理）</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于 Objective-C 版本的 Lottie 已经不再更新，随着 UI 设计师使用的插件的升级，一些特效在使用 Objective-C 版本的 Lottie 展示时出现异常。为了应对这一情况，引入 Swift 桥接并迁移旧的 Lottie 方法。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="拉取并修改源文件"><a href="#拉取并修改源文件" class="headerlink" title="拉取并修改源文件"></a>拉取并修改源文件</h3><ol><li>创建一个 Objective-C 项目。</li><li>使用 CocoaPods 导入 Swift 版本的 Lottie，下载源代码。</li><li>修改以下源文件，举例版本为 lottie-ios <code>4.0.1</code></li></ol><h4 id="修改-LottieAnimationView-swift"><a href="#修改-LottieAnimationView-swift" class="headerlink" title="修改 LottieAnimationView.swift"></a>修改 LottieAnimationView.swift</h4><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-operator">-</span><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LottieAnimationView</span>: <span class="hljs-title">LottieAnimationViewBase</span> </span>&#123;<span class="hljs-operator">+</span><span class="hljs-keyword">@objc</span>Members <span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LottieAnimationView</span>: <span class="hljs-title">LottieAnimationViewBase</span> </span>&#123;</code></pre></div><h4 id="修改-LottieAnimationViewBase-swift"><a href="#修改-LottieAnimationViewBase-swift" class="headerlink" title="修改 LottieAnimationViewBase.swift"></a>修改 LottieAnimationViewBase.swift</h4><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-operator">-</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LottieAnimationViewBase</span>: <span class="hljs-title">UIView</span> </span>&#123;<span class="hljs-operator">+</span><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LottieAnimationViewBase</span>: <span class="hljs-title">UIView</span> </span>&#123;</code></pre></div><h4 id="修改-CompatibleAnimationView-swift"><a href="#修改-CompatibleAnimationView-swift" class="headerlink" title="修改 CompatibleAnimationView.swift"></a>修改 CompatibleAnimationView.swift</h4><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-operator">-</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompatibleAnimation</span>: <span class="hljs-title">NSObject</span> </span>&#123;<span class="hljs-operator">+</span><span class="hljs-keyword">@objc</span>Members <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompatibleAnimation</span>: <span class="hljs-title">NSObject</span> </span>&#123;</code></pre></div><h3 id="新增-Lottie-的自定义桥文件"><a href="#新增-Lottie-的自定义桥文件" class="headerlink" title="新增 Lottie 的自定义桥文件"></a>新增 Lottie 的自定义桥文件</h3><p>由于并非所有方法都和 Objective-C 版本的 Lottie 一样，同时部分方法由于语法原因对 Objective-C 并不暴露或暴露的方式不符合预期，需要增加一个 Swift 文件，对现有的 Lottie 方法进行润色。</p><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> Foundation<span class="hljs-keyword">@objc</span>Members <span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BLLOTAnimationView</span>: <span class="hljs-title">LottieAnimationView</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     创建一个 `BLLOTAnimationView` 实例并加载指定名称的 Lottie 动画</span><span class="hljs-comment">     </span><span class="hljs-comment">     - Parameters:</span><span class="hljs-comment">       - name: 动画文件的名称</span><span class="hljs-comment">       - bundle: 包含动画文件的 bundle</span><span class="hljs-comment">     - Returns: 创建的 `BLLOTAnimationView` 实例</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span> <span class="hljs-title">animation</span>(<span class="hljs-title">name</span>: <span class="hljs-title">String</span>, <span class="hljs-title">bundle</span>: <span class="hljs-title">Bundle</span>) -&gt; <span class="hljs-title">BLLOTAnimationView</span> </span>&#123;        <span class="hljs-keyword">let</span> lottieView <span class="hljs-operator">=</span> <span class="hljs-type">BLLOTAnimationView</span>()        lottieView.animation <span class="hljs-operator">=</span> <span class="hljs-type">LottieAnimation</span>.named(name, bundle: bundle)        <span class="hljs-keyword">return</span> lottieView    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     设置动画的循环次数，如果设置为 -1，表示无限循环</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> loopAnimationCount: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> &#123;        <span class="hljs-keyword">didSet</span> &#123;            <span class="hljs-keyword">self</span>.loopMode <span class="hljs-operator">=</span> loopAnimationCount <span class="hljs-operator">==</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> <span class="hljs-operator">?</span> .loop : .repeat(<span class="hljs-type">Float</span>(loopAnimationCount))        &#125;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     设置是否循环播放动画</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> loopAnimation: <span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span> &#123;        <span class="hljs-keyword">didSet</span> &#123;            <span class="hljs-keyword">self</span>.loopMode <span class="hljs-operator">=</span> loopAnimation <span class="hljs-operator">?</span> .loop : .playOnce        &#125;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     设置动画的播放进度</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> animationProgress: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> &#123;        <span class="hljs-keyword">didSet</span> &#123;            <span class="hljs-keyword">self</span>.currentProgress <span class="hljs-operator">=</span> animationProgress        &#125;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     加载指定名称的 Lottie 动画</span><span class="hljs-comment">     </span><span class="hljs-comment">     - Parameters:</span><span class="hljs-comment">       - name: 动画文件的名称</span><span class="hljs-comment">       - bundle: 包含动画文件的 bundle</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadAnimation</span><span class="hljs-params">(name: String, bundle: Bundle)</span></span> &#123;        <span class="hljs-keyword">self</span>.animation <span class="hljs-operator">=</span> <span class="hljs-type">LottieAnimation</span>.named(name, bundle: bundle)    &#125;        <span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>)    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadAnimation</span><span class="hljs-params">(url: URL)</span></span> async &#123;        <span class="hljs-keyword">self</span>.animation <span class="hljs-operator">=</span> await <span class="hljs-type">LottieAnimation</span>.loadedFrom(url: url)    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-keyword">self</span>.play(completion: <span class="hljs-literal">nil</span>)    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">play</span><span class="hljs-params">(fromProgress: CGFloat, toProgress: CGFloat, completion: <span class="hljs-params">(<span class="hljs-params">(<span class="hljs-keyword">_</span> animationFinished: Bool)</span></span></span></span> -&gt; <span class="hljs-type">Void</span>)<span class="hljs-operator">?</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span>) &#123;        <span class="hljs-keyword">self</span>.play(fromProgress: fromProgress, toProgress: toProgress, loopMode: <span class="hljs-literal">nil</span>, completion: completion)    &#125;&#125;</code></pre></div><h3 id="调用桥文件里的内容"><a href="#调用桥文件里的内容" class="headerlink" title="调用桥文件里的内容"></a>调用桥文件里的内容</h3><ol><li>在使用 Lottie 库或每次更改 Swift 代码时，可以查看桥文件，以确保方法结构符合预期。</li><li>此处使用模块化方式，模块名为 <code>BLLottie</code>，引入桥文件方式为 <code>#import &lt;BLLottie/BLLottie-Swift.h&gt;</code>。</li><li>封装 Lottie 库。</li></ol><h4 id="封装-Lottie-库"><a href="#封装-Lottie-库" class="headerlink" title="封装 Lottie 库"></a>封装 Lottie 库</h4><h5 id="BLLOTAnimationView-BLLottie-h"><a href="#BLLOTAnimationView-BLLottie-h" class="headerlink" title="BLLOTAnimationView+BLLottie.h"></a>BLLOTAnimationView+BLLottie.h</h5><div class="hljs code-wrapper"><pre><code class="hljs objc"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;BLLottie/BLLottie-Swift.h&gt;</span></span><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (^LOTAnimationCompletionBlock)(<span class="hljs-built_in">BOOL</span> animationFinished);<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (^LOTAnimationUrlLoadedBlock)(<span class="hljs-built_in">BOOL</span> isSuccess);<span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">BLLOTAnimationView</span> (<span class="hljs-title">BLLottie</span>)</span>+ (<span class="hljs-keyword">nonnull</span> <span class="hljs-keyword">instancetype</span>)animationNamed:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSString</span> *)animationName inBundle:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSBundle</span> *)bundle;- (<span class="hljs-keyword">void</span>)animationWithUrl:(<span class="hljs-built_in">NSURL</span> *)url completionHandler:(LOTAnimationUrlLoadedBlock)completionHandler;- (<span class="hljs-keyword">void</span>)setAnimationNamed:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSString</span> *)animationName inBundle:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSBundle</span> *)bundle;- (<span class="hljs-keyword">void</span>)playFromProgress:(<span class="hljs-built_in">CGFloat</span>)fromStartProgress toProgress:(<span class="hljs-built_in">CGFloat</span>)toEndProgress withCompletion:(<span class="hljs-keyword">nullable</span> LOTAnimationCompletionBlock)completionBlock;<span class="hljs-keyword">@end</span><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span></code></pre></div><h5 id="BLLOTAnimationView-BLLottie-m"><a href="#BLLOTAnimationView-BLLottie-m" class="headerlink" title="BLLOTAnimationView+BLLottie.m"></a>BLLOTAnimationView+BLLottie.m</h5><div class="hljs code-wrapper"><pre><code class="hljs objc"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;BLLOTAnimationView+BLLottie.h&quot;</span></span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">BLLOTAnimationView</span> (<span class="hljs-title">BLLottie</span>)</span>+ (<span class="hljs-keyword">nonnull</span> <span class="hljs-keyword">instancetype</span>)animationNamed:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSString</span> *)animationName inBundle:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSBundle</span> *)bundle &#123;    <span class="hljs-keyword">return</span> [BLLOTAnimationView animationWithName:animationName bundle:bundle];&#125;- (<span class="hljs-keyword">void</span>)animationWithUrl:(<span class="hljs-built_in">NSURL</span> *)url completionHandler:(LOTAnimationUrlLoadedBlock)completionHandler &#123;    <span class="hljs-keyword">if</span> (@available(iOS <span class="hljs-number">13.0</span>, *)) &#123;        [<span class="hljs-keyword">self</span> animationWithUrl:url completionHandler:completionHandler];    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// Fallback on earlier versions</span>        <span class="hljs-keyword">if</span> (completionHandler) &#123;            completionHandler(<span class="hljs-literal">NO</span>);        &#125;    &#125;&#125;- (<span class="hljs-keyword">void</span>)setAnimationNamed:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSString</span> *)animationName inBundle:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSBundle</span> *)bundle &#123;    [<span class="hljs-keyword">self</span> setAnimationWithName:animationName bundle:bundle];&#125;- (<span class="hljs-keyword">void</span>)playFromProgress:(<span class="hljs-built_in">CGFloat</span>)fromStartProgress toProgress:(<span class="hljs-built_in">CGFloat</span>)toEndProgress withCompletion:(<span class="hljs-keyword">nullable</span> LOTAnimationCompletionBlock)completionBlock &#123;    [<span class="hljs-keyword">self</span> playFromProgress:fromStartProgress toProgress:toEndProgress completion:completionBlock];&#125;<span class="hljs-keyword">@end</span></code></pre></div><p>经过上述步骤，您可以在 Objective-C 项目中顺利集成并使用最新版本的 Lottie 动画库，同时通过自定义桥文件实现对老版本方法的兼容和优化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>OC, Swift, Lottie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KVC之valueForKeyPath进阶</title>
    <link href="/2023/01/22/KVC%E4%B9%8BvalueForKeyPath%E8%BF%9B%E9%98%B6/"/>
    <url>/2023/01/22/KVC%E4%B9%8BvalueForKeyPath%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="KVC之valueForKeyPath进阶"><a href="#KVC之valueForKeyPath进阶" class="headerlink" title="KVC之valueForKeyPath进阶"></a>KVC之valueForKeyPath进阶</h1><h2 id="KVC-常用方法"><a href="#KVC-常用方法" class="headerlink" title="KVC 常用方法"></a>KVC 常用方法</h2><p><code>setValue:forKey:</code><br><code>setValue: forKeyPath:</code><br><code>valueForKey:</code><br><code>valueForKeyPath:</code><br><code>setValuesForKeysWithDictionary:</code></p><p>注：<code>valueForKey</code>会自动把基本类型转成NSNumber或NSValue中包装成对象,同样,动态设置<code>setValue: forKey:</code>的属性也必须先包装成NSNumber对象类型才可以.</p><h2 id="高阶用法"><a href="#高阶用法" class="headerlink" title="高阶用法"></a>高阶用法</h2><h3 id="把字典中的key单独生成数组"><a href="#把字典中的key单独生成数组" class="headerlink" title="把字典中的key单独生成数组"></a>把字典中的key单独生成数组</h3><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">NSDictionary</span> *dic<span class="hljs-number">1</span> = @&#123;@<span class="hljs-string">&quot;city&quot;</span>:@<span class="hljs-string">&quot;北京&quot;</span>,@<span class="hljs-string">&quot;count&quot;</span>:@<span class="hljs-string">&quot;22&quot;</span>&#125;;<span class="hljs-attribute">NSDictionary</span> *dic<span class="hljs-number">2</span> = @&#123;@<span class="hljs-string">&quot;city&quot;</span>:@<span class="hljs-string">&quot;上海&quot;</span>,@<span class="hljs-string">&quot;count&quot;</span>:@<span class="hljs-string">&quot;18&quot;</span>&#125;;<span class="hljs-attribute">NSDictionary</span> *dic<span class="hljs-number">3</span> = @&#123;@<span class="hljs-string">&quot;city&quot;</span>:@<span class="hljs-string">&quot;深圳&quot;</span>,@<span class="hljs-string">&quot;count&quot;</span>:@<span class="hljs-string">&quot;17&quot;</span>&#125;;<span class="hljs-attribute">NSArray</span> *arr = @[dic<span class="hljs-number">1</span>,dic<span class="hljs-number">2</span>,dic<span class="hljs-number">3</span>];<span class="hljs-attribute">NSLog</span>(@<span class="hljs-string">&quot;city:%@&quot;</span>,[arr valueForKeyPath:@<span class="hljs-string">&quot;city&quot;</span>]);<span class="hljs-attribute">NSLog</span>(@<span class="hljs-string">&quot;count:%@&quot;</span>,[arr valueForKeyPath:@<span class="hljs-string">&quot;count&quot;</span>]);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs autohotkey">输出结果为：<span class="hljs-title">    city:</span>(    <span class="hljs-string">&quot;北京&quot;</span>,    <span class="hljs-string">&quot;上海&quot;</span>,    <span class="hljs-string">&quot;深圳&quot;</span>c4    )   <span class="hljs-title">    count:</span>(<span class="hljs-built_in">    22,</span><span class="hljs-built_in">    18,</span>    <span class="hljs-number">17</span>    )</code></pre></div><h3 id="把数组中的数取整"><a href="#把数组中的数取整" class="headerlink" title="把数组中的数取整"></a>把数组中的数取整</h3><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSArray</span> *array = [<span class="hljs-built_in">NSArray</span> arrayWithObjects:<span class="hljs-string">@&quot;10.11&quot;</span>,<span class="hljs-string">@&quot;20.22&quot;</span>, <span class="hljs-literal">nil</span>];<span class="hljs-built_in">NSArray</span> *resultArray = [array valueForKeyPath:<span class="hljs-string">@&quot;doubleValue.intValue&quot;</span>];<span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;resultArray:%@&quot;</span>, resultArray);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs autohotkey">输出结果为：<span class="hljs-title">    resultArray:</span>(<span class="hljs-built_in">    10,</span>    <span class="hljs-number">20</span>    )</code></pre></div><h3 id="valueForKeyPath-运算符"><a href="#valueForKeyPath-运算符" class="headerlink" title="valueForKeyPath 运算符"></a>valueForKeyPath 运算符</h3><p>在路径中,可以引用一下运算符 <code>@xxx</code> 来进行一些运算,例如获取一组值得平均值,最值或者总数.</p><ol><li>常规操作符：<code>@avg</code> <code>@count</code> <code>@max</code> <code>@min</code> <code>@sum</code><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSMutableArray</span> *personsArray = [[<span class="hljs-built_in">NSMutableArray</span> alloc] initWithCapacity:<span class="hljs-number">5</span>];<span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSInteger</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i ++) &#123;    <span class="hljs-built_in">NSString</span> *tempName = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;people%ld&quot;</span>,(<span class="hljs-keyword">long</span>)i];    <span class="hljs-built_in">NSDictionary</span> *personInfoDictionary = @&#123;                                           <span class="hljs-string">@&quot;name&quot;</span> : tempName,                                           <span class="hljs-string">@&quot;age&quot;</span> : @(<span class="hljs-number">10</span> + i),                                           <span class="hljs-string">@&quot;school&quot;</span> : <span class="hljs-string">@&quot;Hist&quot;</span>                                           &#125;;    Person *tempPerson = [Person yy_modelWithDictionary:personInfoDictionary];    [personsArray addObject:tempPerson];&#125;<span class="hljs-built_in">NSNumber</span> *count = [personsArray valueForKeyPath:<span class="hljs-string">@&quot;@count&quot;</span>];<span class="hljs-built_in">NSNumber</span> *sumAge = [personsArray valueForKeyPath:<span class="hljs-string">@&quot;@sum.age&quot;</span>];<span class="hljs-built_in">NSNumber</span> *avgAge = [personsArray valueForKeyPath:<span class="hljs-string">@&quot;@avg.age&quot;</span>];<span class="hljs-built_in">NSNumber</span> *maxAge = [personsArray valueForKeyPath:<span class="hljs-string">@&quot;@max.age&quot;</span>];<span class="hljs-built_in">NSNumber</span> *minAge = [personsArray valueForKeyPath:<span class="hljs-string">@&quot;@min.age&quot;</span>];<span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@  %@  %@  %@  %@&quot;</span>,count,sumAge,avgAge,maxAge,minAge);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs tap">输出结果为：   <span class="hljs-number"> 5 </span><span class="hljs-number"> 60 </span><span class="hljs-number"> 12 </span><span class="hljs-number"> 14 </span> 10</code></pre></div></li><li>对象操作符：<code>@distinctUnionOfObjects</code>(去掉重复) <code>@unionOfObjects</code>(不去重复)，都返回数组<div class="hljs code-wrapper"><pre><code class="hljs pgsql">NSArray *<span class="hljs-keyword">values</span> = [<span class="hljs-keyword">object</span> valueForKeyPath:@&quot;@distinctUnionOfObjects.value&quot;];</code></pre></div></li></ol><ul><li>注：<code>@distinctUnionOfObjects</code> 操作符返回被操作对象指定属性的集合并做去重操作，而<code>@unionOfObjects</code>则允许重复。如果其中任何涉及的对象为<code>nil</code>，则抛出异常。</li></ul><ol start="3"><li>Array和Set操作符: <code>@distinctUnionOfArrays</code>、<code>@unionOfArrays</code>对象是嵌套型的集合对象</li></ol><ul><li>普通去重<div class="hljs code-wrapper"><pre><code class="hljs haxe">NSArray *array = @[@<span class="hljs-string">&quot;name&quot;</span>, @<span class="hljs-string">&quot;w&quot;</span>, @<span class="hljs-string">&quot;aa&quot;</span>, @<span class="hljs-string">&quot;zxp&quot;</span>, @<span class="hljs-string">&quot;aa&quot;</span>]; <span class="hljs-comment">//返回的是一个新的数组</span> NSArray *<span class="hljs-keyword">new</span><span class="hljs-type">Array</span> = [array valueForKeyPath:<span class="hljs-type"></span>@<span class="hljs-string">&quot;@distinctUnionOfObjects.self&quot;</span>]; NSLog(@<span class="hljs-string">&quot;%@&quot;</span>, <span class="hljs-keyword">new</span><span class="hljs-type">Array</span>);</code></pre></div></li><li>单独取出字典中的 key/value 并去重<div class="hljs code-wrapper"><pre><code class="hljs autoit">NSArray myArray = <span class="hljs-symbol">@[</span>@&#123;<span class="hljs-symbol">@300</span>:@<span class="hljs-string">&quot;5 min&quot;</span>&#125;,                    @&#123;<span class="hljs-symbol">@900</span>:@<span class="hljs-string">&quot;15 min&quot;</span>&#125;,                    @&#123;<span class="hljs-symbol">@1800</span>:@<span class="hljs-string">&quot;30 min&quot;</span>&#125;,                    @&#123;<span class="hljs-symbol">@3600</span>:@<span class="hljs-string">&quot;1 hour&quot;</span>&#125;]<span class="hljs-comment">;</span>                    NSArray *values = [myArray valueForKeyPath: @<span class="hljs-string">&quot;@unionOfArrays.@allValues&quot;</span>]<span class="hljs-comment">;</span>NSArray *keys   = [myArray valueForKeyPath: @<span class="hljs-string">&quot;@unionOfArrays.@allKeys&quot;</span>]<span class="hljs-comment">;</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs autoit">// 相当于如下代码values = <span class="hljs-symbol">@[</span>@<span class="hljs-string">&quot;5 min&quot;</span>,@<span class="hljs-string">&quot;15 min&quot;</span>,@<span class="hljs-string">&quot;30 min&quot;</span>,@<span class="hljs-string">&quot;1 hour&quot;</span>]<span class="hljs-comment">;</span>keys = <span class="hljs-symbol">@[</span><span class="hljs-symbol">@300</span>, <span class="hljs-symbol">@900</span>, <span class="hljs-symbol">@1800</span>, <span class="hljs-symbol">@3600]</span><span class="hljs-comment">;</span></code></pre></div></li></ul><p>参考链接：<br><a href="https://blog.51cto.com/u_15894905/5896194">iOS监听模式之KVO、KVC的高阶应用</a><br><a href="https://blog.csdn.net/chusi3843/article/details/100617629">valueForKeyPath 妙用</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 添加渐变透明</title>
    <link href="/2022/12/04/iOS%20%E6%B7%BB%E5%8A%A0%E6%B8%90%E5%8F%98%E9%80%8F%E6%98%8E/"/>
    <url>/2022/12/04/iOS%20%E6%B7%BB%E5%8A%A0%E6%B8%90%E5%8F%98%E9%80%8F%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-添加渐变透明"><a href="#iOS-添加渐变透明" class="headerlink" title="iOS 添加渐变透明"></a>iOS 添加渐变透明</h1><div class="hljs code-wrapper"><pre><code class="hljs objectivec">[<span class="hljs-keyword">self</span> addAlphaMask:<span class="hljs-keyword">self</span>.view.layer]- (<span class="hljs-keyword">void</span>)addAlphaMask:(<span class="hljs-built_in">CALayer</span> *) targetLayer&#123;    <span class="hljs-comment">// 设置顶部渐隐层</span>    <span class="hljs-built_in">CAGradientLayer</span> *gradientLayer = [[<span class="hljs-built_in">CAGradientLayer</span> alloc] init];    gradientLayer = [<span class="hljs-built_in">CAGradientLayer</span> layer];    gradientLayer.startPoint = <span class="hljs-built_in">CGPointMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//渐变色起始位置</span>    gradientLayer.endPoint = <span class="hljs-built_in">CGPointMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>); <span class="hljs-comment">//渐变色终止位置</span>    gradientLayer.colors = @[(__bridge <span class="hljs-keyword">id</span>)[<span class="hljs-built_in">UIColor</span>.clearColor colorWithAlphaComponent:<span class="hljs-number">0</span>].CGColor, (__bridge <span class="hljs-keyword">id</span>)    [<span class="hljs-built_in">UIColor</span>.clearColor colorWithAlphaComponent:<span class="hljs-number">1.0</span>].CGColor];    gradientLayer.locations = @[@(<span class="hljs-number">0</span>), @(<span class="hljs-number">1.0</span>)]; <span class="hljs-comment">// 对应的位置（分割线）</span>    gradientLayer.frame = targetLayer.bounds;    targetLayer.mask = gradientLayer;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSCalendar 根据天数获取日期</title>
    <link href="/2022/11/17/NSCalendar%20%E6%A0%B9%E6%8D%AE%E5%A4%A9%E6%95%B0%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F/"/>
    <url>/2022/11/17/NSCalendar%20%E6%A0%B9%E6%8D%AE%E5%A4%A9%E6%95%B0%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="NSCalendar-根据天数获取日期"><a href="#NSCalendar-根据天数获取日期" class="headerlink" title="NSCalendar 根据天数获取日期"></a>NSCalendar 根据天数获取日期</h1><ul><li>可以用于设置 UIDatePicker 可选时间段</li></ul><h2 id="获取明日凌晨以及后面天数"><a href="#获取明日凌晨以及后面天数" class="headerlink" title="获取明日凌晨以及后面天数"></a>获取明日凌晨以及后面天数</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSCalendar</span> *calendar = [[<span class="hljs-built_in">NSCalendar</span> alloc] initWithCalendarIdentifier:<span class="hljs-built_in">NSCalendarIdentifierGregorian</span>];<span class="hljs-built_in">NSDate</span> *currentDate = [<span class="hljs-built_in">NSDate</span> date];<span class="hljs-built_in">NSDateComponents</span> *comps = [calendar components:<span class="hljs-built_in">NSCalendarUnitYear</span>|<span class="hljs-built_in">NSCalendarUnitMonth</span>|<span class="hljs-built_in">NSCalendarUnitDay</span> fromDate:currentDate]; <span class="hljs-comment">// 时间取整</span><span class="hljs-built_in">NSDate</span> *startDate = [calendar dateFromComponents:comps];<span class="hljs-built_in">NSDate</span> *maxDate = [calendar dateByAddingUnit:<span class="hljs-built_in">NSCalendarUnitDay</span> value:<span class="hljs-number">31</span> toDate:startDate options:<span class="hljs-number">0</span>];<span class="hljs-built_in">NSDate</span> *minDate = [calendar dateByAddingUnit:<span class="hljs-built_in">NSCalendarUnitDay</span> value:<span class="hljs-number">1</span> toDate:startDate options:<span class="hljs-number">0</span>];</code></pre></div><h2 id="获取当前时间后的30天"><a href="#获取当前时间后的30天" class="headerlink" title="获取当前时间后的30天"></a>获取当前时间后的30天</h2><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-type">NSCalendar</span> <span class="hljs-operator">*</span>calendar <span class="hljs-operator">=</span> [[<span class="hljs-type">NSCalendar</span> alloc] initWithCalendarIdentifier:<span class="hljs-type">NSCalendarIdentifierGregorian</span>];<span class="hljs-type">NSDate</span> <span class="hljs-operator">*</span>currentDate <span class="hljs-operator">=</span> [<span class="hljs-type">NSDate</span> date];<span class="hljs-type">NSDateComponents</span> <span class="hljs-operator">*</span>comps <span class="hljs-operator">=</span> [[<span class="hljs-type">NSDateComponents</span> alloc] <span class="hljs-keyword">init</span>];[comps setDay:<span class="hljs-number">31</span>]; <span class="hljs-comment">// 设置 31 天后</span><span class="hljs-type">NSDate</span> <span class="hljs-operator">*</span>maxDate <span class="hljs-operator">=</span> [calendar dateByAddingComponents:comps toDate:currentDate options:<span class="hljs-number">0</span>];[comps setDay:<span class="hljs-number">1</span>]; <span class="hljs-comment">// 设置 1 天后</span><span class="hljs-type">NSDate</span> <span class="hljs-operator">*</span>minDate <span class="hljs-operator">=</span> [calendar dateByAddingComponents:comps toDate:currentDate options:<span class="hljs-number">0</span>];</code></pre></div><h2 id="设置-UIDatePicker"><a href="#设置-UIDatePicker" class="headerlink" title="设置 UIDatePicker"></a>设置 UIDatePicker</h2><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-operator">-</span> (<span class="hljs-type">UIDatePicker</span> <span class="hljs-operator">*</span>)datePicker &#123;    <span class="hljs-keyword">if</span>(<span class="hljs-operator">!</span>_datePicker) &#123;        _datePicker <span class="hljs-operator">=</span> [[<span class="hljs-type">UIDatePicker</span> alloc]<span class="hljs-keyword">init</span>];        _datePicker.backgroundColor <span class="hljs-operator">=</span> [<span class="hljs-type">UIColor</span> hho_colorWithHex:<span class="hljs-number">0x4AC052</span> alpha:<span class="hljs-number">0.12</span>];        _datePicker.tintColor <span class="hljs-operator">=</span>  [<span class="hljs-type">UIColor</span> hho_colorWithHex:<span class="hljs-number">0x4AC052</span>];        _datePicker.locale <span class="hljs-operator">=</span> [<span class="hljs-type">NSLocale</span> localeWithLocaleIdentifier:@<span class="hljs-string">&quot;ja-Latn-hepburn&quot;</span>];        _datePicker.datePickerMode <span class="hljs-operator">=</span> <span class="hljs-type">UIDatePickerModeDateAndTime</span>;        _datePicker.preferredDatePickerStyle <span class="hljs-operator">=</span> <span class="hljs-type">UIDatePickerStyleWheels</span>;        _datePicker.minuteInterval <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;        <span class="hljs-type">NSCalendar</span> <span class="hljs-operator">*</span>calendar <span class="hljs-operator">=</span> [[<span class="hljs-type">NSCalendar</span> alloc] initWithCalendarIdentifier:<span class="hljs-type">NSCalendarIdentifierGregorian</span>];        <span class="hljs-type">NSDate</span> <span class="hljs-operator">*</span>currentDate <span class="hljs-operator">=</span> [<span class="hljs-type">NSDate</span> date];        <span class="hljs-type">NSDateComponents</span> <span class="hljs-operator">*</span>comps <span class="hljs-operator">=</span> [calendar components:<span class="hljs-type">NSCalendarUnitYear</span><span class="hljs-operator">|</span><span class="hljs-type">NSCalendarUnitMonth</span><span class="hljs-operator">|</span><span class="hljs-type">NSCalendarUnitDay</span> fromDate:currentDate];        <span class="hljs-type">NSDate</span> <span class="hljs-operator">*</span>startDate <span class="hljs-operator">=</span> [calendar dateFromComponents:comps];        <span class="hljs-type">NSDate</span> <span class="hljs-operator">*</span>maxDate <span class="hljs-operator">=</span> [calendar dateByAddingUnit:<span class="hljs-type">NSCalendarUnitDay</span> value:<span class="hljs-number">31</span> toDate:startDate options:<span class="hljs-number">0</span>];        <span class="hljs-type">NSDate</span> <span class="hljs-operator">*</span>minDate <span class="hljs-operator">=</span> [calendar dateByAddingUnit:<span class="hljs-type">NSCalendarUnitDay</span> value:<span class="hljs-number">1</span> toDate:startDate options:<span class="hljs-number">0</span>];        [_datePicker setMaximumDate:maxDate];        [_datePicker setMinimumDate:minDate];    &#125;    <span class="hljs-keyword">return</span> _datePicker;&#125;</code></pre></div><p>参考链接：<a href="https://blog.csdn.net/cse110/article/details/50433972">https://blog.csdn.net/cse110/article/details/50433972</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算东8区当前时间距离1970年0点的天数</title>
    <link href="/2022/10/17/%E8%AE%A1%E7%AE%97%E4%B8%9C8%E5%8C%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E8%B7%9D%E7%A6%BB1970%E5%B9%B40%E7%82%B9%E7%9A%84%E5%A4%A9%E6%95%B0/"/>
    <url>/2022/10/17/%E8%AE%A1%E7%AE%97%E4%B8%9C8%E5%8C%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E8%B7%9D%E7%A6%BB1970%E5%B9%B40%E7%82%B9%E7%9A%84%E5%A4%A9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="计算东8区当前时间距离1970年0点的天数"><a href="#计算东8区当前时间距离1970年0点的天数" class="headerlink" title="计算东8区当前时间距离1970年0点的天数"></a>计算东8区当前时间距离1970年0点的天数</h1><p>可以用作跨天场景计算</p> <div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">NSUInteger current</span> = [[NSDate dateWithTimeIntervalSinceNow:0] timeIntervalSince1970];<span class="hljs-attribute">NSUInteger days</span> =  (current + 8*60*60) / 86400;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 比较 APP 版本号</title>
    <link href="/2022/10/02/iOS%20%E6%AF%94%E8%BE%83%20APP%20%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <url>/2022/10/02/iOS%20%E6%AF%94%E8%BE%83%20APP%20%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-比较-APP-版本号"><a href="#iOS-比较-APP-版本号" class="headerlink" title="iOS 比较 APP 版本号"></a>iOS 比较 APP 版本号</h1><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">NSString</span> *showVersion = @<span class="hljs-string">&quot;1.6.0&quot;</span>;<span class="hljs-attribute">NSString</span> *<span class="hljs-literal">last</span>AppVersion =  @<span class="hljs-string">&quot;1.5.9&quot;</span>;<span class="hljs-attribute">BOOL</span> isLowerThanShowVersion = ([<span class="hljs-literal">last</span>AppVersion compare:showVersion options:NSNumericSearch] == NSOrderedAscending);</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 电池栏颜色更改</title>
    <link href="/2022/09/10/iOS%20%E7%94%B5%E6%B1%A0%E6%A0%8F%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/"/>
    <url>/2022/09/10/iOS%20%E7%94%B5%E6%B1%A0%E6%A0%8F%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-电池栏颜色更改"><a href="#iOS-电池栏颜色更改" class="headerlink" title="iOS 电池栏颜色更改"></a>iOS 电池栏颜色更改</h1><h3 id="获取外观"><a href="#获取外观" class="headerlink" title="获取外观"></a>获取外观</h3><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>)) &#123;    <span class="hljs-type">UIUserInterfaceStyle</span> mode <span class="hljs-operator">=</span> <span class="hljs-type">UITraitCollection</span>.currentTraitCollection.userInterfaceStyle;    <span class="hljs-keyword">if</span> (mode <span class="hljs-operator">==</span> <span class="hljs-type">UIUserInterfaceStyleDark</span>) &#123;        <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;深色模式&quot;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode <span class="hljs-operator">==</span> <span class="hljs-type">UIUserInterfaceStyleLight</span>) &#123;        <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;浅色模式&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;未知模式&quot;</span>);    &#125;&#125;</code></pre></div><h3 id="电池栏更改颜色"><a href="#电池栏更改颜色" class="headerlink" title="电池栏更改颜色"></a>电池栏更改颜色</h3><blockquote><p>info.plist<br>View controller-based status bar appearance<br>NO</p></blockquote><blockquote><p>Status bar style<br>黑底白字/白底黑字<br>Dark Content/Light Content</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 模糊的几种方法（待补充）</title>
    <link href="/2022/08/25/iOS%20%E6%A8%A1%E7%B3%8A%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/"/>
    <url>/2022/08/25/iOS%20%E6%A8%A1%E7%B3%8A%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-模糊的几种方法（待补充）"><a href="#iOS-模糊的几种方法（待补充）" class="headerlink" title="iOS 模糊的几种方法（待补充）"></a>iOS 模糊的几种方法（待补充）</h1><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    <span class="hljs-comment">// Do any additional setup after loading the view.</span>    [<span class="hljs-keyword">self</span>.view addSubview:<span class="hljs-keyword">self</span>.blurredImageLeft];    <span class="hljs-keyword">self</span>.blurredImageLeft.image = [<span class="hljs-keyword">self</span> blurryImage:[<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;10000&quot;</span>] withBlurLevel:<span class="hljs-number">10</span>];        [<span class="hljs-keyword">self</span>.view addSubview:<span class="hljs-keyword">self</span>.blurredImageRight];    [<span class="hljs-keyword">self</span> addBlurreView];&#125;- (<span class="hljs-built_in">UIImage</span> *)blurryImage:(<span class="hljs-built_in">UIImage</span> *)image           withBlurLevel:(<span class="hljs-built_in">CGFloat</span>)blur &#123;    <span class="hljs-comment">//CIImage</span>    <span class="hljs-built_in">CIImage</span> *ciImage = [[<span class="hljs-built_in">CIImage</span> alloc]initWithImage:image];    <span class="hljs-comment">//CIFilter</span>    <span class="hljs-built_in">CIFilter</span> *blurFilter = [<span class="hljs-built_in">CIFilter</span> filterWithName:<span class="hljs-string">@&quot;CIGaussianBlur&quot;</span>];    <span class="hljs-comment">//将图片输入到滤镜中</span>    [blurFilter setValue:ciImage forKey:kCIInputImageKey];    <span class="hljs-comment">//设置的模糊程度</span>        [blurFilter setValue:@(blur) forKey:<span class="hljs-string">@&quot;inputRadius&quot;</span>];        <span class="hljs-comment">//将处理好的图片输出</span>    <span class="hljs-built_in">CIImage</span> *outCiImage = [blurFilter valueForKey:kCIOutputImageKey];    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>,[blurFilter attributes]);    <span class="hljs-comment">//CIContext</span>    <span class="hljs-built_in">CIContext</span> *context = [<span class="hljs-built_in">CIContext</span> contextWithOptions:<span class="hljs-literal">nil</span>];    <span class="hljs-comment">//获取CGImage句柄</span>    <span class="hljs-built_in">CGImageRef</span> outCGImage = [context createCGImage:outCiImage fromRect:                           [[<span class="hljs-built_in">CIImage</span> imageWithCGImage:image.CGImage] extent]];    <span class="hljs-comment">//最终获取到图片</span>    <span class="hljs-built_in">UIImage</span> *blurImage = [<span class="hljs-built_in">UIImage</span> imageWithCGImage:outCGImage];    <span class="hljs-comment">//释放CGImage句柄</span>    <span class="hljs-built_in">CGImageRelease</span>(outCGImage);    <span class="hljs-comment">/*.............. */</span>    <span class="hljs-comment">//初始化UIImageView</span>    <span class="hljs-keyword">return</span> blurImage;&#125;- (<span class="hljs-keyword">void</span>)addBlurreView &#123;    <span class="hljs-built_in">UIBlurEffect</span> *effect = [<span class="hljs-built_in">UIBlurEffect</span> effectWithStyle:<span class="hljs-built_in">UIBlurEffectStyleLight</span>];    <span class="hljs-built_in">UIVisualEffectView</span> *effectView = [[<span class="hljs-built_in">UIVisualEffectView</span> alloc] initWithEffect:effect];    effectView.frame = <span class="hljs-keyword">self</span>.blurredImageRight.bounds;    [<span class="hljs-keyword">self</span>.blurredImageRight addSubview:effectView];        <span class="hljs-built_in">UIVibrancyEffect</span> *vibrancyView = [<span class="hljs-built_in">UIVibrancyEffect</span> effectForBlurEffect:effect];    <span class="hljs-built_in">UIVisualEffectView</span> *visualEffectView = [[<span class="hljs-built_in">UIVisualEffectView</span> alloc] initWithEffect:vibrancyView];    visualEffectView.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;    [effectView.contentView addSubview:visualEffectView];&#125;- (<span class="hljs-built_in">UIImageView</span> *)blurredImageLeft &#123;    <span class="hljs-keyword">if</span> (_blurredImageLeft == <span class="hljs-literal">nil</span>) &#123;        _blurredImageLeft = [[<span class="hljs-built_in">UIImageView</span> alloc]initWithFrame:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.view.frame.size.width/<span class="hljs-number">2</span>, <span class="hljs-keyword">self</span>.view.frame.size.height)];        _blurredImageLeft.contentMode = <span class="hljs-built_in">UIViewContentModeScaleAspectFill</span>;        _blurredImageLeft.clipsToBounds = <span class="hljs-literal">YES</span>;    &#125;    <span class="hljs-keyword">return</span> _blurredImageLeft;&#125;- (<span class="hljs-built_in">UIImageView</span> *)blurredImageRight &#123;    <span class="hljs-keyword">if</span> (!_blurredImageRight) &#123;        _blurredImageRight = [[<span class="hljs-built_in">UIImageView</span> alloc] initWithFrame:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-keyword">self</span>.view.frame.size.width/<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">self</span>.view.frame.size.width/<span class="hljs-number">2</span>, <span class="hljs-keyword">self</span>.view.frame.size.height)];        _blurredImageRight.image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;10000&quot;</span>];        _blurredImageRight.contentMode = <span class="hljs-built_in">UIViewContentModeScaleAspectFill</span>;        _blurredImageRight.clipsToBounds = <span class="hljs-literal">YES</span>;    &#125;    <span class="hljs-keyword">return</span> _blurredImageRight;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Masonry 多控件水平/竖直布局</title>
    <link href="/2022/07/31/Masonry%20%E5%A4%9A%E6%8E%A7%E4%BB%B6%E6%B0%B4%E5%B9%B3:%E7%AB%96%E7%9B%B4%E5%B8%83%E5%B1%80/"/>
    <url>/2022/07/31/Masonry%20%E5%A4%9A%E6%8E%A7%E4%BB%B6%E6%B0%B4%E5%B9%B3:%E7%AB%96%E7%9B%B4%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Masonry-多控件水平-竖直布局"><a href="#Masonry-多控件水平-竖直布局" class="headerlink" title="Masonry 多控件水平/竖直布局"></a>Masonry 多控件水平/竖直布局</h1><div class="hljs code-wrapper"><pre><code class="hljs groovy"><span class="hljs-comment">//水平方向宽度固定等间隔</span><span class="hljs-comment">//每个 item 水平方向宽度固定为 110，item 之间间隔自动计算，第一个item相对父view左侧大小：leadSpacing，最后一个item相对父view右侧大小：tailSpacing</span>[self.viewArray <span class="hljs-attr">mas_distributeViewsAlongAxis:</span>MASAxisTypeHorizontal <span class="hljs-attr">withFixedItemLength:</span><span class="hljs-number">110</span> <span class="hljs-attr">leadSpacing:</span><span class="hljs-number">12</span> <span class="hljs-attr">tailSpacing:</span><span class="hljs-number">12</span>];[self.viewArray <span class="hljs-attr">mas_makeConstraints:</span>^(MASConstraintMaker *make) &#123;    make.bottom.mas_equalTo(self);    make.height.mas_equalTo(<span class="hljs-number">112</span>);&#125;];<span class="hljs-comment">//竖直方向高度固定等间隔</span>[self.viewArray <span class="hljs-attr">mas_distributeViewsAlongAxis:</span>MASAxisTypeVertical <span class="hljs-attr">withFixedItemLength:</span><span class="hljs-number">104</span> <span class="hljs-attr">leadSpacing:</span><span class="hljs-number">10</span> <span class="hljs-attr">tailSpacing:</span><span class="hljs-number">10</span>];[self.viewArray <span class="hljs-attr">mas_makeConstraints:</span>^(MASConstraintMaker *make) &#123;    make.right.mas_equalTo(self);    make.width.mas_equalTo(<span class="hljs-number">110</span>);&#125;];<span class="hljs-comment">// 水平方向排列、控件间隔固定为50、控件长度不定</span>[btns <span class="hljs-attr">mas_distributeViewsAlongAxis:</span>MASAxisTypeHorizontal <span class="hljs-attr">withFixedSpacing:</span><span class="hljs-number">50</span> <span class="hljs-attr">leadSpacing:</span><span class="hljs-number">10</span> <span class="hljs-attr">tailSpacing:</span><span class="hljs-number">10</span>];</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CoreMotion 陀螺仪</title>
    <link href="/2022/07/02/CoreMotion%E9%99%80%E8%9E%BA%E4%BB%AA/"/>
    <url>/2022/07/02/CoreMotion%E9%99%80%E8%9E%BA%E4%BB%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="CoreMotion-陀螺仪"><a href="#CoreMotion-陀螺仪" class="headerlink" title="CoreMotion 陀螺仪"></a>CoreMotion 陀螺仪</h1><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;CoreMotion/CoreMotion.h&gt;</span></span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>)<span class="hljs-built_in">CMMotionManager</span> * manager;- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    <span class="hljs-comment">// Do any additional setup after loading the view.</span>    <span class="hljs-keyword">self</span>.view.backgroundColor = <span class="hljs-built_in">UIColor</span>.blackColor;    <span class="hljs-built_in">CMMotionManager</span> *manager = [[<span class="hljs-built_in">CMMotionManager</span> alloc] init];    <span class="hljs-keyword">self</span>.manager = manager;    <span class="hljs-built_in">UIView</span> *view2 = [<span class="hljs-built_in">UIView</span> new];    view2.tag = <span class="hljs-number">2</span>;    view2.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);    view2.backgroundColor = [<span class="hljs-built_in">UIColor</span> systemPinkColor];    view2.layer.borderWidth = <span class="hljs-number">2.0</span>;    view2.layer.borderColor = [<span class="hljs-built_in">UIColor</span> blueColor].CGColor;    [<span class="hljs-keyword">self</span>.view addSubview:view2];        <span class="hljs-built_in">UIView</span> *view3 = [<span class="hljs-built_in">UIView</span> new];    view3.tag = <span class="hljs-number">2</span>;    view3.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">100</span>, <span class="hljs-number">500</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>);    view3.backgroundColor = [<span class="hljs-built_in">UIColor</span> yellowColor];    [<span class="hljs-keyword">self</span>.view addSubview:view3];        [manager startDeviceMotionUpdatesUsingReferenceFrame:<span class="hljs-built_in">CMAttitudeReferenceFrameXArbitraryZVertical</span> toQueue:[<span class="hljs-built_in">NSOperationQueue</span> new] withHandler:^(<span class="hljs-built_in">CMDeviceMotion</span> * _Nullable motion, <span class="hljs-built_in">NSError</span> * _Nullable error) &#123;        <span class="hljs-built_in">CGFloat</span> angle = motion.attitude.yaw;        <span class="hljs-built_in">CGFloat</span> rollAngle = motion.attitude.roll;        <span class="hljs-built_in">CGFloat</span> pitchAngle = motion.attitude.pitch;        <span class="hljs-built_in">CGFloat</span> gx = motion.gravity.x;        <span class="hljs-built_in">CGFloat</span> gy = motion.gravity.y;        <span class="hljs-keyword">if</span> (fabs(gx - <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0.3</span> &amp;&amp; fabs(gy) &lt; <span class="hljs-number">0.3</span>) &#123;                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;横屏1&quot;</span>);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fabs(gx + <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0.3</span> &amp;&amp; fabs(gy) &lt; <span class="hljs-number">0.3</span>) &#123;                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;横屏2&quot;</span>);        &#125;                <span class="hljs-keyword">if</span> ((fabs(gx) &lt; <span class="hljs-number">0.3</span> &amp;&amp; fabs(gy + <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0.3</span>)|| (fabs(gx) &lt; <span class="hljs-number">0.3</span> &amp;&amp; fabs(gy - <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0.3</span>)) &#123;                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;竖屏的两种&quot;</span>);        &#125;                        <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;            <span class="hljs-built_in">CATransform3D</span> c1 = <span class="hljs-built_in">CATransform3DMakeRotation</span>(angle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);            <span class="hljs-built_in">CATransform3D</span> c2 = <span class="hljs-built_in">CATransform3DMakeRotation</span>(rollAngle, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);            <span class="hljs-built_in">CATransform3D</span> c3 = <span class="hljs-built_in">CATransform3DMakeRotation</span>(pitchAngle, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);            view2.layer.transform = <span class="hljs-built_in">CATransform3DConcat</span>(c3, <span class="hljs-built_in">CATransform3DConcat</span>(c1, c2));            view3.layer.transform = <span class="hljs-built_in">CATransform3DConcat</span>(c1, c2);        &#125;);    &#125;];&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAAnimation 帧动画</title>
    <link href="/2022/06/25/CAAnimation%E5%B8%A7%E5%8A%A8%E7%94%BB/"/>
    <url>/2022/06/25/CAAnimation%E5%B8%A7%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="CAAnimation-帧动画"><a href="#CAAnimation-帧动画" class="headerlink" title="CAAnimation 帧动画"></a>CAAnimation 帧动画</h1><ol><li>CABasicAnimation<br>通过设定起始点，终点，时间，动画会沿着你这设定点进行移动。可以看做特殊的CAKeyFrameAnimation</li><li>CAKeyframeAnimation<br>Keyframe顾名思义就是关键点的frame，你可以通过设定CALayer的始点、中间关键点、终点的frame，时间，动画会沿你设定的轨迹进行移动</li><li>CAAnimationGroup<br>Group也就是组合的意思，就是把对这个Layer的所有动画都组合起来。PS：一个layer设定了很多动画，他们都会同时执行，如何按顺序执行我到时候再讲。</li><li>CATransition<br>这个就是苹果帮开发者封装好的一些动画。</li></ol><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SWAP_DOWN_TIME 0.4</span>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">self</span>.view addSubview:<span class="hljs-keyword">self</span>.videoView];&#125;- (<span class="hljs-keyword">void</span>)touchesBegan:(<span class="hljs-built_in">NSSet</span>&lt;<span class="hljs-built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="hljs-built_in">UIEvent</span> *)event &#123;    [<span class="hljs-keyword">self</span> animationManager];&#125;- (<span class="hljs-keyword">void</span>)animationManager &#123;    <span class="hljs-built_in">CABasicAnimation</span> *borderWidthAnimation = [<span class="hljs-built_in">CABasicAnimation</span> animationWithKeyPath:<span class="hljs-string">@&quot;borderWidth&quot;</span>];    borderWidthAnimation.toValue = [<span class="hljs-built_in">NSNumber</span> numberWithFloat:<span class="hljs-number">0.0</span>f];    borderWidthAnimation.duration = <span class="hljs-number">0.25</span>f;    borderWidthAnimation.fillMode = kCAFillModeForwards;    borderWidthAnimation.removedOnCompletion = <span class="hljs-literal">NO</span>;    borderWidthAnimation.beginTime = <span class="hljs-number">3.0</span>f;    <span class="hljs-built_in">CABasicAnimation</span> *boundsWidthAnimation = [<span class="hljs-built_in">CABasicAnimation</span> animationWithKeyPath:<span class="hljs-string">@&quot;bounds.size.width&quot;</span>];    boundsWidthAnimation.toValue = [<span class="hljs-built_in">NSNumber</span> numberWithFloat:<span class="hljs-keyword">self</span>.view.frame.size.width];    boundsWidthAnimation.duration = <span class="hljs-number">3.0</span>f;    boundsWidthAnimation.fillMode = kCAFillModeForwards;    boundsWidthAnimation.removedOnCompletion = <span class="hljs-literal">NO</span>;    boundsWidthAnimation.beginTime = <span class="hljs-number">0.0</span>f;    <span class="hljs-built_in">CABasicAnimation</span> *boundsHeightAnimation = [<span class="hljs-built_in">CABasicAnimation</span> animationWithKeyPath:<span class="hljs-string">@&quot;bounds.size.height&quot;</span>];    boundsHeightAnimation.toValue = [<span class="hljs-built_in">NSNumber</span> numberWithFloat:<span class="hljs-keyword">self</span>.view.frame.size.height];    boundsHeightAnimation.duration = <span class="hljs-number">3.0</span>f;    boundsHeightAnimation.fillMode = kCAFillModeForwards;    boundsHeightAnimation.removedOnCompletion = <span class="hljs-literal">NO</span>;    boundsHeightAnimation.beginTime = <span class="hljs-number">0.0</span>f;    <span class="hljs-built_in">CABasicAnimation</span> *positionXAnimation = [<span class="hljs-built_in">CABasicAnimation</span> animationWithKeyPath:<span class="hljs-string">@&quot;position.x&quot;</span>];    positionXAnimation.toValue = [<span class="hljs-built_in">NSNumber</span> numberWithFloat:<span class="hljs-number">400</span>];    positionXAnimation.duration = <span class="hljs-number">3.0</span>f;    positionXAnimation.fillMode = kCAFillModeForwards;    positionXAnimation.removedOnCompletion = <span class="hljs-literal">NO</span>;    positionXAnimation.beginTime = <span class="hljs-number">0.0</span>f;    <span class="hljs-built_in">CABasicAnimation</span> *positionYAnimation = [<span class="hljs-built_in">CABasicAnimation</span> animationWithKeyPath:<span class="hljs-string">@&quot;position.y&quot;</span>];    positionYAnimation.toValue = [<span class="hljs-built_in">NSNumber</span> numberWithFloat:<span class="hljs-number">500</span>];    positionYAnimation.duration = <span class="hljs-number">3.0</span>f;    positionYAnimation.fillMode = kCAFillModeForwards;    positionYAnimation.removedOnCompletion = <span class="hljs-literal">NO</span>;    positionYAnimation.beginTime = <span class="hljs-number">0.0</span>f;    <span class="hljs-built_in">CAAnimationGroup</span> *groupAnimation = [<span class="hljs-built_in">CAAnimationGroup</span> animation];    groupAnimation.animations = @[boundsWidthAnimation, boundsHeightAnimation,  borderWidthAnimation, positionXAnimation, positionYAnimation];    groupAnimation.fillMode = kCAFillModeForwards;    groupAnimation.removedOnCompletion = <span class="hljs-literal">NO</span>;    groupAnimation.duration = <span class="hljs-number">8.0</span>f;    [<span class="hljs-keyword">self</span>.videoView.layer addAnimation:groupAnimation forKey:<span class="hljs-string">@&quot;liveAnimation&quot;</span>];            <span class="hljs-comment">/// 贝塞尔曲线</span>    <span class="hljs-built_in">CAKeyframeAnimation</span> *animation2 = [<span class="hljs-built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="hljs-string">@&quot;position&quot;</span>];    <span class="hljs-built_in">UIBezierPath</span>* path2 = [<span class="hljs-built_in">UIBezierPath</span> bezierPath];    [path2 moveToPoint:<span class="hljs-built_in">CGPointMake</span>(finishPoint.x, SCREEN_WIDTH/<span class="hljs-number">2</span>)];    [path2 addLineToPoint:finishPoint];    path2.lineCapStyle  = kCGLineCapRound;    path2.lineJoinStyle = kCGLineJoinRound;    [path2 stroke];    animation2.path = path2.CGPath;    animation2.duration =SWAP_DOWN_TIME;    animation2.timingFunction = [<span class="hljs-built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];    animation2.fillMode = <span class="hljs-string">@&quot;forwards&quot;</span>;    animation2.beginTime = moveTime;        <span class="hljs-comment">/// 多个关键帧动画</span>    <span class="hljs-built_in">CAKeyframeAnimation</span> *scaleAnimation = [<span class="hljs-built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="hljs-string">@&quot;transform.scale&quot;</span>];    scaleAnimation.values = @[@(<span class="hljs-number">1.0</span>),@(<span class="hljs-number">0.5</span>),@(<span class="hljs-number">0.2</span>),@(<span class="hljs-number">0.1</span>),@(<span class="hljs-number">0.0</span>)];    scaleAnimation.keyTimes = @[@<span class="hljs-number">0.</span>f, @(SWAP_DOWN_TIME/<span class="hljs-number">2</span>), @(SWAP_DOWN_TIME),@(SWAP_DOWN_TIME*<span class="hljs-number">2</span>),@(<span class="hljs-number">1</span>)];    scaleAnimation.duration = SWAP_DOWN_TIME;    scaleAnimation.fillMode = <span class="hljs-string">@&quot;forwards&quot;</span>;    scaleAnimation.beginTime = moveTime;&#125;-  (<span class="hljs-built_in">UIImageView</span> *)videoView &#123;    <span class="hljs-keyword">if</span> (_videoView == <span class="hljs-literal">nil</span>) &#123;        _videoView = [[<span class="hljs-built_in">UIImageView</span> alloc]initWithFrame:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-keyword">self</span>.view.frame.size.width/<span class="hljs-number">2</span> - <span class="hljs-number">150</span>, <span class="hljs-keyword">self</span>.view.frame.size.height/<span class="hljs-number">2</span> - <span class="hljs-number">150</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>)];        _videoView.image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;10000&quot;</span>];        _videoView.contentMode = <span class="hljs-built_in">UIViewContentModeScaleAspectFill</span>;        _videoView.layer.cornerRadius = <span class="hljs-number">10</span>;        _videoView.layer.masksToBounds = <span class="hljs-literal">YES</span>;        _videoView.layer.borderColor = [<span class="hljs-built_in">UIColor</span> whiteColor].CGColor;        _videoView.layer.borderWidth = <span class="hljs-number">20</span>;    &#125;    <span class="hljs-keyword">return</span> _videoView;&#125;<span class="hljs-comment">// 结束/开始回调</span>- (<span class="hljs-keyword">void</span>)animationDidStop:(<span class="hljs-built_in">CAAnimation</span> *)anim finished:(<span class="hljs-built_in">BOOL</span>)flag &#123;&#125;- (<span class="hljs-keyword">void</span>)animationDidStart:(<span class="hljs-built_in">CAAnimation</span> *)anim &#123;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 设置时区、AM/PM 并实时显示当前时间</title>
    <link href="/2022/06/05/iOS%20%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA%E3%80%81AM:PM%20%E5%B9%B6%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <url>/2022/06/05/iOS%20%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA%E3%80%81AM:PM%20%E5%B9%B6%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-设置时区、AM-PM-并实时显示当前时间"><a href="#iOS-设置时区、AM-PM-并实时显示当前时间" class="headerlink" title="iOS 设置时区、AM/PM 并实时显示当前时间"></a>iOS 设置时区、AM/PM 并实时显示当前时间</h1><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;ViewController.h&quot;</span></span><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> ()</span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>,<span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSTimer</span> *liveTimer;<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>,<span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *liveBigLocalDateLabel;<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>,<span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *liveBigLocalTimeLabel;<span class="hljs-keyword">@end</span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    <span class="hljs-comment">// 设置定时器每秒更新 label</span>    <span class="hljs-keyword">self</span>.liveTimer = [<span class="hljs-built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="hljs-number">1.0</span>f target:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(timerFunc) userInfo:<span class="hljs-literal">nil</span> repeats:<span class="hljs-literal">YES</span>];        [<span class="hljs-keyword">self</span>.view addSubview:<span class="hljs-keyword">self</span>.liveBigLocalTimeLabel];    [<span class="hljs-keyword">self</span>.view addSubview:<span class="hljs-keyword">self</span>.liveBigLocalDateLabel];    &#125;- (<span class="hljs-keyword">void</span>)timerFunc &#123;    <span class="hljs-built_in">NSDate</span> *date = [<span class="hljs-built_in">NSDate</span> date];    <span class="hljs-comment">// 设置 Time Zone ID，具体时区可以查阅表格（见参考链接）</span>    <span class="hljs-built_in">NSTimeZone</span> *zone = [<span class="hljs-built_in">NSTimeZone</span> timeZoneWithAbbreviation:<span class="hljs-string">@&quot;Asia/Hong_Kong&quot;</span>];    <span class="hljs-built_in">NSDateFormatter</span> *formatterDate = [[<span class="hljs-built_in">NSDateFormatter</span> alloc]init];    [formatterDate setDateFormat:<span class="hljs-string">@&quot;MM月dd日&quot;</span>];    formatterDate.timeZone = zone;    <span class="hljs-built_in">NSString</span> *timestampDate = [formatterDate stringFromDate:date];    [<span class="hljs-keyword">self</span>.liveBigLocalDateLabel setText:timestampDate];        <span class="hljs-built_in">NSDateFormatter</span> *formatterTime = [[<span class="hljs-built_in">NSDateFormatter</span> alloc]init];    [formatterTime setDateFormat:<span class="hljs-string">@&quot;HH:mm:ss a&quot;</span>];    <span class="hljs-comment">// 若不设置，默认显示 AM PM 和 AP P语言有关（中文显示 上午/下午）</span>    formatterTime.AMSymbol = <span class="hljs-string">@&quot;AM&quot;</span>;    formatterTime.PMSymbol = <span class="hljs-string">@&quot;PM&quot;</span>;    formatterTime.timeZone = zone;    <span class="hljs-built_in">NSString</span> *timestampTime = [formatterTime stringFromDate:date];    [<span class="hljs-keyword">self</span>.liveBigLocalTimeLabel setText:timestampTime];&#125;- (<span class="hljs-built_in">UILabel</span> *)liveBigLocalTimeLabel &#123;    <span class="hljs-keyword">if</span> (_liveBigLocalTimeLabel == <span class="hljs-literal">nil</span>) &#123;        _liveBigLocalTimeLabel = [[<span class="hljs-built_in">UILabel</span> alloc]initWithFrame:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">20</span>, <span class="hljs-number">182</span>, <span class="hljs-number">350</span>, <span class="hljs-number">42</span>)];        _liveBigLocalTimeLabel.textColor = [<span class="hljs-built_in">UIColor</span> purpleColor];        [_liveBigLocalTimeLabel setFont:[<span class="hljs-built_in">UIFont</span> fontWithName:<span class="hljs-string">@&quot;HiraginoSans-W6&quot;</span> size:<span class="hljs-number">35</span>]];    &#125;    <span class="hljs-keyword">return</span> _liveBigLocalTimeLabel;&#125;- (<span class="hljs-built_in">UILabel</span> *)liveBigLocalDateLabel &#123;    <span class="hljs-keyword">if</span> (_liveBigLocalDateLabel == <span class="hljs-literal">nil</span>) &#123;        _liveBigLocalDateLabel = [[<span class="hljs-built_in">UILabel</span> alloc]initWithFrame:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">20</span>, <span class="hljs-number">130</span>, <span class="hljs-number">200</span>, <span class="hljs-number">30</span>)];        _liveBigLocalDateLabel.textColor = [<span class="hljs-built_in">UIColor</span> purpleColor];        [_liveBigLocalDateLabel setFont:[<span class="hljs-built_in">UIFont</span> fontWithName:<span class="hljs-string">@&quot;HiraginoSans-W6&quot;</span> size:<span class="hljs-number">35</span>]];    &#125;    <span class="hljs-keyword">return</span> _liveBigLocalDateLabel;&#125;<span class="hljs-keyword">@end</span></code></pre></div><p>参考：<br><a href="https://docs.oracle.com/middleware/12212/wcs/tag-ref/MISC/TimeZones.html">Time Zone ID 查询</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过屏幕刷新显示实时时间、倒计时</title>
    <link href="/2022/05/08/%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4/"/>
    <url>/2022/05/08/%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="通过屏幕刷新显示实时时间、倒计时"><a href="#通过屏幕刷新显示实时时间、倒计时" class="headerlink" title="通过屏幕刷新显示实时时间、倒计时"></a>通过屏幕刷新显示实时时间、倒计时</h1><h2 id="获取屏幕刷新率"><a href="#获取屏幕刷新率" class="headerlink" title="获取屏幕刷新率"></a>获取屏幕刷新率</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">CADisplayLink</span> *displayLink;- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    <span class="hljs-keyword">self</span>.displayLink = [<span class="hljs-built_in">CADisplayLink</span> displayLinkWithTarget:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(onDisplayLink:)];    <span class="hljs-keyword">self</span>.displayLink.preferredFramesPerSecond = <span class="hljs-number">10</span>; <span class="hljs-comment">// 首选每秒刷新次数，不设置则为屏幕最大刷新率，一般为 60（HZ）</span>    [<span class="hljs-keyword">self</span>.displayLink addToRunLoop:[<span class="hljs-built_in">NSRunLoop</span> mainRunLoop] forMode:<span class="hljs-built_in">NSRunLoopCommonModes</span>];&#125;- (<span class="hljs-keyword">void</span>)onDisplayLink:(<span class="hljs-built_in">CADisplayLink</span> *)displayLink &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;每秒 60 次&quot;</span>);&#125;</code></pre></div><h2 id="全部代码详情"><a href="#全部代码详情" class="headerlink" title="全部代码详情"></a>全部代码详情</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> ()</span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">CADisplayLink</span> *displayLink;<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">NSInteger</span> preSaleEndTime;<span class="hljs-keyword">@end</span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    <span class="hljs-keyword">self</span>.displayLink = [<span class="hljs-built_in">CADisplayLink</span> displayLinkWithTarget:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(onDisplayLink:)];<span class="hljs-comment">//  self.displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(onDisplayLinkTime:)];</span>    <span class="hljs-keyword">self</span>.displayLink.preferredFramesPerSecond = <span class="hljs-number">10</span>; <span class="hljs-comment">// 首选每秒刷新次数，不设置则为屏幕最大刷新率，一般为 60（HZ）</span>    [<span class="hljs-keyword">self</span>.displayLink addToRunLoop:[<span class="hljs-built_in">NSRunLoop</span> mainRunLoop] forMode:<span class="hljs-built_in">NSRunLoopCommonModes</span>];    <span class="hljs-keyword">self</span>.preSaleEndTime = (<span class="hljs-built_in">NSUInteger</span>)([<span class="hljs-built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="hljs-number">0</span>].timeIntervalSince1970 * <span class="hljs-number">1000</span>) + <span class="hljs-number">3</span> * <span class="hljs-number">86400</span> * <span class="hljs-number">1000</span>;&#125;- (<span class="hljs-keyword">void</span>)onDisplayLink:(<span class="hljs-built_in">CADisplayLink</span> *)displayLink &#123;    <span class="hljs-comment">// 当前时间距离 3 日后，倒计时</span>    <span class="hljs-built_in">NSInteger</span> curTime = (<span class="hljs-built_in">NSUInteger</span>)([<span class="hljs-built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="hljs-number">0</span>].timeIntervalSince1970 * <span class="hljs-number">1000</span>);    <span class="hljs-keyword">if</span> (curTime &lt; <span class="hljs-keyword">self</span>.preSaleEndTime) &#123;        <span class="hljs-built_in">NSUInteger</span> delta = <span class="hljs-keyword">self</span>.preSaleEndTime - curTime;        <span class="hljs-built_in">NSUInteger</span> milliSecond = (delta % <span class="hljs-number">1000</span>)/<span class="hljs-number">100</span>;                <span class="hljs-comment">//天</span>        <span class="hljs-built_in">NSUInteger</span> day = delta/ <span class="hljs-number">1000</span>/ <span class="hljs-number">86400</span>;        <span class="hljs-comment">//小时</span>        <span class="hljs-built_in">NSUInteger</span> hour = ((delta/ <span class="hljs-number">1000</span>) % <span class="hljs-number">86400</span>)/ <span class="hljs-number">3600</span>;        delta = delta/<span class="hljs-number">1000</span> % <span class="hljs-number">86400</span>;        <span class="hljs-comment">// 分钟</span>        <span class="hljs-built_in">NSUInteger</span> minute = (delta % <span class="hljs-number">3600</span>)/<span class="hljs-number">60</span>;        <span class="hljs-built_in">NSUInteger</span> second = delta % <span class="hljs-number">60</span>;                <span class="hljs-built_in">NSString</span> *dayStr;        <span class="hljs-keyword">if</span> (day &gt; <span class="hljs-number">0</span>) &#123;            dayStr = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%lu日&quot;</span>,day];        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hour &gt; <span class="hljs-number">0</span>) &#123;            dayStr = <span class="hljs-string">@&quot;&quot;</span>;        &#125;                <span class="hljs-built_in">NSString</span> *hourStr = <span class="hljs-string">@&quot;00&quot;</span>;        <span class="hljs-keyword">if</span> (hour &gt; <span class="hljs-number">9</span>) &#123;            hourStr = @(hour).stringValue;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hour &gt; <span class="hljs-number">0</span>) &#123;            hourStr = [<span class="hljs-string">@&quot;0&quot;</span> stringByAppendingString:@(hour).stringValue];        &#125;                <span class="hljs-built_in">NSString</span> *minuteStr = <span class="hljs-string">@&quot;00&quot;</span>;        <span class="hljs-keyword">if</span> (minute &gt; <span class="hljs-number">9</span>) &#123;            minuteStr = @(minute).stringValue;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (minute &gt; <span class="hljs-number">0</span>) &#123;            minuteStr = [<span class="hljs-string">@&quot;0&quot;</span> stringByAppendingString:@(minute).stringValue];        &#125;                <span class="hljs-built_in">NSString</span> *secondStr = <span class="hljs-string">@&quot;00&quot;</span>;        <span class="hljs-keyword">if</span> (second &gt; <span class="hljs-number">9</span>) &#123;            secondStr = @(second).stringValue;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (second &gt; <span class="hljs-number">0</span>) &#123;            secondStr = [<span class="hljs-string">@&quot;0&quot;</span> stringByAppendingString:@(second).stringValue];        &#125;                <span class="hljs-built_in">NSString</span> *milliSecondStr = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@&quot;</span>,@(milliSecond).stringValue];        <span class="hljs-built_in">NSString</span> *text = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@ %@:%@:%@.%@&quot;</span>, dayStr, hourStr, minuteStr, secondStr,milliSecondStr];        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;===&gt;%@&quot;</span>,text);    &#125;&#125;- (<span class="hljs-keyword">void</span>)onDisplayLinkTime:(<span class="hljs-built_in">CADisplayLink</span> *)displayLink &#123;    <span class="hljs-comment">// 当前时间</span>    <span class="hljs-built_in">NSInteger</span> curTime = (<span class="hljs-built_in">NSUInteger</span>)([<span class="hljs-built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="hljs-number">0</span>].timeIntervalSince1970 * <span class="hljs-number">1000</span>);    <span class="hljs-keyword">if</span> (curTime &lt; <span class="hljs-keyword">self</span>.preSaleEndTime) &#123;        <span class="hljs-built_in">NSUInteger</span> delta = curTime;        <span class="hljs-built_in">NSUInteger</span> milliSecond = (delta % <span class="hljs-number">1000</span>)/<span class="hljs-number">100</span>;        <span class="hljs-comment">//小时</span>        <span class="hljs-built_in">NSUInteger</span> hour = (delta/<span class="hljs-number">1000</span>/ <span class="hljs-number">3600</span> + <span class="hljs-number">8</span>) % <span class="hljs-number">24</span>; <span class="hljs-comment">// 东 8 区，所以 +8</span>        delta = delta/<span class="hljs-number">1000</span> % <span class="hljs-number">86400</span>;        <span class="hljs-comment">// 分钟</span>        <span class="hljs-built_in">NSUInteger</span> minute = (delta % <span class="hljs-number">3600</span>)/<span class="hljs-number">60</span>;        <span class="hljs-built_in">NSUInteger</span> second = delta % <span class="hljs-number">60</span>;               <span class="hljs-built_in">NSString</span> *hourStr = <span class="hljs-string">@&quot;00&quot;</span>;        <span class="hljs-keyword">if</span> (hour &gt; <span class="hljs-number">9</span>) &#123;            hourStr = @(hour).stringValue;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hour &gt; <span class="hljs-number">0</span>) &#123;            hourStr = [<span class="hljs-string">@&quot;0&quot;</span> stringByAppendingString:@(hour).stringValue];        &#125;                <span class="hljs-built_in">NSString</span> *minuteStr = <span class="hljs-string">@&quot;00&quot;</span>;        <span class="hljs-keyword">if</span> (minute &gt; <span class="hljs-number">9</span>) &#123;            minuteStr = @(minute).stringValue;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (minute &gt; <span class="hljs-number">0</span>) &#123;            minuteStr = [<span class="hljs-string">@&quot;0&quot;</span> stringByAppendingString:@(minute).stringValue];        &#125;                <span class="hljs-built_in">NSString</span> *secondStr = <span class="hljs-string">@&quot;00&quot;</span>;        <span class="hljs-keyword">if</span> (second &gt; <span class="hljs-number">9</span>) &#123;            secondStr = @(second).stringValue;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (second &gt; <span class="hljs-number">0</span>) &#123;            secondStr = [<span class="hljs-string">@&quot;0&quot;</span> stringByAppendingString:@(second).stringValue];        &#125;                <span class="hljs-built_in">NSString</span> *milliSecondStr = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@&quot;</span>,@(milliSecond).stringValue];        <span class="hljs-built_in">NSString</span> *text = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@:%@:%@.%@&quot;</span>,hourStr, minuteStr, secondStr,milliSecondStr];        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;===&gt;%@&quot;</span>,text);    &#125;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactiveObjC 常用方法</title>
    <link href="/2022/05/03/ReactiveObjC%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/03/ReactiveObjC%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="ReactiveObjC-常用方法"><a href="#ReactiveObjC-常用方法" class="headerlink" title="ReactiveObjC 常用方法"></a>ReactiveObjC 常用方法</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li><code>RACSiganl</code> 信号（类）</li><li><code>RACSubscriber</code> 订阅者（协议）</li><li><code>RACDisposable</code> 用于取消订阅或者清理资源，当信号发送完成或者发送错误的时候，就会自动触发它。 当你不想监听某个信号时，可以通过它主动取消订阅信号。</li><li><code>RACSubject</code> 信号提供者，自己可以充当信号，又能发送信号。通常用来代替代理，有了它，就不必要定义代理了。<ul><li><code>RACReplaySubject</code> 重复提供信号类，RACSubject的子类。</li><li>RACReplaySubject可以先发送信号，在订阅信号，RACSubject就不可以。</li></ul></li></ul><h2 id="RACObserve"><a href="#RACObserve" class="headerlink" title="RACObserve"></a>RACObserve</h2><div class="hljs code-wrapper"><pre><code class="hljs hy">[RACObserve(<span class="hljs-name">self.userNameTextFiled</span>, tag) subscribeNext:^(<span class="hljs-name"><span class="hljs-builtin-name">id</span></span>  _Nullable x) &#123;    NSLog(@<span class="hljs-string">&quot;self.userNameTextFiled.tag = %lu&quot;</span>,self.userNameTextFiled.tag)<span class="hljs-comment">;</span>&#125;]<span class="hljs-comment">;</span></code></pre></div><h2 id="RACReplaySubject"><a href="#RACReplaySubject" class="headerlink" title="RACReplaySubject"></a>RACReplaySubject</h2><ul><li><code>RACReplaySubject</code> 重复提供信号类，`RACSubject 的子类。</li><li><code>RACReplaySubject</code> 可以先发送信号，在订阅信号，<code>RACSubject</code> 不可以。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs gml">RACReplaySubject *replaySubject = [RACReplaySubject subject];<span class="hljs-comment">// 2.发送信号</span>[replaySubject sendNext:@<span class="hljs-number">1</span>];[replaySubject sendNext:@<span class="hljs-number">2</span>];NSLog(@<span class="hljs-string">&quot;send over&quot;</span>);<span class="hljs-comment">// 3.订阅信号</span>[replaySubject subscribeNext:^(<span class="hljs-symbol">id</span> <span class="hljs-symbol">x</span>) &#123;    NSLog(@<span class="hljs-string">&quot;第一个订阅者接收到的数据%@&quot;</span>,<span class="hljs-symbol">x</span>);&#125;];<span class="hljs-comment">// 订阅信号</span>[replaySubject subscribeNext:^(<span class="hljs-symbol">id</span> <span class="hljs-symbol">x</span>) &#123;    NSLog(@<span class="hljs-string">&quot;第二个订阅者接收到的数据%@&quot;</span>,<span class="hljs-symbol">x</span>);&#125;];</code></pre></div><h2 id="RACMulticastConnection"><a href="#RACMulticastConnection" class="headerlink" title="RACMulticastConnection"></a>RACMulticastConnection</h2><ul><li>RACMulticastConnection 用于当一个信号被多个订阅时，为了避免创建信号时多次调用创建信号中的block造成多次发生数据，可以使用这个该类处理。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs objectivec">RACSignal *signal1 = [RACSignal createSignal:^RACDisposable *(<span class="hljs-keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;发送数据&quot;</span>); <span class="hljs-comment">//执行 2 次数，因为被订阅了 2 次数</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;&#125;];[signal1 subscribeNext:^(<span class="hljs-keyword">id</span> x) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;接收数据&quot;</span>);&#125;];[signal1 subscribeNext:^(<span class="hljs-keyword">id</span> x) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;接收数据&quot;</span>);&#125;];<span class="hljs-comment">// 会执行两遍 `NSLog(@&quot;发送数据&quot;);` 每次订阅都会发送一次请求</span><span class="hljs-comment">// RACMulticastConnection:解决重复请求问题</span>RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="hljs-keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;发送请求&quot;</span>);    [subscriber sendNext:<span class="hljs-string">@&quot;我是数据源&quot;</span>];    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;&#125;];<span class="hljs-comment">// 创建连接</span>RACMulticastConnection *connect = [signal publish];<span class="hljs-comment">// 订阅信号，</span><span class="hljs-comment">// 注意：订阅信号，但没有激活信号，只是保存订阅者到数组，必须通过连接,当调用连接，就会一次性调用所有订阅者的sendNext:</span>[connect.signal subscribeNext:^(<span class="hljs-keyword">id</span> x) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;订阅者一:%@&quot;</span>, x);&#125;];[connect.signal subscribeNext:^(<span class="hljs-keyword">id</span> x) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;订阅者二:%@&quot;</span>, x);&#125;];<span class="hljs-comment">// 连接,激活信号</span>[connect connect];</code></pre></div><h2 id="RAC宏绑定"><a href="#RAC宏绑定" class="headerlink" title="RAC宏绑定"></a>RAC宏绑定</h2><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//单向绑定,signal10中的next值将作用于view的背景色</span><span class="hljs-constructor">RAC(<span class="hljs-params">self</span>.<span class="hljs-params">view</span>,<span class="hljs-params">backgroundColor</span>)</span> = signal10;<span class="hljs-comment">//双向绑定,互相作用</span><span class="hljs-constructor">RACChannelTo(<span class="hljs-params">self</span>.<span class="hljs-params">lb_name</span>,<span class="hljs-params">text</span>)</span> = <span class="hljs-constructor">RACChannelTo(<span class="hljs-params">model</span>, <span class="hljs-params">name</span>)</span>;</code></pre></div><h2 id="冷热信号"><a href="#冷热信号" class="headerlink" title="冷热信号"></a>冷热信号</h2><ul><li>热信号是主动的，即使没有订阅事件，仍然会时刻推送；而冷信号是被动的，只有当你订阅的时候，它才会发送消息。</li></ul><h3 id="创建冷信号"><a href="#创建冷信号" class="headerlink" title="创建冷信号"></a>创建冷信号</h3><div class="hljs code-wrapper"><pre><code class="hljs prolog">#import &lt;<span class="hljs-symbol">ReactiveObjC</span>/<span class="hljs-symbol">ReactiveObjC</span>.h&gt;    <span class="hljs-symbol">RACSignal</span> *signal = [<span class="hljs-symbol">RACSignal</span> createSignal:^<span class="hljs-symbol">RACDisposable</span> * <span class="hljs-symbol">_Nullable</span>(id&lt;<span class="hljs-symbol">RACSubscriber</span>&gt;  <span class="hljs-symbol">_Nonnull</span> subscriber) &#123;        [subscriber sendNext:@<span class="hljs-number">1</span>];        [[<span class="hljs-symbol">RACScheduler</span> mainThreadScheduler] afterDelay:<span class="hljs-number">0.5</span> schedule:^&#123;                    [subscriber sendNext:@<span class="hljs-number">2</span>];        &#125;];        [[<span class="hljs-symbol">RACScheduler</span> mainThreadScheduler] afterDelay:<span class="hljs-number">2</span> schedule:^&#123;                    [subscriber sendNext:@<span class="hljs-number">3</span>];        &#125;];        return nil;    &#125;];    <span class="hljs-symbol">NSLog</span>(@<span class="hljs-string">&quot;====time01====&quot;</span>);    [[<span class="hljs-symbol">RACScheduler</span> mainThreadScheduler]afterDelay:<span class="hljs-number">5</span> schedule:^&#123;            [signal subscribeNext:^(id  <span class="hljs-symbol">_Nullable</span> x) &#123;                // time01 <span class="hljs-number">5</span>s 后执行                <span class="hljs-symbol">NSLog</span>(@<span class="hljs-string">&quot;singnal1接收到信号了%@&quot;</span>,x);            &#125;];    &#125;];    <span class="hljs-symbol">NSLog</span>(@<span class="hljs-string">&quot;====time02====&quot;</span>);    [[<span class="hljs-symbol">RACScheduler</span> mainThreadScheduler]afterDelay:<span class="hljs-number">10</span> schedule:^&#123;            [signal subscribeNext:^(id  <span class="hljs-symbol">_Nullable</span> x) &#123;                // time01 <span class="hljs-number">10</span>s 后执行                <span class="hljs-symbol">NSLog</span>(@<span class="hljs-string">&quot;singnal2接收到信号了%@&quot;</span>,x);            &#125;];    &#125;];</code></pre></div><h3 id="创建热信号"><a href="#创建热信号" class="headerlink" title="创建热信号"></a>创建热信号</h3><div class="hljs code-wrapper"><pre><code class="hljs sas">RACSubject <span class="hljs-comment">*subject = [RACSubject subject];</span>N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 发送1&quot;</span>);[subject sendNext:@1];N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 发送完成1&quot;</span>);N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;==== 01&quot;</span>);[[RACScheduler mainThreadScheduler]afterDelay:0.5 schedule:^&#123;    N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 发送2&quot;</span>);        [subject sendNext:@2];    N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 发送完成2&quot;</span>);&#125;];N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;==== 02&quot;</span>);[[RACScheduler mainThreadScheduler]afterDelay:2 schedule:^&#123;    N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 发送3&quot;</span>);        [subject sendNext:@3];    N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 发送完成3&quot;</span>);&#125;];N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;==== 03&quot;</span>);[[RACScheduler mainThreadScheduler]afterDelay:0.1 schedule:^&#123;    [subject subscribeNext:^(id  _Nullable <span class="hljs-meta">x</span>) &#123;        N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 001接收到了%@&quot;</span>,<span class="hljs-meta">x</span>);    &#125;];&#125;];N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;==== 04&quot;</span>);[[RACScheduler mainThreadScheduler]afterDelay:1 schedule:^&#123;    [subject subscribeNext:^(id  _Nullable <span class="hljs-meta">x</span>) &#123;        N<span class="hljs-meta">SLog(</span>@<span class="hljs-string">&quot;subject 002接收到了%@&quot;</span>,<span class="hljs-meta">x</span>);    &#125;];&#125;];</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject 发送<span class="hljs-number">1</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject 发送完成<span class="hljs-number">1</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] ==== <span class="hljs-number">01</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] ==== <span class="hljs-number">02</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] ==== <span class="hljs-number">03</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] ==== <span class="hljs-number">04</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject 发送<span class="hljs-number">2</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject <span class="hljs-number">001</span>接收到了<span class="hljs-number">2</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject 发送完成<span class="hljs-number">2</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject 发送<span class="hljs-number">3</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject <span class="hljs-number">001</span>接收到了<span class="hljs-number">3</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject <span class="hljs-number">002</span>接收到了<span class="hljs-number">3</span><span class="hljs-attribute">RACtestDemo</span>[<span class="hljs-number">51003</span>:<span class="hljs-number">2926156</span>] subject 发送完成<span class="hljs-number">3</span></code></pre></div><p><a href="https://www.cnblogs.com/soliloquy/p/7920551.html">参考</a><br><a href="https://www.jianshu.com/p/3db561083fef">代理、KVO、监听事件等参考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weakSelf 与 strongSelf</title>
    <link href="/2022/04/15/weakSelf%E4%B8%8EstrongSelf/"/>
    <url>/2022/04/15/weakSelf%E4%B8%8EstrongSelf/</url>
    
    <content type="html"><![CDATA[<h1 id="weakSelf-与-strongSelf"><a href="#weakSelf-与-strongSelf" class="headerlink" title="weakSelf 与 strongSelf"></a>weakSelf 与 strongSelf</h1><ul><li>避免循环引用的标准做法:weakSelf+strongSelf</li><li>调试方法：打印引用计数来看是否 block 会使引用计数 +1<ul><li><code>printf(&quot;retain count:%ld\n&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</code></li></ul></li></ul><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><p>block 里面套 block</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)setUpModel&#123;    XYModel *model = [XYModel new];       __<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakSelf = <span class="hljs-keyword">self</span>; <span class="hljs-comment">// 不写这个，引用计数会 +1</span>    model.dataChanged = ^(<span class="hljs-built_in">NSString</span> *title) &#123;        __<span class="hljs-keyword">strong</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) strongSelf = weakSelf;        strongSelf.titleLabel.text = title;                __<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakSelf2 = strongSelf; <span class="hljs-comment">// 不写这个，引用计数会 +1</span>        strongSelf.model.dataChanged = ^(<span class="hljs-built_in">NSString</span> *title2) &#123;            __<span class="hljs-keyword">strong</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) strongSelf2 = weakSelf2;            strongSelf2.titleLabel.text = title2;        &#125;;    &#125;;    <span class="hljs-keyword">self</span>.model = model;&#125;</code></pre></div><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><h3 id="weakSelf"><a href="#weakSelf" class="headerlink" title="weakSelf"></a>weakSelf</h3><ul><li>可以避免循环引用导致代码执行结束后，引用计数仍被 +1</li></ul><h3 id="strongSelf"><a href="#strongSelf" class="headerlink" title="strongSelf"></a>strongSelf</h3><ul><li>给 weakSelf 添加强引用，避免 weakSelf 被提前释放</li><li>weakSelf 在block 里在执行 doSomething 还存在，但在执行 doMorething 前，可能会被释放了，故为了保证 self 在 block 执行过程里一直存在，对他强引用 strongSelf</li></ul><h2 id="RAC-简便写法"><a href="#RAC-简便写法" class="headerlink" title="RAC 简便写法"></a>RAC 简便写法</h2><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-operator">-</span> (void)setUpModel&#123;    <span class="hljs-type">XYModel</span> <span class="hljs-operator">*</span>model <span class="hljs-operator">=</span> [<span class="hljs-type">XYModel</span> new];    <span class="hljs-meta">@weakify</span>(<span class="hljs-keyword">self</span>) <span class="hljs-comment">// 不写这个，引用计数会 +1</span>    model.dataChanged <span class="hljs-operator">=</span> <span class="hljs-operator">^</span>(<span class="hljs-type">NSString</span> <span class="hljs-operator">*</span>title) &#123;        <span class="hljs-meta">@strongify</span>(<span class="hljs-keyword">self</span>)        strongSelf.titleLabel.text <span class="hljs-operator">=</span> title;                <span class="hljs-meta">@weakify</span>(<span class="hljs-keyword">self</span>) <span class="hljs-comment">// 不写这个，引用计数会 +1</span>        strongSelf.model.dataChanged <span class="hljs-operator">=</span> <span class="hljs-operator">^</span>(<span class="hljs-type">NSString</span> <span class="hljs-operator">*</span>title2) &#123;            <span class="hljs-meta">@strongify</span>(<span class="hljs-keyword">self</span>)            strongSelf2.titleLabel.text <span class="hljs-operator">=</span> title2;        &#125;;    &#125;;    <span class="hljs-keyword">self</span>.model <span class="hljs-operator">=</span> model;&#125;</code></pre></div><p><a href="https://www.jianshu.com/p/9e2c36482cc2">进阶 @weakify(self) @strongify(self) 链接</a><br><a href="https://blog.csdn.net/u010029439/article/details/112465436?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%257Edefault%257ECTRLIST%257Edefault-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%257Edefault%257ECTRLIST%257Edefault-1.pc_relevant_default&utm_relevant_index=2">参考链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>APP 各种状态时发通知调用函数</title>
    <link href="/2022/03/18/APP%E5%90%84%E7%A7%8D%E7%8A%B6%E6%80%81%E6%97%B6%E5%8F%91%E9%80%9A%E7%9F%A5%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2022/03/18/APP%E5%90%84%E7%A7%8D%E7%8A%B6%E6%80%81%E6%97%B6%E5%8F%91%E9%80%9A%E7%9F%A5%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="APP-各种状态时发通知调用函数"><a href="#APP-各种状态时发通知调用函数" class="headerlink" title="APP 各种状态时发通知调用函数"></a>APP 各种状态时发通知调用函数</h1><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><div class="hljs code-wrapper"><pre><code class="hljs css">// 检测<span class="hljs-selector-tag">app</span>从后台进入前台会的观察者<span class="hljs-selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="hljs-selector-tag">addObserver</span><span class="hljs-selector-pseudo">:self</span> <span class="hljs-selector-tag">selector</span>:<span class="hljs-keyword">@selector</span>(applicationBecomeActive) <span class="hljs-attribute">name:</span>UIApplicationWillEnterForegroundNotification <span class="hljs-attribute">object:</span>nil];// 添加检测<span class="hljs-selector-tag">app</span>进入后台的观察者<span class="hljs-selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="hljs-selector-tag">addObserver</span><span class="hljs-selector-pseudo">:self</span> <span class="hljs-selector-tag">selector</span>:<span class="hljs-keyword">@selector</span>(applicationEnterBackground) <span class="hljs-attribute">name:</span> UIApplicationDidEnterBackgroundNotification <span class="hljs-attribute">object:</span>nil];</code></pre></div><h2 id="iOS中的程序的五种状态"><a href="#iOS中的程序的五种状态" class="headerlink" title="iOS中的程序的五种状态"></a>iOS中的程序的五种状态</h2><h3 id="程序的五种状态"><a href="#程序的五种状态" class="headerlink" title="程序的五种状态"></a>程序的五种状态</h3><p>Not Running：未运行。<br>Inactive：前台非活动状态。处于前台，但是不能接受事件处理。<br>Active：前台活动状态。处于前台，能接受事件处理。<br>Background：后台状态。进入后台，如果又可执行代码，会执行代码，代码执行完毕，程序进行挂起。<br>Suspended：挂起状态。进入后台，不能执行代码，如果内存不足，程序会被杀死。</p><h3 id="AppDelegate中的回调方法和通知"><a href="#AppDelegate中的回调方法和通知" class="headerlink" title="AppDelegate中的回调方法和通知"></a>AppDelegate中的回调方法和通知</h3><p>（1）回调方法：application:didFinishLaunchingWithOptions:<br>      本地通知：UIApplicationDidFinishLaunchingNotification<br>      触发时机：程序启动并进行初始化的时候后。<br>      适宜操作：这个阶段应该进行根视图的创建。<br>（2）回调方法：applicationDidBecomeActive：<br>      本地通知：UIApplicationDidBecomeActiveNotification<br>      触发时机：程序进入前台并处于活动状态时调用。<br>      适宜操作：这个阶段应该恢复UI状态（例如游戏状态）。<br>（3）回调方法：applicationWillResignActive:<br>      本地通知：UIApplicationWillResignActiveNotification<br>      触发时机：从活动状态进入非活动状态。<br>      适宜操作：这个阶段应该保存UI状态（例如游戏状态）。<br>（4）回调方法：applicationDidEnterBackground:<br>      本地通知：UIApplicationDidEnterBackgroundNotification<br>      触发时机：程序进入后台时调用。<br>      适宜操作：这个阶段应该保存用户数据，释放一些资源（例如释放数据库资源）。<br>（5）回调方法：applicationWillEnterForeground：<br>      本地通知：UIApplicationWillEnterForegroundNotification<br>      触发时机：程序进入前台，但是还没有处于活动状态时调用。<br>      适宜操作：这个阶段应该恢复用户数据。<br>（6）回调方法：applicationWillTerminate:<br>      本地通知：UIApplicationWillTerminateNotification<br>      触发时机：程序被杀死时调用。<br>      适宜操作：这个阶段应该进行释放一些资源和保存用户数据。</p><h3 id="程序启动"><a href="#程序启动" class="headerlink" title="程序启动"></a>程序启动</h3><p>点击应用图标时，会经历三个状态：<br>Not running–&gt;Inactive–&gt;Active </p><p>Not running –&gt; Inactive<br>调用 application:didFinishLaunchingWithOptions: 发送：UIApplicationDidFinishLaunchingNotification<br>Inactive–&gt;Active  </p><p>调用 applicationDidBecomeActive： 发送：UIApplicationDidBecomeActiveNotification </p><h3 id="程序Home"><a href="#程序Home" class="headerlink" title="程序Home"></a>程序Home</h3><p>根据info.plist中Application does not run in background  /   UIApplicationExitsOnSuspend控制似乎否可以在后台运行或挂起。<br>如果可以在后台运行或者挂起会经历<br>Active–&gt;Inactive–&gt;Background–&gt;Suspended </p><p>Active–&gt;Inactive<br>调用 applicationWillResignActive： 发送：UIApplicationWillResignActiveNotification<br>Background–&gt;Suspended<br>调用 applicationDidEnterBackground： 发送：UIApplicationDidEnterBackgroundNotification </p><p>如果不可以后台运行或挂起会经历<br> Active–&gt;Inactive–&gt;Background–&gt;Suspended–&gt;Not Running</p><p>Background–&gt;Suspended<br>调用 applicationDidEnterBackground： 发送：UIApplicationDidEnterBackgroundNotification<br>Suspended–&gt;Not Running<br>调用 applicationWillTerminate： 发送：UIApplicationWillTerminateNotification</p><h3 id="挂起后，重新运行"><a href="#挂起后，重新运行" class="headerlink" title="挂起后，重新运行"></a>挂起后，重新运行</h3><p>Suspended–&gt;Background–&gt;Inactive–&gt;Active</p><p> Background–&gt;Inactive<br> 调用 applicationWillEnterForeground： 发送：UIApplicationWillEnterForegroundNotification<br> Inactive–&gt;Active<br>调用 applicationDidBecomeActive： 发送：UIApplicationDidBecomeActiveNotification </p><h3 id="内存不足，杀死程序"><a href="#内存不足，杀死程序" class="headerlink" title="内存不足，杀死程序"></a>内存不足，杀死程序</h3><p>Background–&gt;Suspended–&gt;Not running<br>这种情况不会调用任何方法，也不会发送任何通知。</p><p><a href="https://www.cnblogs.com/pangbin/p/5412784.html">参考链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种延时操作</title>
    <link href="/2022/03/02/%E5%90%84%E7%A7%8D%E5%BB%B6%E6%97%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/03/02/%E5%90%84%E7%A7%8D%E5%BB%B6%E6%97%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="各种延时操作"><a href="#各种延时操作" class="headerlink" title="各种延时操作"></a>各种延时操作</h1><h2 id="延时执行方法（可以取消执行）"><a href="#延时执行方法（可以取消执行）" class="headerlink" title="延时执行方法（可以取消执行）"></a>延时执行方法（可以取消执行）</h2><div class="hljs code-wrapper"><pre><code class="hljs pgsql">// <span class="hljs-number">5</span>s后执行某方法NSString *toDoStr = @&quot;play&quot;;NSString *toDoStr2 = @&quot;play02&quot;;// 如果已经 <span class="hljs-keyword">perform</span> 但还没执行，取消上次 <span class="hljs-keyword">perform</span>，并重新计时[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(toDoMethod:) <span class="hljs-keyword">object</span>:toDoStr]; [self performSelector:@selector(toDoMethod:) withObject:toDoStr afterDelay:<span class="hljs-number">5</span>]; // <span class="hljs-number">5</span>s 后使用 toDoStr 调用 toDoMethod 方法// 如果已经 <span class="hljs-keyword">perform</span> 但还没执行，取消上次 <span class="hljs-keyword">perform</span>，使用 toDoStr2 调用，并重新计时[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(toDoMethod:) <span class="hljs-keyword">object</span>:toDoStr]; // 若使用 toDoStr 调用 toDoMethod 方法还没执行（还在<span class="hljs-number">5</span>s内）则取消执行[self performSelector:@selector(toDoMethod:) withObject:toDoStr2 afterDelay:<span class="hljs-number">5</span>]; // <span class="hljs-number">5</span>s 后使用 toDoStr2 调用 toDoMethod 方法</code></pre></div><h2 id="执行动画，延时执行，执行一定时间后延时取消"><a href="#执行动画，延时执行，执行一定时间后延时取消" class="headerlink" title="执行动画，延时执行，执行一定时间后延时取消"></a>执行动画，延时执行，执行一定时间后延时取消</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-comment">// delay:3, 3s 后执行动画</span><span class="hljs-comment">// UIViewAnimationOptionAutoreverse 动画运行到结束点后仍然以动画方式回到初始点</span><span class="hljs-comment">// [UIView setAnimationRepeatCount:10]; 重复10次</span><span class="hljs-comment">// animateWithDuration:0.5 每次动画执行 0.5s （共执行 0.5 * 10 s 后，执行completion）</span><span class="hljs-comment">//</span><span class="hljs-built_in">UIImageView</span> *show = [[<span class="hljs-built_in">UIImageView</span> alloc] initWithImage:[<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;showPic&quot;</span>]];[<span class="hljs-keyword">self</span>.contentView addSubview:show];<span class="hljs-keyword">self</span>.show = show;show.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">90</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);[<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span>                      delay:<span class="hljs-number">3</span>                    options:<span class="hljs-built_in">UIViewAnimationOptionAutoreverse</span> animations:^&#123;    [<span class="hljs-built_in">UIView</span> setAnimationRepeatCount:<span class="hljs-number">10</span>];    show.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);&#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;    [show removeFromSuperview];    <span class="hljs-keyword">self</span>.show = <span class="hljs-literal">nil</span>;&#125;];</code></pre></div><h2 id="dispatch方法"><a href="#dispatch方法" class="headerlink" title="dispatch方法"></a>dispatch方法</h2><div class="hljs code-wrapper"><pre><code class="hljs reasonml">dispatch<span class="hljs-constructor">_after(<span class="hljs-params">dispatch_time</span>(DISPATCH_TIME_NOW, 2<span class="hljs-operator">*</span>NSEC_PER_SEC)</span>, dispatch<span class="hljs-constructor">_get_main_queue()</span>, ^&#123;    <span class="hljs-comment">// do something in main queue</span>&#125;);<span class="hljs-comment">//在主线程延迟执行  </span> dispatch<span class="hljs-constructor">_after(<span class="hljs-params">dispatch_time</span>(DISPATCH_TIME_NOW, (<span class="hljs-params">int64_t</span>)</span>(<span class="hljs-number">3</span><span class="hljs-operator"> * </span>NSEC_PER_SEC)), dispatch<span class="hljs-constructor">_get_main_queue()</span>, ^&#123;   <span class="hljs-literal">[<span class="hljs-identifier">self</span> <span class="hljs-identifier">delayDo</span>:@&quot;GCD&quot;]</span>;   &#125;);   <span class="hljs-comment">//在子线程延迟执行</span>   dispatch<span class="hljs-constructor">_after(<span class="hljs-params">dispatch_time</span>(DISPATCH_TIME_NOW, (<span class="hljs-params">int64_t</span>)</span>(<span class="hljs-number">5</span><span class="hljs-operator"> * </span>NSEC_PER_SEC)), dispatch<span class="hljs-constructor">_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)</span>, ^&#123;   <span class="hljs-literal">[<span class="hljs-identifier">self</span> <span class="hljs-identifier">delayDo</span>:@&quot;G<span class="hljs-identifier">lobal</span>-GCD&quot;]</span>;   &#125;);</code></pre></div><h2 id="NSTimer-方法"><a href="#NSTimer-方法" class="headerlink" title="NSTimer 方法"></a>NSTimer 方法</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSDate</span> *scheduledTime = [<span class="hljs-built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="hljs-number">10.0</span>]; <span class="hljs-comment">//设置开始执行的时间为：从现在开始计时，10s后</span><span class="hljs-built_in">NSString</span> *customUserObject = <span class="hljs-string">@&quot;To demo userInfo&quot;</span>;<span class="hljs-built_in">NSTimer</span> *timer = [[<span class="hljs-built_in">NSTimer</span> alloc] initWithFireDate:scheduledTime                                          interval:<span class="hljs-number">2</span>                                            target:<span class="hljs-keyword">self</span>                                          selector:<span class="hljs-keyword">@selector</span>(task:)                                          userInfo:customUserObject                                           repeats:<span class="hljs-literal">YES</span>];<span class="hljs-built_in">NSRunLoop</span> *runLoop = [<span class="hljs-built_in">NSRunLoop</span> currentRunLoop];[runLoop addTimer:timer forMode:<span class="hljs-built_in">NSDefaultRunLoopMode</span>];- (<span class="hljs-keyword">void</span>)task:(<span class="hljs-keyword">id</span>)sender&#123;    <span class="hljs-built_in">NSTimer</span> *localTimer = (<span class="hljs-built_in">NSTimer</span> *)sender;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Schedule task has executed with this user info: %@&quot;</span>, [localTimer userInfo]);&#125;</code></pre></div><p><a href="https://m.yisu.com/zixun/198074.html">参考链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过类名调用被分类覆盖的原方法</title>
    <link href="/2022/01/17/%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E8%B0%83%E7%94%A8%E8%A2%AB%E5%88%86%E7%B1%BB%E8%A6%86%E7%9B%96%E7%9A%84%E5%8E%9F%E6%96%B9%E6%B3%95/"/>
    <url>/2022/01/17/%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E8%B0%83%E7%94%A8%E8%A2%AB%E5%88%86%E7%B1%BB%E8%A6%86%E7%9B%96%E7%9A%84%E5%8E%9F%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="通过类名调用被分类覆盖的原方法"><a href="#通过类名调用被分类覆盖的原方法" class="headerlink" title="通过类名调用被分类覆盖的原方法"></a>通过类名调用被分类覆盖的原方法</h1><p>在分类中重写方法后，会将原方法进行覆盖。若想继续执行原方法则可通过方法列表和方法指针找到原方法</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    Class currentClass = [TestClass <span class="hljs-keyword">class</span>];    TestClass *my = [[TestClass alloc] init];    [my printName];    <span class="hljs-keyword">if</span> (currentClass) &#123;        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> methodCount;        Method *methodList = class_copyMethodList(currentClass, &amp;methodCount);        IMP lastImp = <span class="hljs-literal">NULL</span>;        SEL lastSel = <span class="hljs-literal">NULL</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSInteger</span> i = <span class="hljs-number">0</span>; i &lt; methodCount; i++) &#123;            Method method = methodList[i];            <span class="hljs-built_in">NSString</span> *methodName = [<span class="hljs-built_in">NSString</span> stringWithCString:sel_getName(method_getName(method))                                            encoding:<span class="hljs-built_in">NSUTF8StringEncoding</span>];            <span class="hljs-keyword">if</span> ([<span class="hljs-string">@&quot;printName&quot;</span> isEqualToString:methodName]) &#123;                lastImp = method_getImplementation(method);                lastSel = method_getName(method);                <span class="hljs-comment">// 按照方法列表遍历（分类的方法在原方法的前面），如果第一次拿到的printName就break出去，则获取的是分类的方法。如果继续遍历，则拿到的最后一个就是类本身的原方法。</span>                <span class="hljs-comment">// break;</span>            &#125; <span class="hljs-comment">//lastSel 是原方法的编码</span>        &#125;        <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (*fn)(<span class="hljs-keyword">id</span>,SEL);        <span class="hljs-keyword">if</span> (lastImp != <span class="hljs-literal">NULL</span>) &#123;            fn f = (fn)lastImp;            f(my, lastSel); <span class="hljs-comment">// 执行方法</span>        &#125;        free(methodList);           &#125;&#125;</code></pre></div><h2 id="TestClass-h"><a href="#TestClass-h" class="headerlink" title="TestClass.h"></a>TestClass.h</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">TestClass</span> : <span class="hljs-title">NSObject</span></span>- (<span class="hljs-keyword">void</span>)printName;<span class="hljs-keyword">@end</span><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span></code></pre></div><h2 id="TestClass-m"><a href="#TestClass-m" class="headerlink" title="TestClass.m"></a>TestClass.m</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;TestClass.h&quot;</span></span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">TestClass</span></span>- (<span class="hljs-keyword">void</span>)printName&#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;printName%s==TestClass&quot;</span>,__func__);&#125;<span class="hljs-keyword">@end</span></code></pre></div><h2 id="TestClass-addNewMethod-h"><a href="#TestClass-addNewMethod-h" class="headerlink" title="TestClass+addNewMethod.h"></a>TestClass+addNewMethod.h</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;TestClass.h&quot;</span></span><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">TestClass</span> (<span class="hljs-title">addNewMethod</span>)</span>- (<span class="hljs-keyword">void</span>)printName;<span class="hljs-keyword">@end</span><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span></code></pre></div><h3 id="TestClass-addNewMethod-m"><a href="#TestClass-addNewMethod-m" class="headerlink" title="TestClass+addNewMethod.m"></a>TestClass+addNewMethod.m</h3><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;TestClass+addNewMethod.h&quot;</span></span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">TestClass</span> (<span class="hljs-title">addNewMethod</span>)</span>- (<span class="hljs-keyword">void</span>)printName&#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;printName%s==addNewMethod&quot;</span>,__func__);&#125;<span class="hljs-keyword">@end</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WCDB的基本使用</title>
    <link href="/2022/01/09/WCDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/01/09/WCDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="WCDB的基本使用"><a href="#WCDB的基本使用" class="headerlink" title="WCDB的基本使用"></a>WCDB的基本使用</h1><p>WCDB是微信移动端团队开源的移动端数据库组件<br><a href="https://github.com/Tencent/wcdb">https://github.com/Tencent/wcdb</a></p><p><code>pod &#39;WCDB&#39;</code></p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> ()</span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>)Message *BLMsg;<span class="hljs-keyword">@end</span>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    <span class="hljs-keyword">self</span>.BLMsg = [[Message alloc]init];    <span class="hljs-built_in">NSObject</span> *obj = [[<span class="hljs-built_in">NSObject</span> alloc] init];    <span class="hljs-comment">//</span>    <span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), ^&#123;    <span class="hljs-comment">//</span>        <span class="hljs-keyword">@synchronized</span> (obj) &#123;            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;线程同步的操作1 开始&quot;</span>);            sleep(<span class="hljs-number">3</span>);            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;线程同步的操作1 结束&quot;</span>);        &#125;    &#125;);    <span class="hljs-comment">//</span>    <span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), ^&#123;        sleep(<span class="hljs-number">1</span>);        <span class="hljs-keyword">@synchronized</span> (obj) &#123;            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;线程同步的操作2&quot;</span>);        &#125;    &#125;);&#125;</code></pre></div><h2 id="BLMessage-h"><a href="#BLMessage-h" class="headerlink" title="BLMessage.h"></a>BLMessage.h</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">BLMessage</span> : <span class="hljs-title">NSObject</span></span><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *name;<span class="hljs-keyword">@property</span>(<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">NSInteger</span> localID;<span class="hljs-keyword">@property</span>(<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-keyword">float</span> totalScore;<span class="hljs-keyword">@property</span>(<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSDate</span> *createDate;- (<span class="hljs-keyword">void</span>)quickTest;<span class="hljs-keyword">@end</span><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span></code></pre></div><h2 id="BLMessage-m"><a href="#BLMessage-m" class="headerlink" title="BLMessage.m"></a>BLMessage.m</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;BLMessage+WCTTableCoding.h&quot;</span></span><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;BLMessage.h&quot;</span></span><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;WCDB/WCDB.h&gt;</span></span><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">BLMessage</span> ()</span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSString</span> *baseDirectoty;<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) WCTDatabase *database;<span class="hljs-keyword">@end</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BL_TABLE_MESSAGE_NAME @<span class="hljs-meta-string">&quot;TableMsgName&quot;</span></span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">BLMessage</span></span>WCDB_IMPLEMENTATION(BLMessage)<span class="hljs-comment">//WCDB_SYNTHESIZE，用于在类文件中定义绑定到数据库表的字段</span>WCDB_SYNTHESIZE(BLMessage, name)WCDB_SYNTHESIZE(BLMessage, localID)<span class="hljs-comment">//默认使用属性名作为数据库表的字段名。对于属性名与字段名不同的情况，可以使用WCDB_SYNTHESIZE_COLUMN(className, propertyName, columnName)进行映射。</span>WCDB_SYNTHESIZE_COLUMN(BLMessage, totalScore, <span class="hljs-string">&quot;db_totalScore&quot;</span>)WCDB_SYNTHESIZE_DEFAULT(BLMessage, createDate, WCTDefaultTypeCurrentDate) <span class="hljs-comment">//设置一个默认值</span><span class="hljs-comment">//主键</span>WCDB_PRIMARY_ASC_AUTO_INCREMENT(BLMessage, localID)<span class="hljs-comment">//用于定义非空约束</span>WCDB_NOT_NULL(BLMessage, name)- (<span class="hljs-keyword">void</span>)quickTest &#123;    <span class="hljs-comment">//获取沙盒根目录</span>&#125;    <span class="hljs-comment">// 创建数据库和表</span>- (<span class="hljs-built_in">BOOL</span>)creatDatabaseAndTable &#123;    <span class="hljs-comment">//数据库路径</span>    <span class="hljs-built_in">NSArray</span> *paths = <span class="hljs-built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="hljs-built_in">NSDocumentDirectory</span>, <span class="hljs-built_in">NSUserDomainMask</span>, <span class="hljs-literal">YES</span>);    <span class="hljs-keyword">self</span>.baseDirectoty = [paths objectAtIndex:<span class="hljs-number">0</span>];    <span class="hljs-built_in">NSString</span> *path = [<span class="hljs-keyword">self</span>.baseDirectoty stringByAppendingPathComponent:<span class="hljs-string">@&quot;SampleDB&quot;</span>];    <span class="hljs-comment">//NSLog(@&quot;path--&gt; %@&quot;,path);</span>    <span class="hljs-comment">//创建数据库 路径一样,  该接口使用的是IF NOT EXISTS的SQL，因此可以用重复调用</span>    WCTDatabase *database = [[WCTDatabase alloc] initWithPath:path];    _database = database;    <span class="hljs-keyword">if</span> ([database canOpen]) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;创建数据库成功&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;创建数据库失败&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;    &#125;        <span class="hljs-comment">//创建表  注：该接口使用的是IF NOT EXISTS的SQL，因此可以用重复调用。不需要在每次调用前判断表或索引是否已经存在。</span>    <span class="hljs-built_in">BOOL</span> result = [database createTableAndIndexesOfName:BL_TABLE_MESSAGE_NAME withClass:BLMessage.class];    <span class="hljs-keyword">if</span> (!result) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;创建表失败&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;&#125;<span class="hljs-comment">// 插入单个数据</span>- (<span class="hljs-built_in">BOOL</span>)insertData:(BLMessage *)message &#123;    <span class="hljs-built_in">BOOL</span> result = [_database insertObject:message into:BL_TABLE_MESSAGE_NAME];        <span class="hljs-comment">//关闭数据库,_database如果能自己释放的话,会自动关闭,就不用手动调用关闭了</span>    [_database close];    <span class="hljs-keyword">if</span> (!result) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;插入失败&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;插入成功&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;    &#125;&#125;- (<span class="hljs-built_in">BOOL</span>)insertDatas:(BLMessage *)message &#123;    <span class="hljs-comment">//插入多个数据:</span>    <span class="hljs-built_in">BOOL</span> result = [<span class="hljs-keyword">self</span>.database insertObject:message into:BL_TABLE_MESSAGE_NAME];    <span class="hljs-comment">//增删改查用下面方法,可以链式调用</span><span class="hljs-comment">/*</span><span class="hljs-comment">    WCTInsert</span><span class="hljs-comment">     WCTDelete</span><span class="hljs-comment">     WCTUpdate</span><span class="hljs-comment">     WCTSelect</span><span class="hljs-comment"> */</span>     WCTInsert *insert = [_database prepareInsertObjectsOfClass:BLMessage.class                                                              into:BL_TABLE_MESSAGE_NAME];<span class="hljs-comment">//    BOOL result = [insert executeWithObjects:objects];/</span>    <span class="hljs-keyword">if</span> (!result) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;插入失败&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;插入成功&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;    &#125;&#125;<span class="hljs-comment">// 查询数据  用localID排序</span>- (<span class="hljs-keyword">void</span>)selectOrder &#123;    <span class="hljs-built_in">NSArray</span>&lt;BLMessage *&gt; *objects2 = [_database getObjectsOfClass:BLMessage.class fromTable:BL_TABLE_MESSAGE_NAME orderBy:BLMessage.localID.order()];    [objects2 enumerateObjectsUsingBlock:^(BLMessage *obj, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;用localID排序 --&gt; %@ &quot;</span>,obj);    &#125;];&#125;<span class="hljs-comment">//查询数据  指定范围</span>- (<span class="hljs-keyword">void</span>)selectCertainRange &#123;    <span class="hljs-built_in">NSArray</span>&lt;BLMessage *&gt; *objects3 = [_database getObjectsOfClass:BLMessage.class fromTable:BL_TABLE_MESSAGE_NAME where:BLMessage.localID.between(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) || BLMessage.name.like(<span class="hljs-string">@&quot;lil%&quot;</span>)];    [objects3 enumerateObjectsUsingBlock:^(BLMessage *obj, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;objects3 --&gt; %@ &quot;</span>,obj);    &#125;];&#125;<span class="hljs-comment">//定向 将查询的totalScore值赋给新创建的对象</span>- (<span class="hljs-keyword">void</span>)selectAndAssignment &#123;    BLMessage *message5 = [_database getOneObjectOnResults:BLMessage.totalScore.max().as(BLMessage.totalScore) fromTable:BL_TABLE_MESSAGE_NAME];    message5.localID = <span class="hljs-number">5</span>;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;message5 --&gt; %@ &quot;</span>,message5);&#125;<span class="hljs-comment">//链式调用</span>- (<span class="hljs-keyword">void</span>)selectChain &#123;    <span class="hljs-comment">//所有的对象</span>    WCTSelect *select = [_database prepareSelectObjectsOfClass:BLMessage.class fromTable:BL_TABLE_MESSAGE_NAME ];    <span class="hljs-comment">//链式查询</span>    <span class="hljs-built_in">NSArray</span>&lt;BLMessage *&gt; *objects6 = [[select where:BLMessage.totalScore &lt; <span class="hljs-number">90</span>] limit:<span class="hljs-number">2</span>].allObjects;    [objects6 enumerateObjectsUsingBlock:^(BLMessage *obj, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;objects6 --&gt; %@ &quot;</span>,obj);    &#125;];&#125;<span class="hljs-comment">//##### 更新</span>- (<span class="hljs-keyword">void</span>)updateData &#123;    WCTUpdate *update = [_database prepareUpdateTable:BL_TABLE_MESSAGE_NAME                                        onProperties:BLMessage.name];    BLMessage *object = [[BLMessage alloc] init];    object.name = <span class="hljs-string">@&quot;xiaoming22&quot;</span>;    <span class="hljs-built_in">BOOL</span> result = [update executeWithObject:object];    <span class="hljs-keyword">if</span> (!result) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Update by object Error %@&quot;</span>, update.error);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;更新成功&quot;</span>);    &#125;&#125;<span class="hljs-comment">//删除表</span>- (<span class="hljs-keyword">void</span>)deleteData &#123;    WCTDelete *deletion = [_database prepareDeleteFromTable:BL_TABLE_MESSAGE_NAME];    <span class="hljs-built_in">BOOL</span> result = [deletion execute];    <span class="hljs-keyword">if</span> (!result) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Delete Error %@&quot;</span>, deletion.error);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;删除成功&quot;</span>);    &#125;    [_database close];    <span class="hljs-comment">//删除name是xiaoming的人</span><span class="hljs-comment">//    BOOL result = [_database deleteObjectsFromTable:BL_TABLE_MESSAGE_NAME where:BLMessage.name == @&quot;xiaoming&quot;];</span><span class="hljs-comment">//    [_database deleteObjectsFromTable:BL_TABLE_MESSAGE_NAME where:BLMessage.localID.between(0,1) || BLMessage.name.like(@&quot;lil%&quot;)];</span>    &#125;<span class="hljs-keyword">@end</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>_cmd、objc_getAssociatedObject、objc_setAssociatedObject</title>
    <link href="/2021/12/25/objc_getAssociatedObject%E3%80%81objc_setAssociatedObject/"/>
    <url>/2021/12/25/objc_getAssociatedObject%E3%80%81objc_setAssociatedObject/</url>
    
    <content type="html"><![CDATA[<h1 id="cmd、objc-getAssociatedObject、objc-setAssociatedObject"><a href="#cmd、objc-getAssociatedObject、objc-setAssociatedObject" class="headerlink" title="_cmd、objc_getAssociatedObject、objc_setAssociatedObject"></a>_cmd、objc_getAssociatedObject、objc_setAssociatedObject</h1><h2 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h2><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>关联对象 objc_setAssociatedObject(self, @selector(btnAction:), block, OBJC_ASSOCIATION_RETAIN_NONATOMIC);<span class="hljs-regexp">//</span> self 关联的类，<span class="hljs-regexp">//</span>key：要保证全局唯一，key与关联的对象是一一对应关系。必须全局唯一。通常用@selector(methodName)作为key。<span class="hljs-regexp">//</span>value：要关联类的对象。<span class="hljs-regexp">//</span>policy：关联策略。有五种关联策略。<span class="hljs-regexp">//</span>OBJC_ASSOCIATION_ASSIGN 等价于 @property(assign)。<span class="hljs-regexp">//</span>OBJC_ASSOCIATION_RETAIN_NONATOMIC等价于 @property(strong, <span class="hljs-regexp">//</span>nonatomic)。<span class="hljs-regexp">//</span>OBJC_ASSOCIATION_COPY_NONATOMIC等价于@property(copy, nonatomic)。<span class="hljs-regexp">//</span>OBJC_ASSOCIATION_RETAIN等价于@property(strong,atomic)。<span class="hljs-regexp">//</span>OBJC_ASSOCIATION_COPY等价于@property(copy, atomic)。 btnBlock block= objc_getAssociatedObject(self, _cmd);<span class="hljs-regexp">//</span>获取关联对象的信息，_cmd 就是key</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">objc_<span class="hljs-keyword">set</span>AssociatedObject 相当于 <span class="hljs-keyword">set</span>Value<span class="hljs-function">:forKey</span> 进行关联value对象objc_getAssociatedObject 用来读取对象objc_AssociationPolicy  属性 是设定该value在object内的属性，即 assgin, <span class="hljs-params">(retain,nonatomic)</span><span class="hljs-string">...</span>等 objc_removeAssociatedObjects 函数来移除一个关联对象，或者使用objc_<span class="hljs-keyword">set</span>AssociatedObject函数将key指定的关联对象设置为nil。</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs reasonml">- (void)someCategoryMethod&#123;    NSString *extendVar = objc<span class="hljs-constructor">_getAssociatedObject(<span class="hljs-params">self</span>, <span class="hljs-params">_cmd</span>)</span>;    <span class="hljs-keyword">if</span>(!extendVar)&#123;        extendVar = @<span class="hljs-string">&quot;someText&quot;</span>;        objc<span class="hljs-constructor">_setAssociatedObject(<span class="hljs-params">self</span>, <span class="hljs-params">_cmd</span>, <span class="hljs-params">extendVar</span>, OBJC_ASSOCIATION_COPY_NONATOMIC)</span>;    &#125;&#125;</code></pre></div><p>关联方法</p><ul><li>_cmd 在 Objective-C的方法中表示当前方法的selector，正如同self表示当前方法调用的对象实例。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">-</span> (CustomNavigationControllerDelegate *)<span class="hljs-selector-tag">customDelegate</span>&#123;    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">objc_getAssociatedObject</span>(self, _cmd);&#125;<span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">setCustomDelegate</span><span class="hljs-selector-pseudo">:(CustomNavigationControllerDelegate</span> *)<span class="hljs-selector-tag">customDelegate</span>&#123;    <span class="hljs-selector-tag">objc_setAssociatedObject</span>(self, <span class="hljs-variable">@selector</span>(customDelegate), customDelegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125;</code></pre></div><ul><li>objc_getAssociatedObject、objc_setAssociatedObject 还可以给分类添加属性，手动写 getter 和 setter 方法。</li></ul><p>参考：<br><a href="https://blog.csdn.net/songbai1211/article/details/101393934">https://blog.csdn.net/songbai1211/article/details/101393934</a><br><a href="https://www.jianshu.com/p/fdb1bc445266">https://www.jianshu.com/p/fdb1bc445266</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSInvocation 基本用法</title>
    <link href="/2021/12/05/NSInvocation%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <url>/2021/12/05/NSInvocation%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="NSInvocation"><a href="#NSInvocation" class="headerlink" title="NSInvocation"></a>NSInvocation</h1><p>可以直接调用某个对象的消息方式有两种：</p><ul><li>performSelector:withObject；</li><li>NSInvocation。<br>但是对于 &gt;2 个的参数或者有返回值的处理，那就需要做些额外工作才能搞定。那么在这种情况下，我们就可以使用NSInvocation来进行这些相对复杂的操作。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad]; <span class="hljs-comment">//NSInvocation;用来包装方法和对应的对象，它可以存储方法的名称，对应的对象，对应的参数,</span>    <span class="hljs-comment">/*</span><span class="hljs-comment">     NSMethodSignature：签名：再创建NSMethodSignature的时候，必须传递一个签名对象，签名对象的作用：用于获取参数的个数和方法的返回值</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">//创建签名对象的时候不是使用NSMethodSignature这个类创建，而是方法属于谁就用谁来创建</span>    <span class="hljs-built_in">NSMethodSignature</span>*signature = [ViewController instanceMethodSignatureForSelector:<span class="hljs-keyword">@selector</span>(sendMessageWithNumber:WithContent:)];    <span class="hljs-comment">//1、创建NSInvocation对象</span>    <span class="hljs-built_in">NSInvocation</span>*invocation = [<span class="hljs-built_in">NSInvocation</span> invocationWithMethodSignature:signature];    invocation.target = <span class="hljs-keyword">self</span>;    <span class="hljs-comment">//invocation中的方法必须和签名中的方法一致。</span>    invocation.selector = <span class="hljs-keyword">@selector</span>(sendMessageWithNumber:WithContent:);    <span class="hljs-comment">/*第一个参数：需要给指定方法传递的值</span><span class="hljs-comment">           第一个参数需要接收一个指针，也就是传递值的时候需要传递地址*/</span>    <span class="hljs-comment">//第二个参数：需要给指定方法的第几个参数传值</span>    <span class="hljs-built_in">NSString</span>*number = <span class="hljs-string">@&quot;1111&quot;</span>;    <span class="hljs-comment">//注意：设置参数的索引时不能从0开始，因为0已经被self占用，1已经被_cmd占用</span>    [invocation setArgument:&amp;number atIndex:<span class="hljs-number">2</span>];    <span class="hljs-built_in">NSString</span>*number2 = <span class="hljs-string">@&quot;啊啊啊&quot;</span>;    [invocation setArgument:&amp;number2 atIndex:<span class="hljs-number">3</span>];    <span class="hljs-comment">//2、调用NSInvocation对象的invoke方法</span>    <span class="hljs-comment">//只要调用invocation的invoke方法，就代表需要执行NSInvocation对象中制定对象的指定方法，并且传递指定的参数</span>    [invocation invoke];        <span class="hljs-comment">// 获取返回值</span>    <span class="hljs-keyword">id</span> res = <span class="hljs-literal">nil</span>;    <span class="hljs-keyword">if</span>(signature.methodReturnLength != <span class="hljs-number">0</span>)&#123;        [invocation getReturnValue:&amp;res];    &#125;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;===&gt;%@&quot;</span>,(<span class="hljs-built_in">NSString</span> *)res);&#125;- (<span class="hljs-built_in">NSString</span> *)sendMessageWithNumber:(<span class="hljs-built_in">NSString</span>*)number WithContent:(<span class="hljs-built_in">NSString</span>*)content&#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;电话号%@,内容%@&quot;</span>,number,content);    <span class="hljs-keyword">return</span> <span class="hljs-string">@&quot;return message&quot;</span>;&#125;</code></pre></div><p><a href="https://blog.csdn.net/wzc10101415/article/details/80305840">参考资料</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OC正则匹配</title>
    <link href="/2021/11/30/OC%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/"/>
    <url>/2021/11/30/OC%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="OC-正则匹配"><a href="#OC-正则匹配" class="headerlink" title="OC 正则匹配"></a>OC 正则匹配</h1><div class="hljs code-wrapper"><pre><code class="hljs pgsql">NSError* error = <span class="hljs-keyword">NULL</span>;NSRegularExpression* regex = [NSRegularExpression regularExpressionWithPattern:@&quot;(encoding=\&quot;)[^\&quot;]+(\&quot;)&quot; options:0 error:&amp;error];NSString* sample = @&quot;&lt;<span class="hljs-type">xml</span> encoding=\&quot;abc\&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;&lt;<span class="hljs-type">xml</span> encoding=\&quot;def\&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;&lt;<span class="hljs-type">xml</span> encoding=\&quot;ttt\&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;&quot;;NSLog(@&quot;<span class="hljs-keyword">Start</span>:%@&quot;,sample);NSString* result =     [regex stringByReplacingMatchesInString:sample                                    options:0                                      range:NSMakeRange(0, sample.length)                                                withTemplate:@&quot;<span class="hljs-meta">$1</span>utf<span class="hljs-number">-8</span><span class="hljs-meta">$2</span>&quot;];NSLog(@&quot;Result:%@&quot;, result);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs pgsql">输出：<span class="hljs-keyword">Start</span>:&lt;<span class="hljs-type">xml</span> encoding=&quot;abc&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;&lt;<span class="hljs-type">xml</span> encoding=&quot;def&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;&lt;<span class="hljs-type">xml</span> encoding=&quot;ttt&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;Result:&lt;<span class="hljs-type">xml</span> encoding=&quot;utf-8&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;&lt;<span class="hljs-type">xml</span> encoding=&quot;utf-8&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;&lt;<span class="hljs-type">xml</span> encoding=&quot;utf-8&quot;&gt;&lt;/<span class="hljs-type">xml</span>&gt;</code></pre></div><ul><li>通过正则表达式 <code>encoding=\&quot;[^\&quot;]+\&quot;</code> 匹配</li><li><code>[^\&quot;]+</code> 匹配任意数量的非<code>&quot;</code>字符</li><li>加上 <code>()</code> 用来后续 withTemplate 的匹配，<code>$1</code> <code>$2</code> 可用于匹配对应的第几个括号（从 1 开始）</li><li>共匹配到三处，并修改</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KVC 和 KVO</title>
    <link href="/2021/11/09/KVC%E5%92%8CKVO/"/>
    <url>/2021/11/09/KVC%E5%92%8CKVO/</url>
    
    <content type="html"><![CDATA[<h1 id="KVC和KVO"><a href="#KVC和KVO" class="headerlink" title="KVC和KVO"></a>KVC和KVO</h1><h2 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h2><ul><li><p>Key-Value Coding，键值编码，一种键值对间接访问机制，通过属性名称字符串间接访问属性。</p></li><li><p>directly access a property (get set)</p></li><li><p> 在某些情况下可以简化代码</p></li></ul><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - KVC</span><span class="hljs-comment">// 相当于 [myAccount setCurrentBalance:@(100.0)];</span>[<span class="hljs-meta">myAccount setValue:@(100.0) forKey:@<span class="hljs-meta-string">&quot;currentBalance&quot;</span></span>];[<span class="hljs-meta">myAccount setValue:@(100.0) forKeyPath:@<span class="hljs-meta-string">&quot;currentBalance.person&quot;</span></span>];[<span class="hljs-meta">myAccount valueForKeyPath:@<span class="hljs-meta-string">&quot;currentBalance.person&quot;</span></span>];[<span class="hljs-meta">item setValuesForKeysWithDictionary:dic</span>];</code></pre></div><p>若该成员变量也访问不到，则会在下面方法中抛出异常。重写该方法，在内做些处理，防止程序直接崩溃。</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)setValue:(<span class="hljs-keyword">id</span>)value forUndefinedKey:(<span class="hljs-built_in">NSString</span> *)key&#123;    <span class="hljs-keyword">if</span> ([key isEqualToString:<span class="hljs-string">@&quot;id&quot;</span>]) &#123;        <span class="hljs-keyword">self</span>.wbid = value;        <span class="hljs-comment">//wbid是替代的id属性</span>    &#125;&#125;- (<span class="hljs-keyword">id</span>)valueForUndefinedKey:(<span class="hljs-built_in">NSString</span> *)key &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">@&quot;&quot;</span>;&#125;</code></pre></div><h2 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h2><ul><li>Key-Value Observing 提供了一种观察者的机制</li><li>对目标对象的某属性添加观察，当该属性发生变化时，会自动的通知观察者。这里所谓的通知是触发观察者对象实现的KVO的接口方法。</li><li>addObserver、removeObserving 属性发生改变，系统自动调 observeValueForKeyPath</li></ul><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - KVO</span><span class="hljs-comment">/*</span><span class="hljs-comment"> //第一个参数 observer：观察者 （这里观察self.myKVO对象的属性变化）</span><span class="hljs-comment"> //第二个参数 keyPath： 被观察的属性名称(这里观察 self.myKVO.person.num 属性值的改变)</span><span class="hljs-comment"> //第三个参数 options： 观察属性的新值、旧值等的一些配置（枚举值，可以根据需要设置，例如这里可以使用两项）</span><span class="hljs-comment"> //第四个参数 context： 上下文，可以为 KVO 的回调方法传值（例如设定为一个放置数据的字典）</span><span class="hljs-comment"> */</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *PersonAccountBalanceContext = &amp;PersonAccountBalanceContext;<span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *PersonAccountInterestRateContext = &amp;PersonAccountInterestRateContext;<span class="hljs-comment">// 注册监听</span>[<span class="hljs-keyword">self</span>.myKVO addObserver:<span class="hljs-keyword">self</span>             forKeyPath:<span class="hljs-string">@&quot;person.num&quot;</span>                options:<span class="hljs-built_in">NSKeyValueObservingOptionOld</span>|<span class="hljs-built_in">NSKeyValueObservingOptionNew</span>                context:<span class="hljs-literal">nil</span>];<span class="hljs-comment">// 结束监听，不要忘记解除注册，否则会导致资源泄露</span>[<span class="hljs-keyword">self</span>.myKVO removeObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;person.num&quot;</span> context:PersonAccountBalanceContext];- (<span class="hljs-keyword">void</span>)observeValueForKeyPath:(<span class="hljs-built_in">NSString</span> *)keyPath                      ofObject:(<span class="hljs-keyword">id</span>)object                        change:(<span class="hljs-built_in">NSDictionary</span> *)change                       context:(<span class="hljs-keyword">void</span> *)context &#123;     <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%s&quot;</span>,__func__);    <span class="hljs-keyword">if</span> (context == PersonAccountBalanceContext) &#123;        <span class="hljs-comment">// Do something with the balance…</span>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Do something with the balance…&quot;</span>);        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>,change);     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (context == PersonAccountInterestRateContext) &#123;        <span class="hljs-comment">// Do something with the interest rate…</span>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Do something with the interest rate…&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// Any unrecognized context must belong to super（可能是被父类注册了）</span>        [<span class="hljs-keyword">super</span> observeValueForKeyPath:keyPath                             ofObject:object                               change:change                               context:context];    &#125;&#125;</code></pre></div><h3 id="KVO-本质"><a href="#KVO-本质" class="headerlink" title="KVO 本质"></a>KVO 本质</h3><div class="hljs code-wrapper"><pre><code class="hljs objectivec">原文：当某个类的对象第一次被观察时，系统就会在运行期动态地创建该类的一个派生类，在这个派生类中重写基类中任何被观察属性的 <span class="hljs-keyword">setter</span> 方法。派生类在被重写的 <span class="hljs-keyword">setter</span> 方法实现真正的通知机制，就如前面手动实现键值观察那样。这么做是基于设置属性会调用 <span class="hljs-keyword">setter</span> 方法，而通过重写就获得了 KVO 需要的通知机制。当然前提是要通过遵循 KVO 的属性设置方式来变更属性值，如果仅是直接修改属性对应的成员变量，是无法实现 KVO 的。同时派生类还重写了 <span class="hljs-keyword">class</span> 方法以“欺骗”外部调用者它就是起初的那个类。然后系统将这个对象的 isa 指针指向这个新诞生的派生类，因此这个对象就成为该派生类的对象了，因而在该对象上对 <span class="hljs-keyword">setter</span> 的调用就会调用重写的 <span class="hljs-keyword">setter</span>，从而激活键值通知机制。此外，派生类还重写了 dealloc 方法来释放资源。</code></pre></div><p>即：动态地创建该类的一个派生类，并重写了setter方法，在 setter 里面，属性赋值的前后分别调用了两个方法。</p><div class="hljs code-wrapper"><pre><code class="hljs erlang">- <span class="hljs-params">(void)</span>willChangeValueForKey:<span class="hljs-params">(NSString *)</span>key;- <span class="hljs-params">(void)</span>didChangeValueForKey:<span class="hljs-params">(NSString *)</span>key;</code></pre></div><p>而 <code>- (void)didChangeValueForKey:(NSString *)key;</code> 会调用</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)observeValueForKeyPath:(<span class="hljs-keyword">nullable</span> <span class="hljs-built_in">NSString</span> *)keyPath ofObject:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">id</span>)object change:(<span class="hljs-keyword">nullable</span> <span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">NSString</span>*, <span class="hljs-keyword">id</span>&gt; *)change context:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">void</span> *)context;</code></pre></div><p>参考：<br><a href="https://www.jianshu.com/p/66bda10168f1">KVC和KVO的使用及原理</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 圆角及性能</title>
    <link href="/2021/11/07/iOS%20%E5%9C%86%E8%A7%92%E5%8F%8A%E6%80%A7%E8%83%BD/"/>
    <url>/2021/11/07/iOS%20%E5%9C%86%E8%A7%92%E5%8F%8A%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-圆角及性能"><a href="#iOS-圆角及性能" class="headerlink" title="iOS 圆角及性能"></a>iOS 圆角及性能</h1><h2 id="普通圆角添加方式"><a href="#普通圆角添加方式" class="headerlink" title="普通圆角添加方式"></a>普通圆角添加方式</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">UIImageView</span> *avatarImageView = [[<span class="hljs-built_in">UIImageView</span> alloc]initWithFrame:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)];avatarImageView.backgroundColor = [<span class="hljs-built_in">UIColor</span> redColor];avatarImageView.clipsToBounds = <span class="hljs-literal">YES</span>;[avatarImageView.layer setCornerRadius:<span class="hljs-number">50</span>];[<span class="hljs-keyword">self</span>.view addSubview:avatarImageView];</code></pre></div><h2 id="加入光栅化"><a href="#加入光栅化" class="headerlink" title="加入光栅化"></a>加入光栅化</h2><ul><li>设置光栅化，可以使离屏渲染的结果缓存到内存中存为位图，使用的时候直接使用缓存，节省了一直离屏渲染损耗的性能。<div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">avatarImageView.layer.shouldRasterize</span> = <span class="hljs-literal">YES</span><span class="hljs-comment">;  </span><span class="hljs-attr">avatarImageView.layer.rasterizationScale</span>=[UIScreen mainScreen].scale<span class="hljs-comment">; // UIImageView不加这句会由于光栅化产生一点模糊</span></code></pre></div><h2 id="图片覆盖"><a href="#图片覆盖" class="headerlink" title="图片覆盖"></a>图片覆盖</h2></li><li>直接覆盖一张中间为圆形透明的图片（推荐使用）</li><li>GPU计算多层的混合渲染blending也是会消耗一点性能的，但比普通圆角添加方法还是好上很多的</li></ul><h2 id="UIImage-drawInRect绘制圆角"><a href="#UIImage-drawInRect绘制圆角" class="headerlink" title="UIImage drawInRect绘制圆角"></a>UIImage drawInRect绘制圆角</h2><ul><li>这种方式 GPU 损耗低内存占用大，而且主要用在 UIImageView 上，可用 UIimageView 添加个点击手势当做 UIButton 使用。</li></ul><h2 id="SDWebImage处理图片时Core-Graphics绘制圆角"><a href="#SDWebImage处理图片时Core-Graphics绘制圆角" class="headerlink" title="SDWebImage处理图片时Core Graphics绘制圆角"></a>SDWebImage处理图片时Core Graphics绘制圆角</h2><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//UIImage绘制为圆角</span><span class="hljs-built_in">int</span> w = imageSize.width;<span class="hljs-built_in">int</span> h = imageSize.height;<span class="hljs-built_in">int</span> radius = imageSize.width/<span class="hljs-number">2</span>;UIImage *img = image;CGColorSpaceRef colorSpace = <span class="hljs-constructor">CGColorSpaceCreateDeviceRGB()</span>;CGContextRef context = <span class="hljs-constructor">CGBitmapContextCreate(NULL, <span class="hljs-params">w</span>, <span class="hljs-params">h</span>, 8, 4 <span class="hljs-operator">*</span> <span class="hljs-params">w</span>, <span class="hljs-params">colorSpace</span>, <span class="hljs-params">kCGImageAlphaPremultipliedFirst</span>)</span>;CGRect rect = <span class="hljs-constructor">CGRectMake(0, 0, <span class="hljs-params">w</span>, <span class="hljs-params">h</span>)</span>;<span class="hljs-constructor">CGContextBeginPath(<span class="hljs-params">context</span>)</span>;add<span class="hljs-constructor">RoundedRectToPath(<span class="hljs-params">context</span>, <span class="hljs-params">rect</span>, <span class="hljs-params">radius</span>, <span class="hljs-params">radius</span>)</span>;<span class="hljs-constructor">CGContextClosePath(<span class="hljs-params">context</span>)</span>;<span class="hljs-constructor">CGContextClip(<span class="hljs-params">context</span>)</span>;<span class="hljs-constructor">CGContextDrawImage(<span class="hljs-params">context</span>, CGRectMake(0, 0, <span class="hljs-params">w</span>, <span class="hljs-params">h</span>)</span>, img.CGImage);CGImageRef imageMasked = <span class="hljs-constructor">CGBitmapContextCreateImage(<span class="hljs-params">context</span>)</span>;img = <span class="hljs-literal">[UII<span class="hljs-identifier">mage</span> <span class="hljs-identifier">imageWithCGImage</span>:<span class="hljs-identifier">imageMasked</span>]</span>;<span class="hljs-constructor">CGContextRelease(<span class="hljs-params">context</span>)</span>;<span class="hljs-constructor">CGColorSpaceRelease(<span class="hljs-params">colorSpace</span>)</span>;<span class="hljs-constructor">CGImageRelease(<span class="hljs-params">imageMasked</span>)</span>;</code></pre></div><h2 id="用Instruments测试"><a href="#用Instruments测试" class="headerlink" title="用Instruments测试"></a>用Instruments测试</h2><p>第一种方法，UIImageView和UIButton都高亮为黄色。</p><p>第二种方法，UIImageView和UIButton都高亮为绿色</p><p>第三种方法，无任何高亮，说明没离屏渲染。<br>这种圆片覆盖的方法一般只用在底色为纯色的时候，如果圆角图片的父View是张图片的时候就没办法了，而且底色如果是多种颜色的话那要做多张不同颜色的圆片覆盖。（可以用代码取底色的颜色值给圆片着色）</p><p>第四种方法无任何高亮，说明没离屏渲染（但是CPU消耗和内存占用会很大）</p><p>第五种方法无任何高亮，说明没离屏渲染，而且内存占用也不大。(暂时感觉是最优方法)</p><p><a href="https://www.jianshu.com/p/34189f62bfd8">参考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSKeyedArchiver 归档</title>
    <link href="/2021/11/03/NSKeyedArchiver%E5%BD%92%E6%A1%A3/"/>
    <url>/2021/11/03/NSKeyedArchiver%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="NSKeyedArchiver-归档"><a href="#NSKeyedArchiver-归档" class="headerlink" title="NSKeyedArchiver 归档"></a>NSKeyedArchiver 归档</h1><h2 id="NSKeyedArchiver-和-NSUserDefault-的区别"><a href="#NSKeyedArchiver-和-NSUserDefault-的区别" class="headerlink" title="NSKeyedArchiver 和 NSUserDefault 的区别"></a>NSKeyedArchiver 和 NSUserDefault 的区别</h2><ul><li>NSUserDefault 只能存储基本数据类型，如 NSInteger NSString NSArray 但像 UIImage、自定义类就无法存入</li><li>NSKeyedArchiver 可以将各种类型的对象存储到文件中，而不仅仅是字符串、数组和字典类型，利用NSKeyedAarchiver 类创建带 key 的档案来完成存入</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="服从-NSSecureCoding-协议"><a href="#服从-NSSecureCoding-协议" class="headerlink" title="服从 NSSecureCoding 协议"></a>服从 NSSecureCoding 协议</h3><p> 所存储的对象必须必须服从NSSecureCoding协议</p><h3 id="对于已经服从的类型，如NSString、NSInteger可以直接使用"><a href="#对于已经服从的类型，如NSString、NSInteger可以直接使用" class="headerlink" title="对于已经服从的类型，如NSString、NSInteger可以直接使用"></a>对于已经服从的类型，如NSString、NSInteger可以直接使用</h3><p>NSKeyedArchiver-归档</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-comment">// 对需要保存的数据进行编码为 NSData</span> <span class="hljs-built_in">NSData</span> *data = [<span class="hljs-built_in">NSKeyedArchiver</span> archivedDataWithRootObject:<span class="hljs-string">@&quot;ios&quot;</span> requiringSecureCoding:<span class="hljs-literal">YES</span> error:<span class="hljs-literal">nil</span>]; <span class="hljs-comment">//2.将二进制数据保存到文件</span> <span class="hljs-comment">//创建文件</span> <span class="hljs-built_in">NSString</span> *path = [<span class="hljs-built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="hljs-string">@&quot;ios.plist&quot;</span>]; <span class="hljs-comment">//创建文件</span> [[<span class="hljs-built_in">NSFileManager</span> defaultManager] createFileAtPath:path contents:<span class="hljs-literal">nil</span> attributes:<span class="hljs-literal">nil</span>]; [data writeToFile:path atomically:<span class="hljs-literal">YES</span>];</code></pre></div><p>NSKeyedUnarchiver-解归档</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"> <span class="hljs-comment">//解归档</span> <span class="hljs-comment">//获取文件路径</span> <span class="hljs-built_in">NSString</span> *path = [<span class="hljs-built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="hljs-string">@&quot;ios.plist&quot;</span>]; <span class="hljs-comment">//读取文件的内容</span> <span class="hljs-built_in">NSData</span> *data = [<span class="hljs-built_in">NSData</span> dataWithContentsOfFile:path]; <span class="hljs-comment">//将二进制数据转化为对应的对象类型</span><span class="hljs-built_in">NSString</span> *str = [<span class="hljs-built_in">NSKeyedUnarchiver</span> unarchivedObjectOfClass:[<span class="hljs-built_in">NSString</span> <span class="hljs-keyword">class</span>] fromData:data error:<span class="hljs-literal">nil</span>]; <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, str);</code></pre></div><h3 id="对于其他类型，如自己创建的模型，需要服从协议，并且实现某些方法"><a href="#对于其他类型，如自己创建的模型，需要服从协议，并且实现某些方法" class="headerlink" title="对于其他类型，如自己创建的模型，需要服从协议，并且实现某些方法"></a>对于其他类型，如自己创建的模型，需要服从协议，并且实现某些方法</h3><p>Person.h</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Person</span> : <span class="hljs-title">NSObject</span>&lt;<span class="hljs-title">NSSecureCoding</span>&gt;</span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSString</span> *name;<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">NSInteger</span> age;<span class="hljs-keyword">@end</span><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span></code></pre></div><p>Person.m</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;Person.h&quot;</span></span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Person</span></span><span class="hljs-comment">// Require in NSSecureCoding protocol.</span>+ (<span class="hljs-built_in">BOOL</span>)supportsSecureCoding&#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;&#125;<span class="hljs-comment">//归档的时候调用</span><span class="hljs-comment">//告诉编码器该如何归档</span><span class="hljs-comment">//将这个对象哪些属性编码起来</span>- (<span class="hljs-keyword">void</span>)encodeWithCoder:(<span class="hljs-built_in">NSCoder</span> *)aCoder&#123;    [aCoder encodeObject:<span class="hljs-keyword">self</span>.name forKey:<span class="hljs-string">@&quot;name&quot;</span>];    [aCoder encodeInteger:<span class="hljs-keyword">self</span>.age forKey:<span class="hljs-string">@&quot;age&quot;</span>];&#125;<span class="hljs-comment">//解归档</span>- (<span class="hljs-keyword">instancetype</span>)initWithCoder:(<span class="hljs-built_in">NSCoder</span> *)aDecoder&#123;    <span class="hljs-keyword">if</span> ([<span class="hljs-keyword">super</span> init]) &#123;        <span class="hljs-keyword">self</span>.name = [aDecoder decodeObjectForKey:<span class="hljs-string">@&quot;name&quot;</span>];        <span class="hljs-keyword">self</span>.age = [aDecoder decodeIntegerForKey:<span class="hljs-string">@&quot;age&quot;</span>];    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;&#125;</code></pre></div><p>ViewController.m 归档</p><div class="hljs code-wrapper"><pre><code class="hljs groovy"><span class="hljs-comment">//创建Person对象</span>    Person *jz = [Person <span class="hljs-keyword">new</span>];    jz.name = @<span class="hljs-string">&quot;jz&quot;</span>;    jz.age = <span class="hljs-number">12</span>;    <span class="hljs-comment">//1.对需要保存的数据进行编码 -&gt;NSdata *</span>    NSData *data = [NSKeyedArchiver <span class="hljs-attr">archivedDataWithRootObject:</span>jz <span class="hljs-attr">requiringSecureCoding:</span>YES <span class="hljs-attr">error:</span>nil];        <span class="hljs-comment">//2.将二进制数据保存到文件</span>    <span class="hljs-comment">//创建文件</span>    NSString *path = [NSHomeDirectory() <span class="hljs-attr">stringByAppendingPathComponent:</span>@<span class="hljs-string">&quot;ios.plist&quot;</span>];    <span class="hljs-comment">//创建文件</span>    [[NSFileManager defaultManager] <span class="hljs-attr">createFileAtPath:</span>path <span class="hljs-attr">contents:</span>nil <span class="hljs-attr">attributes:</span>nil];    [data <span class="hljs-attr">writeToFile:</span>path <span class="hljs-attr">atomically:</span>YES];</code></pre></div><p>解归档</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-comment">//解归档</span>    <span class="hljs-comment">//获取文件路径</span>    <span class="hljs-built_in">NSString</span> *path = [<span class="hljs-built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="hljs-string">@&quot;ios.plist&quot;</span>];    <span class="hljs-comment">//读取文件的内容</span>    <span class="hljs-built_in">NSData</span> *data = [<span class="hljs-built_in">NSData</span> dataWithContentsOfFile:path];    <span class="hljs-comment">//将二进制数据转化为对应的对象类型</span>    Person *jz = [<span class="hljs-built_in">NSKeyedUnarchiver</span> unarchivedObjectOfClass:[Person <span class="hljs-keyword">class</span>] fromData:data error:<span class="hljs-literal">nil</span>];    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, jz);</code></pre></div><p><a href="https://www.cnblogs.com/jianze/p/10778821.html">参考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Keychain 增删改查</title>
    <link href="/2021/11/01/Keychain%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <url>/2021/11/01/Keychain%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Keychain-增删改查"><a href="#Keychain-增删改查" class="headerlink" title="Keychain 增删改查"></a>Keychain 增删改查</h1><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    <span class="hljs-built_in">BOOL</span> succeed = [<span class="hljs-keyword">self</span> keychainSaveData:<span class="hljs-string">@&quot;123456789&quot;</span> withAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;password&quot;</span>];    <span class="hljs-built_in">BOOL</span> succeed1 = [<span class="hljs-keyword">self</span> keychainSaveData:<span class="hljs-string">@&quot;987654321&quot;</span> withAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;account&quot;</span>];    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%d&quot;</span>,succeed);    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%d&quot;</span>,succeed1);    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>,(<span class="hljs-built_in">NSString</span> *)[<span class="hljs-keyword">self</span> keychainGetDataWithAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;account&quot;</span>]);    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>,(<span class="hljs-built_in">NSString</span> *)[<span class="hljs-keyword">self</span> keychainGetDataWithAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;password&quot;</span>]);    [<span class="hljs-keyword">self</span> keychainUpdataData:<span class="hljs-string">@&quot;000000000&quot;</span> withAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;password&quot;</span>];    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>,(<span class="hljs-built_in">NSString</span> *)[<span class="hljs-keyword">self</span> keychainGetDataWithAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;password&quot;</span>]);    [<span class="hljs-keyword">self</span> keychainDeleteWithAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;account&quot;</span>];     <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>,(<span class="hljs-built_in">NSString</span> *)[<span class="hljs-keyword">self</span> keychainGetDataWithAccountIdentifier:<span class="hljs-string">@&quot;trigger&quot;</span> andServiceIdentifier:<span class="hljs-string">@&quot;account&quot;</span>]);&#125;- (<span class="hljs-built_in">NSMutableDictionary</span> *)keychainDicWithAccountId:(<span class="hljs-built_in">NSString</span> *)accountId andServiceId:(<span class="hljs-built_in">NSString</span> *)serviceId&#123;<span class="hljs-comment">//构建一个存取条件,实质是一个字典</span>    <span class="hljs-built_in">NSString</span> *classKey = (__bridge <span class="hljs-built_in">NSString</span> *)kSecClass;    <span class="hljs-comment">//指定服务类型是普通密码</span>    <span class="hljs-built_in">NSString</span> *classValue = (__bridge <span class="hljs-built_in">NSString</span> *)kSecClassGenericPassword;    <span class="hljs-built_in">NSString</span> *accessibleKey = (__bridge <span class="hljs-built_in">NSString</span> *)kSecAttrAccessible;    <span class="hljs-comment">//指定安全类型是任何时候都可以访问</span>    <span class="hljs-built_in">NSString</span> *accessibleValue = (__bridge <span class="hljs-built_in">NSString</span> *)kSecAttrAccessibleAlways;    <span class="hljs-built_in">NSString</span> *accountKey = (__bridge <span class="hljs-built_in">NSString</span> *)kSecAttrAccount;    <span class="hljs-comment">//指定服务的账户名 可以与服务名相同 账户名可以对应多个服务名</span>    <span class="hljs-built_in">NSString</span> *accountValue = accountId;    <span class="hljs-built_in">NSString</span> *serviceKey = (__bridge <span class="hljs-built_in">NSString</span> *)kSecAttrService;    <span class="hljs-comment">//指定服务的名字 可以与服务账户名相同</span>    <span class="hljs-built_in">NSString</span> *serviceValue = serviceId;    <span class="hljs-built_in">NSDictionary</span> *keychainItems = @&#123;classKey      : classValue,                                    accessibleKey : accessibleValue,                                    accountKey    : accountValue,                                    serviceKey    : serviceValue&#125;;    <span class="hljs-keyword">return</span> keychainItems.mutableCopy;&#125;- (<span class="hljs-built_in">BOOL</span>)keychainSaveData:(<span class="hljs-keyword">id</span>)aData withAccountIdentifier:(<span class="hljs-built_in">NSString</span> *)accountId andServiceIdentifier:(<span class="hljs-built_in">NSString</span> *)serviceId&#123;    <span class="hljs-comment">// 获取存储的数据的条件</span>    <span class="hljs-built_in">NSMutableDictionary</span> * saveQueryDic = [<span class="hljs-keyword">self</span> keychainDicWithAccountId:accountId andServiceId:serviceId];    <span class="hljs-comment">// 删除旧的数据</span>    SecItemDelete((<span class="hljs-built_in">CFDictionaryRef</span>)saveQueryDic);    <span class="hljs-comment">// 设置新的数据</span><span class="hljs-comment">//    [saveQueryDic setObject:[NSKeyedArchiver archivedDataWithRootObject:aData] forKey:(id)kSecValueData];</span>    [saveQueryDic setObject:[<span class="hljs-built_in">NSKeyedArchiver</span> archivedDataWithRootObject:aData requiringSecureCoding:<span class="hljs-literal">NO</span> error:<span class="hljs-literal">nil</span>] forKey:(<span class="hljs-keyword">id</span>)kSecValueData];    <span class="hljs-comment">// 添加数据</span>    OSStatus saveState = SecItemAdd((<span class="hljs-built_in">CFDictionaryRef</span>)saveQueryDic, <span class="hljs-literal">nil</span>);    <span class="hljs-comment">// 释放对象</span>    saveQueryDic = <span class="hljs-literal">nil</span> ;    <span class="hljs-comment">// 判断是否存储成功</span>    <span class="hljs-keyword">if</span> (saveState == errSecSuccess) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;&#125;- (<span class="hljs-keyword">id</span>)keychainGetDataWithAccountIdentifier:(<span class="hljs-built_in">NSString</span> *)accountId andServiceIdentifier:(<span class="hljs-built_in">NSString</span> *)serviceId&#123;    <span class="hljs-keyword">id</span> idObject = <span class="hljs-literal">nil</span> ;    <span class="hljs-comment">// 通过标记获取数据查询条件</span>    <span class="hljs-built_in">NSMutableDictionary</span> * readQueryDic = [<span class="hljs-keyword">self</span> keychainDicWithAccountId:accountId andServiceId:serviceId];    <span class="hljs-comment">// 查询结果返回到 kSecValueData (此项必选)</span>    [readQueryDic setObject:(<span class="hljs-keyword">id</span>)kCFBooleanTrue forKey:(<span class="hljs-keyword">id</span>)kSecReturnData];    <span class="hljs-comment">// 只返回搜索到的第一条数据 (此项必选)</span>    [readQueryDic setObject:(<span class="hljs-keyword">id</span>)kSecMatchLimitOne forKey:(<span class="hljs-keyword">id</span>)kSecMatchLimit];    <span class="hljs-comment">// 创建一个对象接受结果</span>    <span class="hljs-built_in">CFDataRef</span> keyChainData = <span class="hljs-literal">nil</span> ;    <span class="hljs-comment">// 通过条件查询数据</span>    <span class="hljs-keyword">if</span> (SecItemCopyMatching((<span class="hljs-built_in">CFDictionaryRef</span>)readQueryDic , (<span class="hljs-built_in">CFTypeRef</span> *)&amp;keyChainData) == noErr)&#123;        <span class="hljs-keyword">@try</span> &#123;            <span class="hljs-comment">//转换类型</span>            idObject = [<span class="hljs-built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:(__bridge <span class="hljs-built_in">NSData</span> *)(keyChainData)];        &#125; <span class="hljs-keyword">@catch</span> (<span class="hljs-built_in">NSException</span> * exception)&#123;            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Unarchive of search data where %@ failed of %@ &quot;</span>,serviceId,exception);        &#125;    &#125;    <span class="hljs-keyword">if</span> (keyChainData) &#123;        <span class="hljs-built_in">CFRelease</span>(keyChainData);    &#125;    readQueryDic = <span class="hljs-literal">nil</span>;    <span class="hljs-comment">// 返回数据</span>    <span class="hljs-keyword">return</span> idObject ;&#125;- (<span class="hljs-built_in">BOOL</span>)keychainUpdataData:(<span class="hljs-keyword">id</span>)data withAccountIdentifier:(<span class="hljs-built_in">NSString</span> *)accountId andServiceIdentifier:(<span class="hljs-built_in">NSString</span> *)serviceId&#123;    <span class="hljs-comment">// 通过标记获取数据更新的条件</span>    <span class="hljs-built_in">NSMutableDictionary</span> * updataQueryDic = [<span class="hljs-keyword">self</span> keychainDicWithAccountId:accountId andServiceId:serviceId];    <span class="hljs-comment">// 创建更新数据字典</span>    <span class="hljs-built_in">NSMutableDictionary</span> * newDic = @&#123;&#125;.mutableCopy;    <span class="hljs-comment">// 存储数据</span>    [newDic setObject:[<span class="hljs-built_in">NSKeyedArchiver</span> archivedDataWithRootObject:data] forKey:(<span class="hljs-keyword">id</span>)kSecValueData];    <span class="hljs-comment">// 获取存储的状态</span>    OSStatus  updataStatus = SecItemUpdate((<span class="hljs-built_in">CFDictionaryRef</span>)updataQueryDic, (<span class="hljs-built_in">CFDictionaryRef</span>)newDic);    updataQueryDic = <span class="hljs-literal">nil</span>;    newDic = <span class="hljs-literal">nil</span>;    <span class="hljs-comment">// 判断是否更新成功</span>    <span class="hljs-keyword">if</span> (updataStatus == errSecSuccess) &#123;        <span class="hljs-keyword">return</span>  <span class="hljs-literal">YES</span> ;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;&#125;- (<span class="hljs-keyword">void</span>)keychainDeleteWithAccountIdentifier:(<span class="hljs-built_in">NSString</span> *)accountId andServiceIdentifier:(<span class="hljs-built_in">NSString</span> *)serviceId&#123;    <span class="hljs-comment">// 获取删除数据的查询条件</span>    <span class="hljs-built_in">NSMutableDictionary</span> * deleteQueryDic = [<span class="hljs-keyword">self</span> keychainDicWithAccountId:accountId andServiceId:serviceId];    <span class="hljs-comment">// 删除指定条件的数据</span>    SecItemDelete((<span class="hljs-built_in">CFDictionaryRef</span>)deleteQueryDic);    deleteQueryDic = <span class="hljs-literal">nil</span> ;&#125;</code></pre></div><p><a href="https://blog.csdn.net/weixin_39750598/article/details/111727219">参考资料</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>App Tracking Transparency获取IDFA</title>
    <link href="/2021/10/31/App%20Tracking%20Transparency%E8%8E%B7%E5%8F%96IDFA/"/>
    <url>/2021/10/31/App%20Tracking%20Transparency%E8%8E%B7%E5%8F%96IDFA/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-14-5-以后-App-Tracking-Transparency-获取-IDFA"><a href="#iOS-14-5-以后-App-Tracking-Transparency-获取-IDFA" class="headerlink" title="iOS 14.5 以后 App Tracking Transparency 获取 IDFA"></a>iOS 14.5 以后 App Tracking Transparency 获取 IDFA</h1><p>iOS 14.5以后的版本，想要允许其跟踪或访问其设备的广告标识符（IDFA），需使用AppTrackingTransparency</p><h2 id="info-plist-文件"><a href="#info-plist-文件" class="headerlink" title="info.plist 文件"></a>info.plist 文件</h2><p>此处自定义提示内容为必填项，也可以参考<a href="https://airtable.com/shrgVLgfz6tdbv3Fc/tblZVr9BgJ2Cb0ihB">提示模版</a><br><img src="1.png"></p><h2 id="代码判断"><a href="#代码判断" class="headerlink" title="代码判断"></a>代码判断</h2><div class="hljs code-wrapper"><pre><code class="hljs swift">#<span class="hljs-keyword">import</span> &lt;AppTrackingTransparency/AppTrackingTransparency.h&gt;#<span class="hljs-keyword">import</span> &lt;AdSupport/ASIdentifierManager.h&gt;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">14</span>, <span class="hljs-operator">*</span>)) &#123;        <span class="hljs-comment">// iOS14及以上版本需要先请求权限</span>                <span class="hljs-type">ATTrackingManagerAuthorizationStatus</span> status <span class="hljs-operator">=</span> <span class="hljs-type">ATTrackingManager</span>.trackingAuthorizationStatus;                <span class="hljs-keyword">switch</span> (status) &#123;                    <span class="hljs-keyword">case</span> <span class="hljs-type">ATTrackingManagerAuthorizationStatusDenied</span>:                        <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;用户拒绝&quot;</span>);                        <span class="hljs-keyword">break</span>;                    <span class="hljs-keyword">case</span> <span class="hljs-type">ATTrackingManagerAuthorizationStatusAuthorized</span>:                    &#123;                        <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;用户允许&quot;</span>);                        <span class="hljs-type">NSString</span> <span class="hljs-operator">*</span>idfa <span class="hljs-operator">=</span> [[<span class="hljs-type">ASIdentifierManager</span> sharedManager].advertisingIdentifier <span class="hljs-type">UUIDString</span>];                        <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;IDFA: %@&quot;</span>,idfa);                        <span class="hljs-keyword">break</span>;                    &#125;                    <span class="hljs-keyword">case</span> <span class="hljs-type">ATTrackingManagerAuthorizationStatusNotDetermined</span>:                        <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;用户未做选择或未弹窗&quot;</span>);                        <span class="hljs-keyword">break</span>;                    <span class="hljs-keyword">default</span>:                        <span class="hljs-keyword">break</span>;                &#125;           &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// iOS14以下版本依然使用老方法</span>            <span class="hljs-comment">// 判断在设置-隐私里用户是否打开了广告跟踪</span>            <span class="hljs-keyword">if</span> ([[<span class="hljs-type">ASIdentifierManager</span> sharedManager] isAdvertisingTrackingEnabled]) &#123;                <span class="hljs-type">NSString</span> <span class="hljs-operator">*</span>idfa <span class="hljs-operator">=</span> [[<span class="hljs-type">ASIdentifierManager</span> sharedManager].advertisingIdentifier <span class="hljs-type">UUIDString</span>];                <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>,idfa);            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;请在设置-隐私-广告中打开广告跟踪功能&quot;</span>);            &#125;        &#125;</code></pre></div><p><a href="https://www.jianshu.com/p/b4df139e959d">参考资料</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>load和initialize区别</title>
    <link href="/2021/10/27/load%E5%92%8Cinitialize%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/10/27/load%E5%92%8Cinitialize%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="load-和-initialize-区别"><a href="#load-和-initialize-区别" class="headerlink" title="load 和 initialize 区别"></a><code>load</code> 和 <code>initialize</code> 区别</h1><p>1、load 是根据函数地址直接调用<br>2、initialize 是通过 objc_msgSend 调用<br>调用时刻<br>1、load 是 runtime 加载类、分类的时候调用<br>2、initialize 是类第一次接收到消息的时候调用</p><ul><li>每接收到一次消息，只会调用一次 initialize</li><li>若子类未实现 initialize 方法, 会调用父类的 initialize 方法, 所以父类的 initialize 方法可能会调用多次</li></ul><p><code>load</code>是只要类所在文件被引用就会被调用，而<code>initialize</code>是在类或者其子类的第一个方法被调用前调用。所以如果类没有被引用进项目，就不会有<code>load</code>调用；但即使类文件被引用进来，但是没有使用，那么<code>initialize</code>也不会被调用；<code>load</code>每个类只会调用一次，<code>initialize</code>也只调用一次，但是如果子类没有实现<code>initialize</code>方法则会调用父类的方法，因此作为父类的<code>initialize</code>方法可能会调用多次。</p><p>load 和 initializee 的调用顺序<br>1、load:</p><ul><li>先调用类的 load, 在调用分类 的oad</li><li>先编译的类, 优先调用 load, 调用子类的 load 之前, 会先调用父类的load</li><li>先编译的分类, 优先调用 load</li></ul><p>2、initialize</p><ul><li>先初始化分类, 后初始化子类</li><li>通过消息机制调用, 当子类没有 initialize 方法时, 会调用父类的 initialize 方法, 所以父类的 initialize 方法会调用多次</li></ul><div class="hljs code-wrapper"><pre><code class="hljs pgsql">+ (<span class="hljs-type">void</span>)<span class="hljs-keyword">load</span> &#123;    &#125;    + (<span class="hljs-type">void</span>)initialize &#123;    &#125;</code></pre></div><p><img src="1.png" alt="1"></p><ul><li><code>load</code> 父类调用顺序按照 Compile Sources 调用</li><li><code>initialize</code> 调用顺序按照 Compile Sources 反向的顺序</li></ul><p><img src="2.png" alt="2"></p><p><a href="https://www.jianshu.com/p/5e5a26c1ae15">参考资料</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fat 脚本</title>
    <link href="/2021/10/13/Fat%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/10/13/Fat%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Fat-脚本"><a href="#Fat-脚本" class="headerlink" title="Fat 脚本"></a>Fat 脚本</h1><ul><li>用于 xcode build 时自动生成可被真机和模拟器同时使用的 .a 文件</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ACTION&#125;</span>&quot;</span> = <span class="hljs-string">&quot;build&quot;</span> ]<span class="hljs-keyword">then</span><span class="hljs-comment">#要build的target名</span>target_Name=<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;target_Name=<span class="hljs-variable">$&#123;target_Name&#125;</span>&quot;</span><span class="hljs-comment">#build之后的文件夹路径</span>build_DIR=<span class="hljs-variable">$&#123;SRCROOT&#125;</span>/build<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;build_DIR=<span class="hljs-variable">$&#123;build_DIR&#125;</span>&quot;</span><span class="hljs-comment">#真机build生成的头文件的文件夹路径</span>DEVICE_DIR_INCLUDE=<span class="hljs-variable">$&#123;build_DIR&#125;</span>/Release-iphoneos/include/<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DEVICE_DIR_INCLUDE=<span class="hljs-variable">$&#123;DEVICE_DIR_INCLUDE&#125;</span>&quot;</span><span class="hljs-comment">#真机build生成的.a文件路径</span>DEVICE_DIR_A=<span class="hljs-variable">$&#123;build_DIR&#125;</span>/Release-iphoneos/lib<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>.a<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DEVICE_DIR_A=<span class="hljs-variable">$&#123;DEVICE_DIR_A&#125;</span>&quot;</span><span class="hljs-comment">#模拟器build生成的.a文件路径</span>SIMULATOR_DIR_A=<span class="hljs-variable">$&#123;build_DIR&#125;</span>/Release-iphonesimulator/lib<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>.a<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SIMULATOR_DIR_A=<span class="hljs-variable">$&#123;SIMULATOR_DIR_A&#125;</span>&quot;</span><span class="hljs-comment">#目标文件夹路径</span>INSTALL_DIR=<span class="hljs-variable">$&#123;SRCROOT&#125;</span>/Products/<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;INSTALL_DIR=<span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span><span class="hljs-comment">#目标头文件文件夹路径</span>INSTALL_DIR_Headers=<span class="hljs-variable">$&#123;SRCROOT&#125;</span>/Products/<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>/Headers<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;INSTALL_DIR_Headers=<span class="hljs-variable">$&#123;INSTALL_DIR_Headers&#125;</span>&quot;</span><span class="hljs-comment">#目标.a路径</span>INSTALL_DIR_A=<span class="hljs-variable">$&#123;SRCROOT&#125;</span>/Products/<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>/lib<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>.a<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;INSTALL_DIR_A=<span class="hljs-variable">$&#123;INSTALL_DIR_A&#125;</span>&quot;</span><span class="hljs-comment">#判断build文件夹是否存在，存在则删除</span><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;build_DIR&#125;</span>&quot;</span> ]<span class="hljs-keyword">then</span>rm -rf <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;build_DIR&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment">#判断目标文件夹是否存在，存在则删除该文件夹</span><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span> ]<span class="hljs-keyword">then</span>rm -rf <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment">#创建目标文件夹</span>mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span><span class="hljs-comment">#build之前clean一下</span>xcodebuild -target <span class="hljs-variable">$&#123;target_Name&#125;</span> clean<span class="hljs-comment">#模拟器build</span>xcodebuild -target <span class="hljs-variable">$&#123;target_Name&#125;</span> -configuration Release -sdk iphonesimulator<span class="hljs-comment">#真机build</span>xcodebuild -target <span class="hljs-variable">$&#123;target_Name&#125;</span> -configuration Release -sdk iphoneos<span class="hljs-comment">#复制头文件到目标文件夹</span>cp -R <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DEVICE_DIR_INCLUDE&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_DIR_Headers&#125;</span>&quot;</span><span class="hljs-comment">#去掉模拟器里的arm64</span>lipo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SIMULATOR_DIR_A&#125;</span>&quot;</span> -remove arm64 -output <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SIMULATOR_DIR_A&#125;</span>&quot;</span><span class="hljs-comment">#合成模拟器和真机.a包</span>lipo -create <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DEVICE_DIR_A&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SIMULATOR_DIR_A&#125;</span>&quot;</span> -output <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_DIR_A&#125;</span>&quot;</span><span class="hljs-comment">#打开目标文件夹</span>open <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span><span class="hljs-keyword">fi</span></code></pre></div><ul><li>具体详解可以查看<a href="https://www.jianshu.com/p/9cf90b9537fd">参考资料</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制位操作</title>
    <link href="/2021/09/23/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/09/23/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制位操作"><a href="#二进制位操作" class="headerlink" title="二进制位操作"></a>二进制位操作</h1><h6 id=""><a href="#" class="headerlink" title=""></a></h6><table><thead><tr><th align="center">符号</th><th align="center">描述</th><th align="left">运算规则</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td><td align="left">1&amp;1=1; 1&amp;0=0; 0&amp;1=0; 0&amp;0=0;</td></tr><tr><td align="center">|</td><td align="center">或</td><td align="left">1|1=1; 1|0=1; 0|1=1; 0|0=0;</td></tr><tr><td align="center">~</td><td align="center">非</td><td align="left">~0=1; ~1=0;</td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="left">1^1=0; 1^0=1; 0^1=1; 0^0=0;</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移</td><td align="left">高位丢弃，低位补 0</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td><td align="left">高位补 0，低位丢弃</td></tr></tbody></table><h2 id="常用位操作"><a href="#常用位操作" class="headerlink" title="常用位操作"></a>常用位操作</h2><ul><li>判断奇偶<ul><li>(x &amp; 1) == 1 —等价—&gt; (x % 2 == 1)</li><li>(x &amp; 1) == 0 —等价—&gt; (x % 2 == 0)</li></ul></li><li>x / 2 —等价—&gt; x &gt;&gt; 1</li><li>x &amp;= (x - 1) ——&gt; 把x最低位的二进制1给去掉</li><li>x &amp; -x —–&gt; 得到最低位的1</li><li>x &amp; ~x —–&gt; 0<h2 id="指定位置的位运算"><a href="#指定位置的位运算" class="headerlink" title="指定位置的位运算"></a>指定位置的位运算</h2></li><li>将x最右边的n位清零：x &amp; (~0 &lt;&lt; n)</li><li>获取x的第n位值：(x &gt;&gt; n) &amp; 1</li><li>获取x的第n位的幂值：x &amp; (1 &lt;&lt; n)</li><li>仅将第n位置为1：x | (1 &lt;&lt; n)</li><li>仅将第n位置为0：x &amp; (~(1 &lt;&lt; n))</li><li>将x最高位至第n位（含）清零：x &amp; ((1 &lt;&lt; n) - 1)</li><li>将第n位至第0位（含）清零：x &amp; (~((1 &lt;&lt; (n + 1)) - 1))</li></ul><h2 id="异或结合律"><a href="#异或结合律" class="headerlink" title="异或结合律"></a>异或结合律</h2><ul><li>x ^ 0 = x, x ^ x = 0</li><li>x ^ (~0) = ~x, x ^ (~x) = ~0</li><li>a ^ b = c, a ^ c = b, b ^ c = a</li></ul><p>(有没有点乘法结合律的意思)</p><ul><li>字母表示：(a ^ b) ^ c = a ^ (b ^ c)</li><li>图形表示：(☆ ^ ◇) ^ △ = ☆ ^ (◇ ^ △)<br>大小字母位运算技巧</li></ul><ul><li>大写变小写、小写变大写：字符 ^= 32 （大写 ^= 32 相当于 +32，小写 ^= 32 相当于 -32）</li><li>大写变小写、小写变小写：字符 |= 32 （大写 |= 32 就相当于+32，小写 |= 32 不变）</li><li>大写变大写、小写变大写：字符 &amp;= -33 （大写 ^= -33 不变，小写 ^= -33 相当于 -32）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 记录</title>
    <link href="/2021/09/18/LeetCode-%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/09/18/LeetCode-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-记录"><a href="#LeetCode-记录" class="headerlink" title="LeetCode 记录"></a>LeetCode 记录</h1><h2 id="二进制特性"><a href="#二进制特性" class="headerlink" title="二进制特性"></a>二进制特性</h2><h3 id="判断是否是-2-的幂次方"><a href="#判断是否是-2-的幂次方" class="headerlink" title="判断是否是 2 的幂次方"></a>判断是否是 2 的幂次方</h3><ul><li>n 是 2 进制的约数 （非进制方法）<div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">return</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>) % n == <span class="hljs-number">0</span></code></pre></div></li><li><code>-n</code> 与操作<ul><li>-n 是 n 二进制的补码 +1</li></ul></li></ul><div class="hljs code-wrapper"><pre><code class="hljs excel">return <span class="hljs-built_in">n</span> &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-built_in">n</span> &amp; -<span class="hljs-built_in">n</span>) == <span class="hljs-built_in">n</span>;</code></pre></div><ul><li><code>(n - 1)</code> 与操作<ul><li>(n-1)</li></ul></li></ul><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">return</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; (n &amp; (n - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFNetworking 常用方法</title>
    <link href="/2021/09/11/AFNetworking%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2021/09/11/AFNetworking%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="AFNetworking-常用方法"><a href="#AFNetworking-常用方法" class="headerlink" title="AFNetworking 常用方法"></a>AFNetworking 常用方法</h1><h2 id="pod-引入"><a href="#pod-引入" class="headerlink" title="pod 引入"></a>pod 引入</h2><p>Podfile</p><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">pod</span> <span class="hljs-string">&#x27;AFNetworking&#x27;</span>, <span class="hljs-string">&#x27;~&gt; 4.0&#x27;</span></code></pre></div><p>VC</p><div class="hljs code-wrapper"><pre><code class="hljs clean">#<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;AFNetworking.h&quot;</span></code></pre></div><h2 id="GET-方法获取并显示图片"><a href="#GET-方法获取并显示图片" class="headerlink" title="GET 方法获取并显示图片"></a>GET 方法获取并显示图片</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">UIImageView</span> *imageNetView = [<span class="hljs-built_in">UIImageView</span> new];[<span class="hljs-keyword">self</span>.view addSubview: imageNetView];<span class="hljs-keyword">self</span>.ImageView = imageNetView;imageNetView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];<span class="hljs-comment">/* 知识点1：设置AFN采用什么样的方式来解析服务器返回的数据*/</span> <span class="hljs-comment">//如果返回的是XML，那么告诉AFN，响应的时候使用XML的方式解析</span><span class="hljs-comment">// manager.responseSerializer = [AFXMLParserResponseSerializer serializer];</span> <span class="hljs-comment">//如果返回的就是二进制数据，那么采用默认二进制的方式来解析数据（HTTP）</span> manager.responseSerializer = [AFHTTPResponseSerializer serializer]; <span class="hljs-comment">//采用JSON的方式来解析数据</span> <span class="hljs-comment">//manager.responseSerializer = [AFJSONResponseSerializer serializer];</span>   <span class="hljs-comment">//指定接收信号为image/png</span> manager.responseSerializer.acceptableContentTypes = [<span class="hljs-built_in">NSSet</span> setWithObject:<span class="hljs-string">@&quot;image/png&quot;</span>];  [manager GET:<span class="hljs-string">@&quot;https://search-operate.cdn.bcebos.com/9dfdb7a4fa9dab231f5dd9b90dc91597.png&quot;</span> parameters:<span class="hljs-literal">nil</span> headers:<span class="hljs-literal">nil</span> progress:<span class="hljs-literal">nil</span> success:^(<span class="hljs-built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="hljs-keyword">id</span>  _Nullable responseObject) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@---%@&quot;</span>,[responseObject <span class="hljs-keyword">class</span>],responseObject);    <span class="hljs-keyword">self</span>.ImageView.image = [<span class="hljs-built_in">UIImage</span> imageWithData:responseObject]; <span class="hljs-comment">//NSData转UIimage</span>&#125; failure:^(<span class="hljs-built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="hljs-built_in">NSError</span> * _Nonnull error) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;请求失败--%@&quot;</span>,error);&#125;];</code></pre></div><h2 id="通过-URL-下载文件"><a href="#通过-URL-下载文件" class="headerlink" title="通过 URL 下载文件"></a>通过 URL 下载文件</h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSURLSessionDownloadTask</span>* downloadTask;- (<span class="hljs-keyword">void</span>)downloadFromURL:(<span class="hljs-built_in">NSString</span> *)downloadURL&#123;    <span class="hljs-comment">/* 创建网络下载对象 */</span>    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="hljs-built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];    <span class="hljs-comment">/* 下载地址 */</span>    <span class="hljs-built_in">NSURL</span> *url = [<span class="hljs-built_in">NSURL</span> URLWithString:downloadURL];    <span class="hljs-built_in">NSURLRequest</span> *request = [<span class="hljs-built_in">NSURLRequest</span> requestWithURL:url];    <span class="hljs-comment">/* 下载路径 */</span>    <span class="hljs-built_in">NSString</span> *path = [<span class="hljs-built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="hljs-string">@&quot;Documents/Announcement&quot;</span>]; <span class="hljs-comment">// 指定下载到沙盒下新建的Announcement文件夹中</span>    <span class="hljs-built_in">NSFileManager</span> *fileManager = [<span class="hljs-built_in">NSFileManager</span> defaultManager];    <span class="hljs-comment">// 创建文件夹</span>    <span class="hljs-built_in">BOOL</span> isDir = <span class="hljs-literal">NO</span>;    <span class="hljs-built_in">BOOL</span> existed = [fileManager fileExistsAtPath:path isDirectory:&amp;isDir]; <span class="hljs-comment">// fileExistsAtPath 判断一个文件或目录是否有效，isDirectory判断是否一个目录</span>    <span class="hljs-keyword">if</span> (!(isDir &amp;&amp; existed)) &#123;        <span class="hljs-comment">// 在Document目录下创建一个Announcement目录</span>        [fileManager createDirectoryAtPath:path withIntermediateDirectories:<span class="hljs-literal">YES</span> attributes:<span class="hljs-literal">nil</span> error:<span class="hljs-literal">nil</span>];    &#125;    <span class="hljs-built_in">NSString</span> *filePath = [path stringByAppendingPathComponent:url.lastPathComponent];    <span class="hljs-comment">/* 开始请求下载 */</span>    <span class="hljs-keyword">self</span>.downloadTask = [manager downloadTaskWithRequest:request progress:^(<span class="hljs-built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;下载进度：%.0f％，线程：%@&quot;</span>, downloadProgress.fractionCompleted * <span class="hljs-number">100</span>, [<span class="hljs-built_in">NSThread</span> currentThread]);        <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;            <span class="hljs-comment">//进行UI操作（刷新进度条），需要切换到主线</span>        &#125;);    &#125; destination:^<span class="hljs-built_in">NSURL</span> * _Nonnull(<span class="hljs-built_in">NSURL</span> * _Nonnull targetPath, <span class="hljs-built_in">NSURLResponse</span> * _Nonnull response) &#123;        <span class="hljs-comment">/* 设定下载到的位置 */</span>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSURL</span> fileURLWithPath:filePath];    &#125; completionHandler:^(<span class="hljs-built_in">NSURLResponse</span> * _Nonnull response, <span class="hljs-built_in">NSURL</span> * _Nullable filePath, <span class="hljs-built_in">NSError</span> * _Nullable error) &#123;        [[[<span class="hljs-built_in">UIAlertView</span> alloc] initWithTitle:<span class="hljs-string">@&quot;下载完成&quot;</span> message:<span class="hljs-keyword">self</span>.downloadTask.response.suggestedFilename delegate:<span class="hljs-keyword">self</span> cancelButtonTitle:<span class="hljs-string">@&quot;知道了&quot;</span> otherButtonTitles: <span class="hljs-literal">nil</span>] show]; <span class="hljs-comment">// 弹出下载完成弹窗提示</span>    &#125;];    [<span class="hljs-keyword">self</span>.downloadTask resume];&#125;</code></pre></div><h3 id="POST-登录用户名密码"><a href="#POST-登录用户名密码" class="headerlink" title="POST 登录用户名密码"></a>POST 登录用户名密码</h3><h4 id="ViewController-m"><a href="#ViewController-m" class="headerlink" title="ViewController.m"></a>ViewController.m</h4><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)post &#123;    <span class="hljs-comment">//1.创建会话管理者</span>    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];    manager.responseSerializer = [AFJSONResponseSerializer serializer];    manager.responseSerializer.acceptableContentTypes = [<span class="hljs-built_in">NSSet</span> setWithObjects:<span class="hljs-string">@&quot;application/json&quot;</span>,<span class="hljs-string">@&quot;text/html&quot;</span>,<span class="hljs-string">@&quot;text/javascript&quot;</span>,<span class="hljs-string">@&quot;text/json&quot;</span>,<span class="hljs-string">@&quot;text/plain&quot;</span>, <span class="hljs-literal">nil</span>];        <span class="hljs-comment">//2.创建参数</span>    <span class="hljs-built_in">NSMutableDictionary</span> *dict = [<span class="hljs-built_in">NSMutableDictionary</span> dictionary];    [dict setObject:<span class="hljs-string">@&quot;phoneAreaCode&quot;</span> forKey:<span class="hljs-string">@&quot;86&quot;</span>];    [dict setObject:<span class="hljs-string">@&quot;phoneNumber&quot;</span> forKey:<span class="hljs-string">@&quot;13766666666&quot;</span>];    [dict setObject:<span class="hljs-string">@&quot;password&quot;</span> forKey:<span class="hljs-string">@&quot;12345678&quot;</span>];    <span class="hljs-comment">//3.发送POST请求</span>    [manager POST:<span class="hljs-string">@&quot;http://cn.test.api.gethover.com/api/auth/login/phone&quot;</span>       parameters:dict headers:<span class="hljs-literal">nil</span> progress:<span class="hljs-literal">nil</span> success:^(<span class="hljs-built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="hljs-keyword">id</span>  _Nullable responseObject) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;请求成功%@---%@&quot;</span>,[responseObject <span class="hljs-keyword">class</span>], responseObject);    &#125; failure:^(<span class="hljs-built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="hljs-built_in">NSError</span> * _Nonnull error) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;请求失败---%@&quot;</span>,error);    &#125;];&#125;</code></pre></div><h4 id="解决POST-secure-connection-问题"><a href="#解决POST-secure-connection-问题" class="headerlink" title="解决POST secure connection 问题"></a>解决POST secure connection 问题</h4><p>报错信息:</p><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">Error</span> <span class="hljs-attribute">Domain</span>=NSURLErrorDomain <span class="hljs-attribute">Code</span>=-1022 <span class="hljs-string">&quot;The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.&quot;</span> UserInfo=&#123;<span class="hljs-attribute">NSLocalizedDescription</span>=The<span class="hljs-built_in"> resource </span>could <span class="hljs-keyword">not</span> be loaded because the App Transport Security<span class="hljs-built_in"> policy </span>requires the use of a secure connection<span class="hljs-built_in">..</span>.</code></pre></div><p>解决方法:<br>Info.plist<br>Information Property List -&gt; App Transport Security Settings -&gt;Allow Arbitrary Loads:YES</p><h2 id="实时监听网络"><a href="#实时监听网络" class="headerlink" title="实时监听网络"></a>实时监听网络</h2><div class="hljs code-wrapper"><pre><code class="hljs groovy">- (<span class="hljs-keyword">void</span>)AFNReachability&#123;    <span class="hljs-comment">//1.创建网络监听管理者</span>    AFNetworkReachabilityManager *manager = [AFNetworkReachabilityManager sharedManager];    <span class="hljs-comment">//2.监听网络状态的改变</span>    <span class="hljs-comment">/*</span><span class="hljs-comment">     AFNetworkReachabilityStatusUnknown          = 未知</span><span class="hljs-comment">     AFNetworkReachabilityStatusNotReachable     = 无网络</span><span class="hljs-comment">     AFNetworkReachabilityStatusReachableViaWWAN = 3G 4G</span><span class="hljs-comment">     AFNetworkReachabilityStatusReachableViaWiFi = WIFI</span><span class="hljs-comment">     */</span>    [manager <span class="hljs-attr">setReachabilityStatusChangeBlock:</span>^(AFNetworkReachabilityStatus status) &#123;        <span class="hljs-keyword">switch</span> (status) &#123;            <span class="hljs-keyword">case</span> <span class="hljs-attr">AFNetworkReachabilityStatusUnknown:</span>                NSLog(@<span class="hljs-string">&quot;未知&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-attr">AFNetworkReachabilityStatusNotReachable:</span>                NSLog(@<span class="hljs-string">&quot;无网络&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-attr">AFNetworkReachabilityStatusReachableViaWWAN:</span>                NSLog(@<span class="hljs-string">&quot;3G,4G&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-attr">AFNetworkReachabilityStatusReachableViaWiFi:</span>                NSLog(@<span class="hljs-string">&quot;WIFI&quot;</span>);                <span class="hljs-keyword">break</span>;            <span class="hljs-symbol">default:</span>                <span class="hljs-keyword">break</span>;        &#125;    &#125;];    <span class="hljs-comment">//3.开始监听</span>    [manager startMonitoring];&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OC 黑魔法</title>
    <link href="/2021/07/29/OC%20%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    <url>/2021/07/29/OC%20%E9%BB%91%E9%AD%94%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="黑魔法"><a href="#黑魔法" class="headerlink" title="黑魔法"></a>黑魔法</h1><p>使用 category 对类及其子类的某方法进行重写。可用于页面数量统计等需求。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>重写 viewWillAppear 方法</p><p>UIViewController+swizzling.h</p><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#import <span class="hljs-string">&quot;UIViewController+swizzling.h&quot;</span>#import &lt;objc/runtime.h&gt;@implementation ViewController (swizzling)+ (void)load &#123;<span class="hljs-comment">//    [super load];</span>    <span class="hljs-comment">// 通过class_getInstanceMethod()函数从当前对象中的method list获取method结构体，如果是类方法就使用class_getClassMethod()函数获取。</span>    Method fromMethod = <span class="hljs-keyword">class</span><span class="hljs-constructor">_getInstanceMethod([<span class="hljs-params">self</span> <span class="hljs-params">class</span>], @<span class="hljs-params">selector</span>(<span class="hljs-params">viewWillAppear</span>:)</span>);    Method toMethod = <span class="hljs-keyword">class</span><span class="hljs-constructor">_getInstanceMethod([<span class="hljs-params">self</span> <span class="hljs-params">class</span>], @<span class="hljs-params">selector</span>(<span class="hljs-params">swizzlingViewWillAppear</span>)</span>);    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  我们在这里使用class_addMethod()函数对Method Swizzling做了一层验证，如果self没有实现被交换的方法，会导致失败。</span><span class="hljs-comment">     *  而且self没有交换的方法实现，但是父类有这个方法，这样就会调用父类的方法，结果就不是我们想要的结果了。</span><span class="hljs-comment">     *  所以我们在这里通过class_addMethod()的验证，如果self实现了这个方法，class_addMethod()函数将会返回NO，我们就可以对其进行交换了。</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">class</span><span class="hljs-constructor">_addMethod([<span class="hljs-params">self</span> <span class="hljs-params">class</span>], @<span class="hljs-params">selector</span>(<span class="hljs-params">viewWillAppear</span>:)</span>, <span class="hljs-keyword">method</span><span class="hljs-constructor">_getImplementation(<span class="hljs-params">toMethod</span>)</span>, <span class="hljs-keyword">method</span><span class="hljs-constructor">_getTypeEncoding(<span class="hljs-params">toMethod</span>)</span>)) &#123;        <span class="hljs-keyword">method</span><span class="hljs-constructor">_exchangeImplementations(<span class="hljs-params">fromMethod</span>, <span class="hljs-params">toMethod</span>)</span>;    &#125;&#125;- (void)swizzlingViewWillAppear &#123;    NSString *str = <span class="hljs-literal">[NSS<span class="hljs-identifier">tring</span> <span class="hljs-identifier">stringWithFormat</span>:@&quot;%@&quot;, <span class="hljs-identifier">self</span>.<span class="hljs-identifier">class</span>]</span>;    <span class="hljs-comment">// 我们在这里加一个判断，将系统的UIViewController的对象剔除掉</span><span class="hljs-comment">//    if(![str containsString:@&quot;UI&quot;])&#123;</span>        <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;统计打点 : %@，%@&quot;</span>, <span class="hljs-params">self</span>.<span class="hljs-params">class</span>,<span class="hljs-params">str</span>)</span>;<span class="hljs-comment">//    &#125;</span>    <span class="hljs-literal">[<span class="hljs-identifier">self</span> <span class="hljs-identifier">swizzlingViewWillAppear</span>]</span>;    <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;End&quot;</span>)</span>;&#125;@<span class="hljs-keyword">end</span></code></pre></div><p>其中有一个有趣的点。我在 ViewController 中未实现 viewWillAppear，则会造成死循环，toMethod 反复调用自身。<br>最后排查，由于 if 中判断的语句（如下）执行后导致<br><code>class_addMethod([self class], @selector(viewWillAppear:), method_getImplementation(toMethod), method_getTypeEncoding(toMethod))</code></p><p>原因：当父类方法 0 调用了父类方法 1，子类未重写方法1，子类的 category 却对方法1进行了黑魔法，则category 中的 <code>class_addMethod</code> 和 <code>[self swizzlingViewWillAppear];</code> 配合，造成了死循环。</p><p>例如： 父类：UIViewContoller<br>    方法 0：viewDidLoad:<br>    方法 1：viewWillAppear:</p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断文件是否过期并自动删除</title>
    <link href="/2021/07/09/%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F%E5%B9%B6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/"/>
    <url>/2021/07/09/%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F%E5%B9%B6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="判断文件是否过期并自动删除"><a href="#判断文件是否过期并自动删除" class="headerlink" title="判断文件是否过期并自动删除"></a>判断文件是否过期并自动删除</h1><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)deleteExpiredLogFilesByDay:(<span class="hljs-keyword">int</span>)day &#123;<span class="hljs-comment">// 通过 NSFileManager 获取文件夹下的文件名列表</span>    <span class="hljs-built_in">NSArray</span> *fileList = [[<span class="hljs-built_in">NSFileManager</span> defaultManager] contentsOfDirectoryAtPath:<span class="hljs-keyword">self</span>.folderPath error:<span class="hljs-literal">nil</span>];  <span class="hljs-comment">// 遍历文件列表数组，逐个判断是否过期  </span>    [fileList enumerateObjectsUsingBlock:^(<span class="hljs-keyword">id</span> _Nonnull obj, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;        <span class="hljs-built_in">NSString</span> *filePath = [<span class="hljs-keyword">self</span>.folderPath stringByAppendingPathComponent:obj]; <span class="hljs-comment">// 拼接文件的绝对路径</span>        <span class="hljs-keyword">if</span>([<span class="hljs-keyword">self</span> fileIsOutofDate:day inPath:filePath])    [[<span class="hljs-built_in">NSFileManager</span> defaultManager] removeItemAtPath:filePath error:&amp;error];    &#125;];&#125;- (<span class="hljs-built_in">BOOL</span>)fileIsOutofDate:(<span class="hljs-built_in">NSInteger</span>)day inPath:(<span class="hljs-built_in">NSString</span> *)path &#123;    <span class="hljs-built_in">NSDictionary</span>* fileAttributes = [[<span class="hljs-built_in">NSFileManager</span> defaultManager] attributesOfItemAtPath:path error:<span class="hljs-literal">nil</span>];    <span class="hljs-built_in">NSDate</span>* fileCreationDate = [fileAttributes objectForKey:<span class="hljs-string">@&quot;NSFileCreationDate&quot;</span>];    <span class="hljs-built_in">NSDate</span>* today = [[<span class="hljs-built_in">NSDate</span> alloc]init];    <span class="hljs-comment">// 根据与今日时间间隔秒数的绝对值，判断文件是否过期</span>    <span class="hljs-keyword">if</span> (fabs([today timeIntervalSinceDate:fileCreationDate]) &gt; day*<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 上传文件到 FTP</title>
    <link href="/2021/06/30/iOS%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0FTP/"/>
    <url>/2021/06/30/iOS%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0FTP/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-上传文件到-FTP"><a href="#iOS-上传文件到-FTP" class="headerlink" title="iOS 上传文件到 FTP"></a>iOS 上传文件到 FTP</h1><p>针对 Objective-C FTP 功能的预研及 demo 的实现</p><h2 id="方法一：CFNetwork-framework"><a href="#方法一：CFNetwork-framework" class="headerlink" title="方法一：CFNetwork.framework"></a>方法一：CFNetwork.framework</h2><p>官方 framework，从 iOS 10 开始已废弃 FTP 相关 API，但仍可以使用<br><a href="https://developer.apple.com/documentation/CFNetwork">https://developer.apple.com/documentation/CFNetwork</a></p><h2 id="方法二：NSUrlSession"><a href="#方法二：NSUrlSession" class="headerlink" title="方法二：NSUrlSession"></a>方法二：NSUrlSession</h2><p>官方推荐的处理方法，只支持 FTP 下载，不支持上传，由于安全性原因，论坛中推荐使用 HTTPS 代替 FTP<br><a href="https://developer.apple.com/forums/thread/90930">https://developer.apple.com/forums/thread/90930</a></p><h2 id="使用手机搭建-FTP-服务器"><a href="#使用手机搭建-FTP-服务器" class="headerlink" title="使用手机搭建 FTP 服务器"></a>使用手机搭建 FTP 服务器</h2><h3 id="SimpleFTPClient-上传到服务器的APP"><a href="#SimpleFTPClient-上传到服务器的APP" class="headerlink" title="SimpleFTPClient(上传到服务器的APP)"></a>SimpleFTPClient(上传到服务器的APP)</h3><p>使用 CFNetwork.framework 将文件上传到 FTP</p><h3 id="XMFTPServer-master-搭建真机FTP服务器"><a href="#XMFTPServer-master-搭建真机FTP服务器" class="headerlink" title="XMFTPServer-master(搭建真机FTP服务器)"></a>XMFTPServer-master(搭建真机FTP服务器)</h3><p>使用其搭建FTP服务器，在 FileZilla 中更改文件夹访问权限，然后用 SimpleFTPClient 上传文件到 FTP</p><h3 id="Demo-下载"><a href="#Demo-下载" class="headerlink" title="Demo 下载"></a><a href="https://github.com/JSH-00/OCFTPUploadDemo">Demo 下载</a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 分享字符串、图片、文件</title>
    <link href="/2021/06/24/iOS%E5%88%86%E4%BA%AB%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81%E6%96%87%E4%BB%B6/"/>
    <url>/2021/06/24/iOS%E5%88%86%E4%BA%AB%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="UIActivityViewController"><a href="#UIActivityViewController" class="headerlink" title="UIActivityViewController"></a>UIActivityViewController</h2><p>分享数据：字符串、图片、多个文件</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSString</span> *path = [[<span class="hljs-built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="hljs-built_in">NSCachesDirectory</span>, <span class="hljs-built_in">NSUserDomainMask</span>, <span class="hljs-literal">YES</span>) objectAtIndex:<span class="hljs-number">0</span>] stringByAppendingPathComponent:<span class="hljs-string">@&quot;Logs&quot;</span>];<span class="hljs-built_in">NSError</span> *error = <span class="hljs-literal">nil</span>;<span class="hljs-built_in">NSArray</span> *arrayURLArray = [[<span class="hljs-built_in">NSFileManager</span> defaultManager] contentsOfDirectoryAtURL:[<span class="hljs-built_in">NSURL</span> URLWithString:path] includingPropertiesForKeys:[<span class="hljs-built_in">NSArray</span> array] options:<span class="hljs-number">0</span> error:&amp;error];<span class="hljs-keyword">if</span> (error) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;delete failed %@&quot;</span>,error);&#125;<span class="hljs-built_in">NSArray</span> *activityItems = arrayURLArray;<span class="hljs-comment">// 分享多个文件</span><span class="hljs-comment">//  NSData *data = [[NSData alloc] initWithContentsOfFile:path];</span><span class="hljs-comment">//  NSString *textToShare = @&quot;这是测试字符串002&quot;;</span><span class="hljs-comment">//  UIImage *imageToShare = [UIImage imageNamed:@&quot;动态(1)@2x.png&quot;];</span><span class="hljs-comment">//  分享的图片不能为空</span><span class="hljs-comment">//  NSArray *activityItems = @[data, textToShare, imageToShare]; // 分享其他类型</span>    <span class="hljs-built_in">UIActivityViewController</span> *activityVc = [[<span class="hljs-built_in">UIActivityViewController</span> alloc] initWithActivityItems:array applicationActivities:<span class="hljs-literal">nil</span>];[<span class="hljs-keyword">self</span> presentViewController:activityVc animated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];    activityVc.completionWithItemsHandler = ^(<span class="hljs-built_in">UIActivityType</span>  _Nullable activityType, <span class="hljs-built_in">BOOL</span> completed, <span class="hljs-built_in">NSArray</span> * _Nullable returnedItems, <span class="hljs-built_in">NSError</span> * _Nullable activityError) &#123;    <span class="hljs-keyword">if</span> (completed) &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;分享成功&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;分享取消&quot;</span>);    &#125;&#125;;</code></pre></div><h2 id="UIDocumentInteractionController"><a href="#UIDocumentInteractionController" class="headerlink" title="UIDocumentInteractionController"></a>UIDocumentInteractionController</h2><p>分享沙盒文件</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">PLLogTool</span> ()&lt;<span class="hljs-title">UIDocumentInteractionControllerDelegate</span>&gt;</span><span class="hljs-comment">// 一定要定义为 strong，否则 share 时会被 release</span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>)<span class="hljs-built_in">UIDocumentInteractionController</span>  *documentController;<span class="hljs-keyword">@end</span><span class="hljs-built_in">UIDocumentInteractionController</span> *docCtrl = [<span class="hljs-built_in">UIDocumentInteractionController</span> interactionControllerWithURL:[<span class="hljs-built_in">NSURL</span> fileURLWithPath:filePath]];_documentController = docCtrl; <span class="hljs-comment">//</span>docCtrl.delegate = <span class="hljs-keyword">self</span>;<span class="hljs-built_in">BOOL</span> canOpen = [docCtrl presentOpenInMenuFromRect:<span class="hljs-built_in">CGRectZero</span> inView:vc.view animated:<span class="hljs-literal">YES</span>];<span class="hljs-keyword">if</span> (!canOpen) &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;No program can open the selected file.&quot;</span>);&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URL Sheme 跳转到其他APP (苹果地图 &amp; 高德地图 &amp; phone)</title>
    <link href="/2021/06/14/%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%85%B6%E4%BB%96APP/"/>
    <url>/2021/06/14/%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%85%B6%E4%BB%96APP/</url>
    
    <content type="html"><![CDATA[<h2 id="苹果地图-amp-amp-高德地图"><a href="#苹果地图-amp-amp-高德地图" class="headerlink" title="苹果地图 &amp;&amp; 高德地图"></a>苹果地图 &amp;&amp; <a href="https://lbs.amap.com/api/amap-mobile/guide/ios/route">高德地图</a></h2><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)jumpToMap &#123;    <span class="hljs-comment">// 跳转到地图页面</span>    <span class="hljs-keyword">self</span>.mapActionController = [<span class="hljs-built_in">UIAlertController</span> alertControllerWithTitle:<span class="hljs-string">@&quot;选择跳转的地图&quot;</span> message:<span class="hljs-literal">nil</span> preferredStyle:<span class="hljs-built_in">UIAlertControllerStyleActionSheet</span>];    <span class="hljs-built_in">UIAlertAction</span> * phoneNum1 = [<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;苹果地图&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> * _Nonnull action) &#123;        <span class="hljs-comment">// 添加跳转到苹果地图</span>            &#125;];    <span class="hljs-built_in">UIAlertAction</span> * phoneNum2 = [<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;高德地图&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> * _Nonnull action) &#123;        <span class="hljs-comment">// 添加跳转到高德地图</span>        <span class="hljs-comment">// 路径规划 URL：iosamap://path?sourceApplication=applicationName&amp;sid=BGVIS1&amp;slat=39.92848272&amp;slon=116.39560823&amp;sname=A&amp;did=BGVIS2&amp;dlat=39.98848272&amp;dlon=116.47560823&amp;dname=B&amp;dev=0&amp;m=0&amp;t=0</span><span class="hljs-comment">//        NSString * urlString = [NSString stringWithFormat:@&quot;iosamap://path?sourceApplication=%@&amp;dlat=%@dlon=%@&amp;dname=B&amp;dev=0&amp;m=0&amp;t=0&quot;,@&quot;CityMi&quot;, @30.26211, @120.17571];</span>        <span class="hljs-built_in">NSString</span> * urlString = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;iosamap://navi?sourceApplication=%@&amp;backScheme=%@&amp;lat=%@&amp;lon=%@&amp;dev=0&amp;style=2&quot;</span>,<span class="hljs-string">@&quot;CityMi&quot;</span>,<span class="hljs-string">@&quot;MyCityMi&quot;</span>, @<span class="hljs-number">30.26211</span>, @<span class="hljs-number">120.17571</span>];        <span class="hljs-keyword">if</span> ([[<span class="hljs-built_in">UIApplication</span> sharedApplication] respondsToSelector:<span class="hljs-keyword">@selector</span>(openURL:options:completionHandler:)]) &#123;            [[<span class="hljs-built_in">UIApplication</span> sharedApplication] openURL:[<span class="hljs-built_in">NSURL</span> URLWithString:urlString] options:@&#123;&#125;                                     completionHandler:^(<span class="hljs-built_in">BOOL</span> success) &#123;                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Open 高德地图: %d&quot;</span>,success);            &#125;];        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-built_in">BOOL</span> success = [[<span class="hljs-built_in">UIApplication</span> sharedApplication] openURL:[<span class="hljs-built_in">NSURL</span> URLWithString:urlString]];            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Open 高德地图: %d&quot;</span>,success);        &#125;    &#125;];        <span class="hljs-built_in">UIAlertAction</span> * cancel = [<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;取消&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleCancel</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> * _Nonnull action) &#123;        [<span class="hljs-keyword">self</span>.mapActionController dismissViewControllerAnimated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];    &#125;];    [<span class="hljs-keyword">self</span>.mapActionController addAction:phoneNum1];    [<span class="hljs-keyword">self</span>.mapActionController addAction:phoneNum2];    [<span class="hljs-keyword">self</span>.mapActionController addAction:cancel];    [<span class="hljs-keyword">self</span> presentViewController:<span class="hljs-keyword">self</span>.mapActionController animated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];&#125;</code></pre></div><h2 id="打电话"><a href="#打电话" class="headerlink" title="打电话"></a>打电话</h2><div class="hljs code-wrapper"><pre><code class="hljs clojure">[[UIApplication   sharedApplication] openURL:[NSURL URLWithString:@<span class="hljs-string">&quot;tel://10010&quot;</span>] options:@&#123;&#125; completionHandler:nil]<span class="hljs-comment">;</span></code></pre></div><h2 id="从其他的APP跳转到本-APP"><a href="#从其他的APP跳转到本-APP" class="headerlink" title="从其他的APP跳转到本 APP"></a>从其他的APP跳转到本 APP</h2><h3 id="iOS-13-以前"><a href="#iOS-13-以前" class="headerlink" title="iOS 13 以前"></a>iOS 13 以前</h3><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-built_in">BOOL</span>)application:(<span class="hljs-built_in">UIApplication</span> *)app openURL:(<span class="hljs-built_in">NSURL</span> *)url options:(<span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">UIApplicationOpenURLOptionsKey</span>, <span class="hljs-keyword">id</span>&gt; *)options &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%s&quot;</span>,__func__);    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;options: %@&quot;</span>, options);    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;URL scheme:%@&quot;</span>, [url scheme]);    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;URL query: %@&quot;</span>, [url query]);        <span class="hljs-comment">// 提示并展示query</span>    <span class="hljs-built_in">UIAlertView</span> *alertView = [[<span class="hljs-built_in">UIAlertView</span> alloc] initWithTitle:<span class="hljs-string">@&quot;打开URL Scheme成功&quot;</span>                                                        message:[url query]                                                       delegate:<span class="hljs-literal">nil</span>                                              cancelButtonTitle:<span class="hljs-string">@&quot;确定&quot;</span>                                              otherButtonTitles:<span class="hljs-literal">nil</span>];    [alertView show];        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;&#125;</code></pre></div><h3 id="iOS-13-以后"><a href="#iOS-13-以后" class="headerlink" title="iOS 13 以后"></a>iOS 13 以后</h3><p>由于iOS13新增SceneDelegate，微信登录授权回调的时候会走SceneDelegate不会调用AppDelegate的openurl</p><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-operator">-</span>(void)scene:(<span class="hljs-type">UIScene</span><span class="hljs-operator">*</span>)sceneopenURLContexts:(<span class="hljs-type">NSSet</span> <span class="hljs-operator">*</span>)<span class="hljs-type">URLContextsAPI_AVAILABLE</span>(ios(<span class="hljs-number">13.0</span>))&#123;    <span class="hljs-type">NSSet</span><span class="hljs-operator">*</span><span class="hljs-keyword">set</span> <span class="hljs-operator">=</span> <span class="hljs-type">URLContexts</span>;    [setenumerateObjectsUsingBlock:<span class="hljs-operator">^</span>(id  _Nonnullobj,<span class="hljs-type">BOOL</span><span class="hljs-operator">*</span>_Nonnullstop) &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>)) &#123;            <span class="hljs-type">UIOpenURLContext</span><span class="hljs-operator">*</span>context <span class="hljs-operator">=</span> obj;            [<span class="hljs-type">WXApi</span> handleOpenURL:context.<span class="hljs-type">URL</span> delegate:<span class="hljs-keyword">self</span>];        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">// Fallback on earlier versions</span>        &#125;    &#125;];&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单工厂模式</title>
    <link href="/2021/05/13/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/05/13/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p><a href="https://github.com/JSH-00/OCSimpleFactoryPattern">Demo链接</a></p><h2 id="基本实现原理"><a href="#基本实现原理" class="headerlink" title="基本实现原理"></a>基本实现原理</h2><p>创建一个工厂，外界只需告诉工厂所需要的产品，工厂就会自动按照生产流程，返回产品给外界。</p><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><p>对外暴露创建商品的方法，入参为商品类型，返回值为遵循产品协议的 id 指针。<br>方法内部处理，判断商品类型对应的枚举类型，创建对应的商品并返回指针。</p><h3 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h3><p>定义产品拥有的属性及方法</p><h3 id="用枚举类型区分工厂内不同的产品"><a href="#用枚举类型区分工厂内不同的产品" class="headerlink" title="用枚举类型区分工厂内不同的产品"></a>用枚举类型区分工厂内不同的产品</h3><p>把枚举封装成 class 解耦</p><h3 id="具体产品"><a href="#具体产品" class="headerlink" title="具体产品"></a>具体产品</h3><p>遵循 protocol 实现方法和属性，属性用 synthesize 定义<br> <code>@synthesize numberA = _numberA;</code></p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>import Factory class，实现 Factory create 方法。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UIAlertController 弹窗</title>
    <link href="/2021/03/19/%20UIAlertController%20%E5%BC%B9%E7%AA%97/"/>
    <url>/2021/03/19/%20UIAlertController%20%E5%BC%B9%E7%AA%97/</url>
    
    <content type="html"><![CDATA[<h1 id="UIAlertController-弹窗"><a href="#UIAlertController-弹窗" class="headerlink" title="UIAlertController 弹窗"></a>UIAlertController 弹窗</h1><p>通过 UIAlertController 弹出弹窗（iOS 8 以上）</p><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;ViewController.h&quot;</span></span><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> ()</span><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>)<span class="hljs-built_in">UIAlertController</span> *alertController;<span class="hljs-keyword">@end</span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;    [<span class="hljs-keyword">super</span> viewDidLoad];    [<span class="hljs-keyword">self</span> actionSheet];&#125;- (<span class="hljs-keyword">void</span>)touchesBegan:(<span class="hljs-built_in">NSSet</span>&lt;<span class="hljs-built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="hljs-built_in">UIEvent</span> *)event &#123;    <span class="hljs-comment">// 点击屏幕弹出 Alert</span>    [<span class="hljs-keyword">self</span> presentViewController:<span class="hljs-keyword">self</span>.alertController animated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];&#125;- (<span class="hljs-keyword">void</span>)actionSheet &#123;        <span class="hljs-comment">// 初始化（Alert样式）</span>    <span class="hljs-built_in">UIAlertController</span> *alertController = [<span class="hljs-built_in">UIAlertController</span> alertControllerWithTitle:<span class="hljs-string">@&quot;温馨提示&quot;</span> message:<span class="hljs-string">@&quot;您正在使用 UIAlertController&quot;</span> preferredStyle:<span class="hljs-built_in">UIAlertControllerStyleAlert</span>];    <span class="hljs-comment">// 初始化（Sheet样式）</span><span class="hljs-comment">//    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;温馨提示&quot; message:@&quot;您正在使用 UIAlertController&quot; preferredStyle:UIAlertControllerStyleActionSheet];</span>    <span class="hljs-keyword">self</span>.alertController = alertController;        <span class="hljs-comment">//创建action 添加到alertController上 可根据UIAlertActionStyleDefault创建不通的alertAction</span>    <span class="hljs-built_in">UIAlertAction</span> *action1 = [<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;确定&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> *action) &#123;        <span class="hljs-comment">//回调</span>        <span class="hljs-comment">// 模态视图，使用dismiss 隐藏</span>        [<span class="hljs-keyword">self</span>.alertController dismissViewControllerAnimated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];            &#125;];    <span class="hljs-built_in">UIAlertAction</span> *action2 = [<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;确定2&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> *action) &#123;        <span class="hljs-comment">//回调</span>        <span class="hljs-comment">// 模态视图，使用dismiss 隐藏</span>        [<span class="hljs-keyword">self</span>.alertController dismissViewControllerAnimated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];            &#125;];    <span class="hljs-built_in">UIAlertAction</span> *action3 = [<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;取消&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleCancel</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> *action) &#123;        [<span class="hljs-keyword">self</span>.alertController dismissViewControllerAnimated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];            &#125;];            <span class="hljs-comment">// 将alertAction 添加到 alertController</span>    [alertController addAction:action1];    [alertController addAction:action2];    [alertController addAction:action3];&#125;<span class="hljs-keyword">@end</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译错误 Duplicate symbols for architecture x86_64</title>
    <link href="/2021/03/19/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%20Duplicate%20symbols%20for%20architecture%20x86_64/"/>
    <url>/2021/03/19/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%20Duplicate%20symbols%20for%20architecture%20x86_64/</url>
    
    <content type="html"><![CDATA[<h1 id="编译错误-Duplicate-symbols-for-architecture-x86-64"><a href="#编译错误-Duplicate-symbols-for-architecture-x86-64" class="headerlink" title="编译错误 Duplicate symbols for architecture x86_64"></a>编译错误 Duplicate symbols for architecture x86_64</h1><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><div class="hljs code-wrapper"><pre><code class="hljs awk">......<span class="hljs-regexp">/*Objects-normal/</span>x86_64/XXXX.old: <span class="hljs-number">415</span> duplicate symbols <span class="hljs-keyword">for</span> architecture x86_64clang: error: linker command failed with <span class="hljs-keyword">exit</span> code <span class="hljs-number">1</span> (use -v to see invocation)</code></pre></div><blockquote><p>翻译：<br>错误信息是在链接 XXXX.o 时出错<br>ld: 在 x86-64 架构下有 415 个重复符号</p></blockquote><h2 id="可能触发该问题的两种情况"><a href="#可能触发该问题的两种情况" class="headerlink" title="可能触发该问题的两种情况"></a>可能触发该问题的两种情况</h2><h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><ul><li>触发原因：<br>由于重复导入了某文件项目中重复导入了某些文件, 一般在导入三方库时可能会重复导入</li><li>解决办法：<br>只需要在文件目录中查找到重复导入的文件，删掉即可。或将整个三方库删除掉，重新拖入，或者用 cocopods install</li></ul><h3 id="情况二："><a href="#情况二：" class="headerlink" title="情况二："></a>情况二：</h3><ul><li>触发原因：<br>在项目的某些地方需要 <code>#import&quot;XXXX.h&quot;</code> 而用了 <code>#import&quot;XXXX.m&quot;</code>。</li><li>解决办法：<br>核对项目</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UIScrollView 向下偏移</title>
    <link href="/2021/03/15/UIScrollView%20%E5%90%91%E4%B8%8B%E5%81%8F%E7%A7%BB/"/>
    <url>/2021/03/15/UIScrollView%20%E5%90%91%E4%B8%8B%E5%81%8F%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="UIScrollView-向下偏移"><a href="#UIScrollView-向下偏移" class="headerlink" title="UIScrollView 向下偏移"></a>UIScrollView 向下偏移</h1><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ul><li>当 scrollView 是其父视图上的第一个子视图，且 navigationBar 不隐藏的情况下，添加到 scrollView 里的视图，都会默认下移64个像素。</li><li>继承 UIScrollview 的 UITableview 也会出现这个问题。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">11.0</span>, <span class="hljs-operator">*</span>))&#123;    <span class="hljs-keyword">self</span>.automaticallyAdjustsScrollViewInsets <span class="hljs-operator">=</span> <span class="hljs-type">NO</span>;&#125;</code></pre></div><p>参考：<a href="https://blog.csdn.net/u013196181/article/details/51131625">https://blog.csdn.net/u013196181/article/details/51131625</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 忽略文件</title>
    <link href="/2021/03/13/iOS%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6/"/>
    <url>/2021/03/13/iOS%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-忽略文件"><a href="#Git-忽略文件" class="headerlink" title="Git 忽略文件"></a>Git 忽略文件</h1><p>ios 忽略文件 .gitignore</p><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Created by https://www.gitignore.io/api/xcode</span><span class="hljs-comment">### Xcode ###</span><span class="hljs-comment"># Xcode</span><span class="hljs-comment">#</span><span class="hljs-comment"># gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore</span><span class="hljs-comment">## Build generated</span>build/DerivedData/<span class="hljs-comment">## Various settings</span>*<span class="hljs-string">.pbxuser</span>!default.pbxuser*<span class="hljs-string">.mode1v3</span>!default.mode1v3*<span class="hljs-string">.mode2v3</span>!default.mode2v3*<span class="hljs-string">.perspectivev3</span>!default.perspectivev3xcuserdata/<span class="hljs-comment">## Other</span>*<span class="hljs-string">.moved-aside</span>*<span class="hljs-string">.xccheckout</span>*<span class="hljs-string">.xcscmblueprint</span><span class="hljs-comment">### Xcode Patch ###</span>*<span class="hljs-string">.xcodeproj/</span>*!*<span class="hljs-string">.xcodeproj/project.pbxproj</span>!*<span class="hljs-string">.xcodeproj/xcshareddat</span>!*<span class="hljs-string">/xcuserdata/admin.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlista/</span>!*<span class="hljs-string">.xcworkspace/contents.xcworkspacedata</span>/*<span class="hljs-string">.gcno</span><span class="hljs-comment"># End of https://www.gitignore.io/api/xcode</span><span class="hljs-comment"># Created by https://www.gitignore.io/api/cocoapods</span><span class="hljs-comment">### CocoaPods ###</span><span class="hljs-comment">## CocoaPods GitIgnore Template</span><span class="hljs-comment"># CocoaPods - Only use to conserve bandwidth / Save time on Pushing</span><span class="hljs-comment">#           - Also handy if you have a large number of dependant pods</span><span class="hljs-comment">#           - AS PER https://guides.cocoapods.org/using/using-cocoapods.html NEVER IGNORE THE LOCK FILE</span>Pods/Podfile.lock<span class="hljs-string">.DS_Store</span><span class="hljs-comment"># End of https://www.gitignore.io/api/cocoapods</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OC 中点语法 . 和 -&gt; 的区别</title>
    <link href="/2021/02/22/OC%E4%B8%AD%E7%82%B9%E8%AF%AD%E6%B3%95%20.%20%E5%92%8C%20-%3E%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/02/22/OC%E4%B8%AD%E7%82%B9%E8%AF%AD%E6%B3%95%20.%20%E5%92%8C%20-%3E%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="OC-中点语法-和-gt-的区别"><a href="#OC-中点语法-和-gt-的区别" class="headerlink" title="OC 中点语法 . 和 -&gt; 的区别"></a>OC 中点语法 . 和 -&gt; 的区别</h1><ol><li><code>-&gt;</code> 用于访问成员变量，但成员变量默认受保护，所以常常报错，手动设为public即可解决。</li><li><code>.</code> 用于访问类的属性，本质是调用setter、getter方法。</li></ol><h2 id="成员变量不实现-getter-和-setter-方法"><a href="#成员变量不实现-getter-和-setter-方法" class="headerlink" title="成员变量不实现 getter 和 setter 方法"></a>成员变量不实现 getter 和 setter 方法</h2><ul><li>定义时需要使用 <code>@public</code> 才能被外部访问</li><li>外部使用 <code>-&gt;</code> 用于访问成员变量</li></ul><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-comment">// Test.h</span><span class="hljs-variable">@interface</span> <span class="hljs-attribute">Test </span>: NSObject&#123;<span class="hljs-variable">@public</span>    int temp;&#125;<span class="hljs-variable">@end</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-comment">// mian 函数</span>    <span class="hljs-keyword">Test</span> *<span class="hljs-keyword">test</span> = [[<span class="hljs-keyword">Test</span> alloc]init];    <span class="hljs-keyword">test</span>-&gt;temp = 100; <span class="hljs-comment">// 注释 @public 则 temp 无法访问</span>    NSLog(@<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">test</span>-&gt;temp);</code></pre></div><h2 id="成员变量实现-getter-和-setter-方法"><a href="#成员变量实现-getter-和-setter-方法" class="headerlink" title="成员变量实现 getter 和 setter 方法"></a>成员变量实现 getter 和 setter 方法</h2><ul><li>外部使用 <code>.</code> 访问 getter 和 setter 方法，类内部使用 <code>-&gt;</code></li></ul><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-comment">// Test.h</span>@<span class="hljs-keyword">interface</span> <span class="hljs-symbol">Test</span> : <span class="hljs-symbol">NSObject</span>&#123;    <span class="hljs-built_in">int</span> temp;&#125;- (<span class="hljs-built_in">void</span>)setTemp:(<span class="hljs-built_in">int</span>)temp;- (<span class="hljs-built_in">int</span>)temp;@end</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-comment">// Test.m</span><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Test</span></span>-(<span class="hljs-keyword">void</span>)setTemp:(<span class="hljs-keyword">int</span>)temp&#123;    <span class="hljs-keyword">self</span>-&gt;temp = temp;&#125;-(<span class="hljs-keyword">int</span>)temp&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>-&gt;temp;&#125;<span class="hljs-keyword">@end</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-comment">// mian 函数</span>    <span class="hljs-keyword">Test</span> *<span class="hljs-keyword">test</span> = [[<span class="hljs-keyword">Test</span> alloc]init];    <span class="hljs-keyword">test</span>.temp = 100;    NSLog(@<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">test</span>.temp);</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设置 UIButton 文字与图片距离</title>
    <link href="/2021/02/22/%E8%AE%BE%E7%BD%AE%20UIButton%20%E6%96%87%E5%AD%97%E4%B8%8E%E5%9B%BE%E7%89%87%E8%B7%9D%E7%A6%BB/"/>
    <url>/2021/02/22/%E8%AE%BE%E7%BD%AE%20UIButton%20%E6%96%87%E5%AD%97%E4%B8%8E%E5%9B%BE%E7%89%87%E8%B7%9D%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="设置UIButton图片大小、文字与图片距离"><a href="#设置UIButton图片大小、文字与图片距离" class="headerlink" title="设置UIButton图片大小、文字与图片距离"></a>设置UIButton图片大小、文字与图片距离</h1><div class="hljs code-wrapper"><pre><code class="hljs awk">CGFloat padding = <span class="hljs-number">0</span>; <span class="hljs-regexp">//</span> 设置图片与文字的距离CGFloat zoom = <span class="hljs-number">8</span>; <span class="hljs-regexp">//</span> 设置图片缩放大小btn.titleEdgeInsets = UIEdgeInsetsMake(<span class="hljs-number">0</span>, padding<span class="hljs-regexp">/2, 0, -padding/</span><span class="hljs-number">2</span>);btn.imageEdgeInsets = UIEdgeInsetsMake(zoom, -padding<span class="hljs-regexp">/2 - 16, zoom, padding/</span><span class="hljs-number">2</span>);[btn.imageView setContentMode:UIViewContentModeScaleAspectFit]; <span class="hljs-regexp">//</span> 使图片缩放后不变形btn.adjustsImageWhenHighlighted = NO; <span class="hljs-regexp">//</span> 点击后button图片不变灰</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GCD dispatch</title>
    <link href="/2021/02/01/GCD%20dispatch/"/>
    <url>/2021/02/01/GCD%20dispatch/</url>
    
    <content type="html"><![CDATA[<h1 id="GCD-dispatch"><a href="#GCD-dispatch" class="headerlink" title="GCD dispatch"></a>GCD dispatch</h1><h2 id="同步-amp-amp-异步-amp-amp-串型-amp-amp-并发"><a href="#同步-amp-amp-异步-amp-amp-串型-amp-amp-并发" class="headerlink" title="同步 &amp;&amp; 异步 &amp;&amp; 串型 &amp;&amp; 并发"></a>同步 &amp;&amp; 异步 &amp;&amp; 串型 &amp;&amp; 并发</h2><ul><li>同步：没有开启新线程的能力<ul><li>所有任务都在 begin 和 end 之间执行</li><li>串型和并发效果一样，都不开启新线程</li></ul></li><li>异步：有开启新线程的能力，但是否开启视情况而定<ul><li>若加入串型，所有任务都在 begin 和 end 之后逐个执行</li><li>若加入并发，所有任务都在 begin 之后执行</li></ul></li><li>串型：加入队列的逐个执行</li><li>并发：需要与异步配合，才能开启新线程并发执行。否则加入的队列逐个执行</li></ul><h2 id="同步执行-并发队列"><a href="#同步执行-并发队列" class="headerlink" title="同步执行 + 并发队列"></a>同步执行 + 并发队列</h2><ul><li>无法开启新线程</li><li>任务加入队列后直接执行，然后再执行后面内容</li></ul><h2 id="异步执行-并发队列"><a href="#异步执行-并发队列" class="headerlink" title="异步执行 + 并发队列"></a>异步执行 + 并发队列</h2><ul><li>可以开启多个线程</li><li>任务加入队列后直接执行，可以多个任务同时执行</li></ul><h2 id="异步执行-并发队列-1"><a href="#异步执行-并发队列-1" class="headerlink" title="异步执行 + 并发队列"></a>异步执行 + 并发队列</h2><p>（类似于同步执行 + 并发队列）</p><ul><li>无法开启新线程</li><li>任务加入队列后直接执行，然后再执行后面内容</li></ul><h2 id="dispatch-barrier"><a href="#dispatch-barrier" class="headerlink" title="dispatch_barrier"></a>dispatch_barrier</h2><ul><li>控制某些任务全部执行完成后再进行下面的任务</li><li>适用场景：异步 + 并发</li></ul><div class="hljs code-wrapper"><pre><code class="hljs awk">dispatch_barrier_async(queue, ^&#123;        <span class="hljs-regexp">//</span> 追加任务 barrier        [NSThread sleepForTimeInterval:<span class="hljs-number">5</span>];              <span class="hljs-regexp">//</span> 模拟耗时操作        NSLog(@<span class="hljs-string">&quot;barrier---%@&quot;</span>,[NSThread currentThread]);<span class="hljs-regexp">//</span> 打印当前线程    &#125;)</code></pre></div><h2 id="dispatch-after"><a href="#dispatch-after" class="headerlink" title="dispatch_after"></a>dispatch_after</h2><ul><li>加入主队列并准备 2 秒后执行。</li><li>若 2s 后主线程未占用，则直接执行。若占用，则等待空闲时立即执行。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs reasonml">dispatch<span class="hljs-constructor">_after(<span class="hljs-params">dispatch_time</span>(DISPATCH_TIME_NOW, (<span class="hljs-params">int64_t</span>)</span>(<span class="hljs-number">2.0</span><span class="hljs-operator"> * </span>NSEC_PER_SEC)), dispatch<span class="hljs-constructor">_get_main_queue()</span>, ^&#123;     <span class="hljs-comment">// 2.0 秒后异步追加任务代码到主队列，并开始执行</span>     <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;after---%@&quot;</span>,[NSThread <span class="hljs-params">currentThread</span>])</span>;  <span class="hljs-comment">// 打印当前线程</span> &#125;);</code></pre></div><h2 id="dispatch-apply"><a href="#dispatch-apply" class="headerlink" title="dispatch_apply"></a>dispatch_apply</h2><ul><li>快速迭代方法。</li><li>相当于 for 循环，建议用在并发队列。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs reasonml">dispatch<span class="hljs-constructor">_apply(6, <span class="hljs-params">queue</span>, ^(<span class="hljs-params">size_t</span> <span class="hljs-params">index</span>)</span> &#123;    <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;%zd---%@&quot;</span>,<span class="hljs-params">index</span>, [NSThread <span class="hljs-params">currentThread</span>])</span>;&#125;);</code></pre></div><h2 id="dispatch-group"><a href="#dispatch-group" class="headerlink" title="dispatch_group"></a>dispatch_group</h2><h3 id="dispatch-group-notify"><a href="#dispatch-group-notify" class="headerlink" title="dispatch_group_notify"></a>dispatch_group_notify</h3><ul><li>把任务都异步并发的加入 group 中，等前面的都执行完才执行 dispatch_group_notify</li></ul><div class="hljs code-wrapper"><pre><code class="hljs reasonml">- (void)groupNotify &#123;    <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;currentThread---%@&quot;</span>,[NSThread <span class="hljs-params">currentThread</span>])</span>;  <span class="hljs-comment">// 打印当前线程</span>    <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;group---begin&quot;</span>)</span>;        dispatch_group_t group =  dispatch<span class="hljs-constructor">_group_create()</span>;        dispatch<span class="hljs-constructor">_group_async(<span class="hljs-params">group</span>, <span class="hljs-params">dispatch_get_global_queue</span>(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)</span>, ^&#123;        <span class="hljs-comment">// 追加任务 1</span>        <span class="hljs-literal">[NST<span class="hljs-identifier">hread</span> <span class="hljs-identifier">sleepForTimeInterval</span>:<span class="hljs-number">2</span>]</span>;              <span class="hljs-comment">// 模拟耗时操作</span>        <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;1---%@&quot;</span>,[NSThread <span class="hljs-params">currentThread</span>])</span>;      <span class="hljs-comment">// 打印当前线程</span>    &#125;);        dispatch<span class="hljs-constructor">_group_async(<span class="hljs-params">group</span>, <span class="hljs-params">dispatch_get_global_queue</span>(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)</span>, ^&#123;        <span class="hljs-comment">// 追加任务 2</span>        <span class="hljs-literal">[NST<span class="hljs-identifier">hread</span> <span class="hljs-identifier">sleepForTimeInterval</span>:<span class="hljs-number">2.5</span>]</span>;              <span class="hljs-comment">// 模拟耗时操作</span>        <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;2---%@&quot;</span>,[NSThread <span class="hljs-params">currentThread</span>])</span>;      <span class="hljs-comment">// 打印当前线程</span>    &#125;);        dispatch<span class="hljs-constructor">_group_notify(<span class="hljs-params">group</span>, <span class="hljs-params">dispatch_get_main_queue</span>()</span>, ^&#123;        <span class="hljs-comment">// 等前面的异步任务 1、任务 2 都执行完毕后，回到主线程执行下边任务</span>        <span class="hljs-literal">[NST<span class="hljs-identifier">hread</span> <span class="hljs-identifier">sleepForTimeInterval</span>:<span class="hljs-number">2</span>]</span>;              <span class="hljs-comment">// 模拟耗时操作</span>        <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;3---%@&quot;</span>,[NSThread <span class="hljs-params">currentThread</span>])</span>;      <span class="hljs-comment">// 打印当前线程</span>        <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;group---end&quot;</span>)</span>;    &#125;);&#125;</code></pre></div><h3 id="dispatch-group-enter-dispatch-group-leave"><a href="#dispatch-group-enter-dispatch-group-leave" class="headerlink" title="dispatch_group_enter dispatch_group_leave"></a>dispatch_group_enter dispatch_group_leave</h3><ul><li>通过 dispatch_group_enter、dispatch_group_leave 控制执行，在group内部会有一个计数器，调用dispatch_group_enter后，该计数器会 +1，调用 dispatch_group_leave后该计数器会 -1，当计数器为 0 时，则主动调用dispatch_group_notify 的 block，否则一直处于等待中。（其他任务开异步加入 queue 即可，不用加入 group）</li></ul><div class="hljs code-wrapper"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)groupEnterAndLeave &#123;    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;currentThread---%@&quot;</span>,[<span class="hljs-built_in">NSThread</span> currentThread]);  <span class="hljs-comment">// 打印当前线程</span>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;group---begin&quot;</span>);        dispatch_group_t group = dispatch_group_create();    <span class="hljs-built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>);    dispatch_group_enter(group);    <span class="hljs-built_in">dispatch_async</span>(queue, ^&#123;        <span class="hljs-comment">// 追加任务 1</span>        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];              <span class="hljs-comment">// 模拟耗时操作</span>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>,[<span class="hljs-built_in">NSThread</span> currentThread]);      <span class="hljs-comment">// 打印当前线程</span>        dispatch_group_leave(group);    &#125;);        dispatch_group_enter(group);    <span class="hljs-built_in">dispatch_async</span>(queue, ^&#123;        <span class="hljs-comment">// 追加任务 2</span>        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];              <span class="hljs-comment">// 模拟耗时操作</span>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2---%@&quot;</span>,[<span class="hljs-built_in">NSThread</span> currentThread]);      <span class="hljs-comment">// 打印当前线程</span>                dispatch_group_leave(group);    &#125;);        dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;        <span class="hljs-comment">// 等前面的异步操作都执行完毕后，回到主线程.</span>        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];              <span class="hljs-comment">// 模拟耗时操作</span>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3---%@&quot;</span>,[<span class="hljs-built_in">NSThread</span> currentThread]);      <span class="hljs-comment">// 打印当前线程</span>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;group---end&quot;</span>);    &#125;);&#125;</code></pre></div><h2 id="dispatch-semaphore-信号"><a href="#dispatch-semaphore-信号" class="headerlink" title="dispatch_semaphore 信号"></a>dispatch_semaphore 信号</h2><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 保证线程间同步</span><span class="hljs-keyword">dispatch_queue_t</span> que = dispatch_queue_create(<span class="hljs-string">&quot;com.vc.downloadQueue&quot;</span>, DISPATCH_QUEUE_SERIAL);<span class="hljs-comment">// 设置信号量为 3</span><span class="hljs-keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="hljs-number">3</span>); <span class="hljs-comment">//</span>dispatch_async(que, ^&#123;    <span class="hljs-comment">// 若 signal 0，则 wait forever 否则  signal - 1 并执行后面的代码</span>    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);&#125;);<span class="hljs-comment">// singal + 1</span>dispatch_semaphore_signal(self.semaphore);<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 为线程加锁</span><span class="hljs-keyword">dispatch_queue_t</span> <span class="hljs-built_in">queue</span> = dispatch_get_global_queue(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="hljs-number">1</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;     dispatch_async(<span class="hljs-built_in">queue</span>, ^&#123;          <span class="hljs-comment">// 相当于加锁</span>         dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);          NSLog(@<span class="hljs-string">&quot;i = %zd semaphore = %@&quot;</span>, i, semaphore);          <span class="hljs-comment">// 相当于解锁</span>          dispatch_semaphore_signal(semaphore);      &#125;);&#125;</code></pre></div><h2 id="主线程获取方法"><a href="#主线程获取方法" class="headerlink" title="主线程获取方法"></a>主线程获取方法</h2><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">dispatch_queue_t</span> <span class="hljs-built_in">queue</span> = dispatch_get_main_queue();</code></pre></div><h2 id="获取默认并发队列方法"><a href="#获取默认并发队列方法" class="headerlink" title="获取默认并发队列方法"></a>获取默认并发队列方法</h2><ul><li>调用时，先执行 dispatch ，后执行 end</li></ul><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">dispatch_queue_t</span> <span class="hljs-built_in">queue</span> = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>);</code></pre></div><p>参考：<a href="https://juejin.cn/post/6844903566398717960#heading-17">iOS多线程：『GCD』详尽总结</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UISegmentedControl</title>
    <link href="/2021/02/01/UISegmentedControl/"/>
    <url>/2021/02/01/UISegmentedControl/</url>
    
    <content type="html"><![CDATA[<h1 id="UISegmentedControl"><a href="#UISegmentedControl" class="headerlink" title="UISegmentedControl"></a>UISegmentedControl</h1><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">UISegmentedControl</span> *topTitle = [[<span class="hljs-built_in">UISegmentedControl</span> alloc]initWithItems:@[<span class="hljs-string">@&quot;推荐&quot;</span>, <span class="hljs-string">@&quot;附近&quot;</span>]];topTitle.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-keyword">self</span>.view.bounds.size.width * <span class="hljs-number">0.25</span>, <span class="hljs-keyword">self</span>.view.safeAreaInsets.top +<span class="hljs-number">44</span>, <span class="hljs-keyword">self</span>.view.bounds.size.width * <span class="hljs-number">0.5</span>, <span class="hljs-number">30</span>);[topTitle setBackgroundColor:[<span class="hljs-built_in">UIColor</span> greenColor]];[<span class="hljs-keyword">self</span>.view addSubview:topTitle];<span class="hljs-comment">// 设置文字选中样式</span><span class="hljs-built_in">NSMutableDictionary</span> *attDicSelected = [<span class="hljs-built_in">NSMutableDictionary</span> dictionary];attDicSelected[<span class="hljs-built_in">NSFontAttributeName</span>] = [<span class="hljs-built_in">UIFont</span> boldSystemFontOfSize:<span class="hljs-number">16</span>];attDicSelected[<span class="hljs-built_in">NSForegroundColorAttributeName</span>] = [<span class="hljs-built_in">UIColor</span> greenColor];[topTitle setTitleTextAttributes:attDicSelected forState:<span class="hljs-built_in">UIControlStateSelected</span>];<span class="hljs-comment">// 设置文字未选中样式</span><span class="hljs-built_in">NSMutableDictionary</span> *attDicNormal = [<span class="hljs-built_in">NSMutableDictionary</span> dictionary];attDicNormal[<span class="hljs-built_in">NSFontAttributeName</span>] = [<span class="hljs-built_in">UIFont</span> boldSystemFontOfSize:<span class="hljs-number">16</span>];attDicNormal[<span class="hljs-built_in">NSForegroundColorAttributeName</span>] = [<span class="hljs-built_in">UIColor</span> whiteColor];[topTitle setTitleTextAttributes:attDicNormal forState:<span class="hljs-built_in">UIControlStateNormal</span>]; <span class="hljs-comment">// 事件</span> topTitle.selectedSegmentIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 默认光标所在位置</span> [titleV addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(titleViewChange:) forControlEvents:<span class="hljs-built_in">UIControlEventValueChanged</span>];</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>OC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAC 设置代理方法</title>
    <link href="/2021/01/18/MAC%20%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <url>/2021/01/18/MAC%20%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="MAC-设置代理方法"><a href="#MAC-设置代理方法" class="headerlink" title="MAC 设置代理方法"></a>MAC 设置代理方法</h1><p>mac 使用命令行更换代理。可根据此设计脚本，实现一键设置代理，减少开启/关闭代理流程。</p><h2 id="预览-networksetup-基本功能"><a href="#预览-networksetup-基本功能" class="headerlink" title="预览 networksetup 基本功能"></a>预览 networksetup 基本功能</h2><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">networksetup -h</span></code></pre></div><h2 id="查看当前-net-work-services"><a href="#查看当前-net-work-services" class="headerlink" title="查看当前 net work services"></a>查看当前 net work services</h2><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">networksetup -listallnetworkservices</span></code></pre></div><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>开启</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> networksetup -setwebproxy <span class="hljs-string">&quot;Wi-Fi&quot;</span> <span class="hljs-number">192.168.00.00</span> <span class="hljs-number">2900</span><span class="hljs-attribute">sudo</span> networksetup -setsecurewebproxy <span class="hljs-string">&quot;Wi-Fi&quot;</span> <span class="hljs-number">192.168.98.48</span> <span class="hljs-number">2900</span><span class="hljs-attribute">sudo</span> networksetup -setsocksfirewallproxy <span class="hljs-string">&quot;Wi-Fi&quot;</span> <span class="hljs-number">192.168.98.48</span> <span class="hljs-number">2900</span></code></pre></div><p>关闭</p><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> networksetup -setwebproxystate <span class="hljs-string">&quot;Wi-Fi&quot;</span> <span class="hljs-literal">off</span>sudo networksetup -setsecurewebproxystate <span class="hljs-string">&quot;Wi-Fi&quot;</span> <span class="hljs-literal">off</span>sudo networksetup -setsocksfirewallproxystate <span class="hljs-string">&quot;Wi-Fi&quot;</span> <span class="hljs-literal">off</span></code></pre></div><h2 id="手动方法"><a href="#手动方法" class="headerlink" title="手动方法"></a>手动方法</h2><p>以上命令行可代替的手动方法如下</p><ul><li>设置-&gt;网络-&gt;高级-&gt;代理</li><li>勾选并逐个设置代理服务器：192.168.98.48:2900<ul><li>网页代理（HTTP）</li><li>安全网页代理（HTTPS）</li><li>SOCKS代理</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MacOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 常用命令</title>
    <link href="/2021/01/17/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/01/17/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><h2 id="安装-Hexo-基于node"><a href="#安装-Hexo-基于node" class="headerlink" title="安装 Hexo (基于node)"></a>安装 Hexo (基于node)</h2><div class="hljs code-wrapper"><pre><code class="hljs avrasm">sudo npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre></div><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span></code></pre></div><h2 id="启动服务预览"><a href="#启动服务预览" class="headerlink" title="启动服务预览"></a>启动服务预览</h2><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span></code></pre></div><h2 id="生成并部署"><a href="#生成并部署" class="headerlink" title="生成并部署"></a>生成并部署</h2><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span></code></pre></div><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="更改端口"><a href="#更改端口" class="headerlink" title="更改端口"></a>更改端口</h3><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> server -p <span class="hljs-number">5000</span></code></pre></div><h3 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h3><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> server -i <span class="hljs-number">192.168.1.1</span></code></pre></div><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><h3 id="设置站点配置"><a href="#设置站点配置" class="headerlink" title="设置站点配置"></a>设置站点配置</h3><p>进入<code>_config.yml</code>，将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p><h3 id="生成-md-及图片文件夹"><a href="#生成-md-及图片文件夹" class="headerlink" title="生成 .md 及图片文件夹"></a>生成 .md 及图片文件夹</h3><p>运行<code>hexo n &quot;XXXXXX&quot;</code>，生成<code>XXXXX.md</code>博文时就会在<code>/source/_posts</code>目录下生成 XXXXXX 的文件夹，将你想在 XXXXX 博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p>在想添加的位置写入<code>![](图片名字.图片格式)</code>，如<code>![](1.png)</code>。</p><h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><div class="hljs code-wrapper"><pre><code class="hljs smali">部署时报错：TypeError [ERR_INVALID_ARG_TYPE]: The <span class="hljs-string">&quot;mode&quot;</span> argument must be integer. Received an<span class="hljs-built_in"> instance </span>of Object<span class="hljs-keyword">.</span>.....</code></pre></div><p>处理方式：降级node<br>查看版本 <code>node -v</code><br><code>nvm install 12</code> 或 <code>brew install node@12</code><br><code>nvm use 12</code> 或 <code>brew link --force --overwrite node@12</code></p><p>查看/切换node版本<br><code>nvm ls</code><br><code>nvm use 12.22.12</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift APPDelegate 文件写法</title>
    <link href="/2021/01/10/Swift%20AppDelegate%20%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95/"/>
    <url>/2021/01/10/Swift%20AppDelegate%20%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="通过导航视图控制器设置根视图"><a href="#通过导航视图控制器设置根视图" class="headerlink" title="通过导航视图控制器设置根视图"></a>通过导航视图控制器设置根视图</h2><p>AppDelegate.swift</p><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<span class="hljs-keyword">@main</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppDelegate</span>: <span class="hljs-title">UIResponder</span>, <span class="hljs-title">UIApplicationDelegate</span> </span>&#123;    <span class="hljs-keyword">var</span> window: <span class="hljs-type">UIWindow</span>?        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">application</span><span class="hljs-params">(<span class="hljs-keyword">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="hljs-keyword">Any</span>]?)</span></span> -&gt; <span class="hljs-type">Bool</span> &#123;        <span class="hljs-comment">// Override point for customization after application launch.</span>        <span class="hljs-keyword">self</span>.window <span class="hljs-operator">=</span> <span class="hljs-type">UIWindow</span>(frame: <span class="hljs-type">UIScreen</span>.main.bounds)        <span class="hljs-comment">// 把初始视图控制器压入导航视图控制器</span>        <span class="hljs-keyword">let</span> navigationController <span class="hljs-operator">=</span> <span class="hljs-type">UINavigationController</span>(rootViewController: <span class="hljs-type">MyRootViewController</span>())        <span class="hljs-comment">// 把根视图控制器设为导航视图控制器</span>        <span class="hljs-keyword">self</span>.window<span class="hljs-operator">?</span>.rootViewController <span class="hljs-operator">=</span> navigationController        <span class="hljs-comment">// 渲染页面</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>    &#125;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 页面跳转</title>
    <link href="/2021/01/10/Swift%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/"/>
    <url>/2021/01/10/Swift%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Swift-页面跳转"><a href="#Swift-页面跳转" class="headerlink" title="Swift 页面跳转"></a>Swift 页面跳转</h1><div class="hljs code-wrapper"><pre><code class="hljs reasonml">    override func view<span class="hljs-constructor">DidLoad()</span> &#123;    super.view<span class="hljs-constructor">DidLoad()</span>        <span class="hljs-comment">// Do any additional setup after loading the view.</span>    <span class="hljs-comment">// 每次当前视图控制器创建一次，全局变量加一</span>    pageNum = pageNum + <span class="hljs-number">1</span>    <span class="hljs-comment">//        根据当前的全局变量名设置标题</span>    self.title = <span class="hljs-string">&quot;Page\(pageNum)&quot;</span>    self.view.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>purple    <span class="hljs-comment">// 添加一个页面跳转按钮</span>    <span class="hljs-keyword">let</span> push = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 120, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    push.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Push page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    push.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    push.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">pushPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">push</span>)</span>        <span class="hljs-comment">// 添加一个按钮，点击时返回上一个页面</span>    <span class="hljs-keyword">let</span> pop = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 180, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    pop.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Pop Page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    pop.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    pop.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">popPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">pop</span>)</span>        <span class="hljs-comment">// 添加一个按钮，点击时跳转到已经push但未pop的指定序号的页面</span>    <span class="hljs-keyword">let</span> index = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 280, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    index.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Goto Index Page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    index.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    index.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">gotoIndexPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">index</span>)</span>        <span class="hljs-comment">// 添加一个按钮，点击时跳转到根视图</span>    <span class="hljs-keyword">let</span> root = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 340, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    root.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Goto root Page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    root.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    root.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">gotoRootPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">root</span>)</span>&#125;    override func did<span class="hljs-constructor">ReceiveMemoryWarning()</span> &#123;super.did<span class="hljs-constructor">ReceiveMemoryWarning()</span><span class="hljs-comment">// Dispose of any resources that can be recreated.</span>&#125;    <span class="hljs-comment">// 创建第一个按钮绑定的方法打开页面（入栈）</span>@objc func push<span class="hljs-constructor">Page()</span>&#123;<span class="hljs-comment">// 实例化第二个视图控制器</span><span class="hljs-keyword">let</span> viewController = <span class="hljs-constructor">FirstViewController()</span><span class="hljs-comment">// 把视图压入导航视图</span>self.navigationController?.push<span class="hljs-constructor">ViewController(<span class="hljs-params">viewController</span>, <span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;<span class="hljs-comment">// 第二个按钮的方法，将导航视图控制器从堆栈中移除</span>@objc func pop<span class="hljs-constructor">Page()</span>&#123;    self.navigationController?.pop<span class="hljs-constructor">ViewController(<span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;<span class="hljs-comment">// 第三个按钮绑定的方法，根据全局序号，查找堆栈中指定序号2的视图控制器</span>@objc func goto<span class="hljs-constructor">IndexPage()</span>&#123;    <span class="hljs-keyword">let</span> viewController = self.navigationController?.viewControllers<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>    self.navigationController?.pop<span class="hljs-constructor">ToViewController(<span class="hljs-params">viewController</span>!, <span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;<span class="hljs-comment">// 创建第四个按钮绑定的方法,所有子视图出栈</span>@objc func goto<span class="hljs-constructor">RootPage()</span>&#123;    self.navigationController?.pop<span class="hljs-constructor">ToRootViewController(<span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;</code></pre></div><p>参考资料：<a href="https://blog.csdn.net/weixin_41735943/article/details/81142709">https://blog.csdn.net/weixin_41735943/article/details/81142709</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基本命令</title>
    <link href="/2020/12/29/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/12/29/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-基本命令"><a href="#Git-基本命令" class="headerlink" title="Git 基本命令"></a>Git 基本命令</h1><h2 id="zsh-简写"><a href="#zsh-简写" class="headerlink" title="zsh 简写"></a>zsh 简写</h2><p><code>gco == git checkout</code><br><code>ga . == git add .</code><br><code>gcmsg &quot;add log&quot; == git commit -m “addlog”</code><br><code>git checkout -b feature-branch-name</code>  // 切分支</p><h2 id="新建并切换仓库"><a href="#新建并切换仓库" class="headerlink" title="新建并切换仓库"></a>新建并切换仓库</h2><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">git initgit <span class="hljs-built_in">add</span> .git commit -m ‘<span class="hljs-keyword">first</span> commit’git remote <span class="hljs-built_in">add</span> origin <span class="hljs-keyword">http</span>/s://github.com/yourgithubID/(git pull <span class="hljs-comment">--rebase origin master）</span>git push -u origin master <span class="hljs-comment">#将本地仓库push到远程仓库</span></code></pre></div><h2 id="diff操作"><a href="#diff操作" class="headerlink" title="diff操作"></a>diff操作</h2><p>在git提交环节，存在三大部分：<code>working tree</code>, <code>index file</code>, <code>commit</code></p><h3 id="这三大部分中："><a href="#这三大部分中：" class="headerlink" title="这三大部分中："></a>这三大部分中：</h3><ul><li>working tree：就是你所工作在的目录，每当你在代码中进行了修改，working tree的状态就改变了。</li><li>index file：是索引文件，它是连接working tree和commit的桥梁，每当我们使用git-add命令来登记后，index file的内容就改变了，此时index file就和working tree同步了。</li><li>commit：是最后的阶段，只有commit了，我们的代码才真正进入了git仓库。我们使用git-commit就是将index file里的内容提交到commit中。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><div class="hljs code-wrapper"><pre><code class="hljs awk">git diff <span class="hljs-regexp">//</span>查看 working tree 与 index file 的差别的。git diff --cached <span class="hljs-regexp">//</span>查看 index file 与 commit 的差别的。git diff HEAD <span class="hljs-regexp">//</span> 查看working tree和commit的差别的。（HEAD代表的是最近的一次commit的信息）<span class="hljs-regexp">//gi</span>t diff 旧 新git diff ea83556 a0553e3git diff HEAD~<span class="hljs-number">1</span> HEADgit diff HEAD~<span class="hljs-number">1</span></code></pre></div><h2 id="git-merge-操作"><a href="#git-merge-操作" class="headerlink" title="git merge 操作"></a>git merge 操作</h2><p><a href="https://blog.walterlv.com/post/git-merge-strategy.html#patience">https://blog.walterlv.com/post/git-merge-strategy.html#patience</a></p><h3 id="git-fatch"><a href="#git-fatch" class="headerlink" title="git fatch"></a>git fatch</h3><div class="hljs code-wrapper"><pre><code class="hljs awk">git fetch origin master <span class="hljs-regexp">//</span>从远程主机的master分支拉取最新内容 （不加master就是全部库）git merge FETCH_HEAD    <span class="hljs-regexp">//</span>将拉取下来的最新内容合并到当前所在的分支中</code></pre></div><h2 id="git-回滚操作"><a href="#git-回滚操作" class="headerlink" title="git 回滚操作"></a>git 回滚操作</h2><h3 id="场景1：未-add"><a href="#场景1：未-add" class="headerlink" title="场景1：未 add"></a>场景1：未 add</h3><p>撤回修改</p><div class="hljs code-wrapper"><pre><code class="hljs erlang">git checkout .</code></pre></div><p>删除没有 git add 的文件</p><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git clean -d fx</span></code></pre></div><h3 id="场景2：已经-commit，但是未-push-到远端"><a href="#场景2：已经-commit，但是未-push-到远端" class="headerlink" title="场景2：已经 commit，但是未 push 到远端"></a>场景2：已经 commit，但是未 push 到远端</h3><h4 id="回退到上一个版本"><a href="#回退到上一个版本" class="headerlink" title="回退到上一个版本"></a>回退到上一个版本</h4><div class="hljs code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD~</span>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD~2 //具有破坏性</span>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--mixed HEAD~2 // 有所保留</span></code></pre></div><h4 id="更改-commit-内容（未-push）"><a href="#更改-commit-内容（未-push）" class="headerlink" title="更改 commit 内容（未 push）"></a>更改 commit 内容（未 push）</h4><div class="hljs code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend</span></code></pre></div><h3 id="场景3：已经-push"><a href="#场景3：已经-push" class="headerlink" title="场景3：已经 push"></a>场景3：已经 push</h3><div class="hljs code-wrapper"><pre><code class="hljs crmsh">git push -u origin <span class="hljs-keyword">master</span> <span class="hljs-title">-f</span></code></pre></div><h3 id="场景4：想要把-cf2e245-嫁接到某个分支目录下："><a href="#场景4：想要把-cf2e245-嫁接到某个分支目录下：" class="headerlink" title="场景4：想要把 cf2e245 嫁接到某个分支目录下："></a>场景4：想要把 cf2e245 嫁接到某个分支目录下：</h3><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> checkout feat/xxx<span class="hljs-attribute">git</span> cherry-pick cf<span class="hljs-number">2</span>e<span class="hljs-number">245</span></code></pre></div><h2 id="git-checkout-操作"><a href="#git-checkout-操作" class="headerlink" title="git checkout 操作"></a>git checkout 操作</h2><div class="hljs code-wrapper"><pre><code class="hljs awk">* git checkout -- filename <span class="hljs-regexp">//</span> 撤销 filename 上次修改操作</code></pre></div><h2 id="git-branch-操作"><a href="#git-branch-操作" class="headerlink" title="git branch 操作"></a>git branch 操作</h2><ul><li>拉取指定分支内容<ul><li>git clone -b dev</li><li>git fetch origin dev</li><li>git checkout -b dev origin/dev</li></ul></li><li>删除本地分支<ul><li>git branch -D branchName</li></ul></li><li>删除远端分支<ul><li>git push origin –delete branchName</li><li>git push origin :branchName</li></ul></li><li>查看本地和远程分支<ul><li>git branch -a</li></ul></li><li>强制更新个人分支<ul><li>git reset –hard origin/develop</li><li>git push origin yourbranch –force</li></ul></li></ul><h2 id="git-删除文件"><a href="#git-删除文件" class="headerlink" title="git 删除文件"></a>git 删除文件</h2><ul><li>git rm -r –cached 文件/文件夹名称<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2></li><li>新建 tag<ul><li>可添加描述： git tag <tagname> -a</li><li>无描述：git tag <tagname></li></ul></li><li>查看 tag<ul><li>git tag</li></ul></li></ul><h2 id="git-暂存"><a href="#git-暂存" class="headerlink" title="git 暂存"></a>git 暂存</h2><p>思想：</p><ul><li>可以暂存到工作区，并恢复该分支到上一个commit后的状态。</li><li>可以再任意分支 pop 出来并继续更改。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs awk">git stashgit stash save <span class="hljs-string">&quot;test-cmd-stash&quot;</span>  <span class="hljs-regexp">//</span> 给 stash 加 messagegit stash pop  <span class="hljs-regexp">//</span> 第一个stash删除，并将对应修改应用到当前的工作目录git stash apply <span class="hljs-regexp">//</span> 不删除git stash list <span class="hljs-regexp">//</span> 查看缓存列表git stash drop stash@&#123;<span class="hljs-number">0</span>&#125; <span class="hljs-regexp">//</span> 删除某stashgit stash pop stash@&#123;<span class="hljs-number">1</span>&#125;  <span class="hljs-regexp">//</span> 恢复指定stash</code></pre></div><h2 id="git-merge-和-git-rebase"><a href="#git-merge-和-git-rebase" class="headerlink" title="git merge 和 git rebase"></a>git merge 和 git rebase</h2><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><div class="hljs code-wrapper"><pre><code class="hljs sql">git pull <span class="hljs-operator">=</span> git <span class="hljs-keyword">fetch</span> <span class="hljs-operator">+</span> git <span class="hljs-keyword">merge</span> FETCH_HEAD git pull <span class="hljs-comment">--rebase =  git fetch + git rebase FETCH_HEAD </span></code></pre></div><h3 id="merge-和-rebase"><a href="#merge-和-rebase" class="headerlink" title="merge 和 rebase"></a>merge 和 rebase</h3><p>现在我们有这样的两个分支,test和master，提交如下：</p><div class="hljs code-wrapper"><pre><code class="hljs brainfuck">   <span class="hljs-comment">D</span>--<span class="hljs-literal">-</span><span class="hljs-comment">E</span> <span class="hljs-comment">test</span><span class="hljs-comment"></span>  <span class="hljs-comment">/</span><span class="hljs-comment">A</span>--<span class="hljs-literal">-</span><span class="hljs-comment">B</span>--<span class="hljs-literal">-</span><span class="hljs-comment">C</span>--<span class="hljs-literal">-</span><span class="hljs-comment">F</span>--<span class="hljs-literal">-</span> <span class="hljs-comment">master</span></code></pre></div><p>在master执行git merge test,然后会得到如下结果：</p><div class="hljs code-wrapper"><pre><code class="hljs brainfuck">   <span class="hljs-comment">D</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">E</span><span class="hljs-comment"></span>  <span class="hljs-comment">/</span>           <span class="hljs-comment">\</span><span class="hljs-comment">A</span>--<span class="hljs-literal">-</span><span class="hljs-comment">B</span>--<span class="hljs-literal">-</span><span class="hljs-comment">C</span>--<span class="hljs-literal">-</span><span class="hljs-comment">F</span>--<span class="hljs-literal">-</span><span class="hljs-comment">G</span>--<span class="hljs-literal">-</span> <span class="hljs-comment">test</span><span class="hljs-string">,</span> <span class="hljs-comment">master</span></code></pre></div><p>在master执行git rebase test，然后得到如下结果：</p><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">A</span>--<span class="hljs-literal">-</span><span class="hljs-comment">B</span>--<span class="hljs-literal">-</span><span class="hljs-comment">D</span>--<span class="hljs-literal">-</span><span class="hljs-comment">E</span>--<span class="hljs-literal">-</span><span class="hljs-comment">C‘</span>--<span class="hljs-literal">-</span><span class="hljs-comment">F‘</span>--<span class="hljs-literal">-</span> <span class="hljs-comment">test</span><span class="hljs-string">,</span> <span class="hljs-comment">master</span></code></pre></div><p>merge操作会生成一个新的节点，之前的提交分开显示。<br>而rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。</p><h2 id="多个-Git-切换"><a href="#多个-Git-切换" class="headerlink" title="多个 Git 切换"></a>多个 Git 切换</h2><p>举例：gitlab 和 github 切换使用，配置步骤如下</p><h3 id="生成多个密钥"><a href="#生成多个密钥" class="headerlink" title="生成多个密钥"></a>生成多个密钥</h3><ul><li>先假设我有两个账号，一个是 github 上的，一个是公司 gitlab 上面的。首先为不同的账号生成不同的ssh-key<ul><li><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa_work -c xxx@gmail.com</code> 然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_work和id_rsa_work.pub两个文件，id_rsa_work.pub文件里存放的就是我们要使用的key </li><li><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -c xxx@gmail.com</code> 然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_github和id_rsa_github.pub两个文件，id_rsa_gthub.pub文件里存放的就是我们要使用的key</li></ul></li><li>把 id_rsa_xxx.pub 中的 key 添加到 github 或 gitlab 上，这一步在 github 或 gitlab 上都有帮助，不再赘述</li></ul><h3 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h3><ul><li>默认 SSH 只会读取 id_rsa，所以为了让 SSH 识别新的私钥，需要将其添加到 SSH agent</li></ul><div class="hljs code-wrapper"><pre><code class="hljs arcade">ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_workssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_github</code></pre></div><h3 id="新建-config-文件"><a href="#新建-config-文件" class="headerlink" title="新建 config 文件"></a>新建 config 文件</h3><ul><li>新建 ~/.ssh/config，并写入以下内容，设定不同的git 服务器对应不同的key</li></ul><p>config: </p><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-comment"># gitlab</span>Host workgitHostName workgit.cn<span class="hljs-keyword">User</span> <span class="hljs-title">git</span>IdentityFile ~/.ssh/id_rsa_work<span class="hljs-comment"># github</span>Host githubHostName github.com<span class="hljs-keyword">User</span> <span class="hljs-title">git</span>IdentityFile ~/.ssh/id_rsa_github</code></pre></div><h3 id="切换-Git-命令"><a href="#切换-Git-命令" class="headerlink" title="切换 Git 命令"></a>切换 Git 命令</h3><ul><li>根据 config 配置的 <code>Host</code> 切换 git</li></ul><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh -T workgit</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh -T github</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/29/hello-world/"/>
    <url>/2020/12/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
