<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git基本命令</title>
    <link href="/2020/12/29/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/12/29/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>#Git 基本命令</p><h2 id="zsh-简写"><a href="#zsh-简写" class="headerlink" title="zsh 简写"></a>zsh 简写</h2><p><code>gco == git checkout</code><br><code>ga . == git add .</code><br><code>gcmsg &quot;add log&quot; == git commit -m “addlog”</code><br><code>git checkout -b feature-branch-name</code>  // 切分支</p><h2 id="新建并切换仓库"><a href="#新建并切换仓库" class="headerlink" title="新建并切换仓库"></a>新建并切换仓库</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git init<br>git <span class="hljs-built_in">add</span> .<br>git commit -m ‘<span class="hljs-keyword">first</span> commit’<br>git remote <span class="hljs-built_in">add</span> origin <span class="hljs-keyword">http</span>/s://github.com/yourgithubID/<br>(git pull <span class="hljs-comment">--rebase origin master）</span><br>git push -u origin master <span class="hljs-comment">#将本地仓库push到远程仓库</span><br></code></pre></td></tr></table></figure><h2 id="diff操作"><a href="#diff操作" class="headerlink" title="diff操作"></a>diff操作</h2><p>在git提交环节，存在三大部分：<code>working tree</code>, <code>index file</code>, <code>commit</code></p><h3 id="这三大部分中："><a href="#这三大部分中：" class="headerlink" title="这三大部分中："></a>这三大部分中：</h3><ul><li>working tree：就是你所工作在的目录，每当你在代码中进行了修改，working tree的状态就改变了。</li><li>index file：是索引文件，它是连接working tree和commit的桥梁，每当我们使用git-add命令来登记后，index file的内容就改变了，此时index file就和working tree同步了。</li><li>commit：是最后的阶段，只有commit了，我们的代码才真正进入了git仓库。我们使用git-commit就是将index file里的内容提交到commit中。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">git diff <span class="hljs-regexp">//</span>查看 working tree 与 index file 的差别的。<br>git diff --cached <span class="hljs-regexp">//</span>查看 index file 与 commit 的差别的。<br>git diff HEAD <span class="hljs-regexp">//</span> 查看working tree和commit的差别的。（HEAD代表的是最近的一次commit的信息）<br><br><span class="hljs-regexp">//gi</span>t diff 旧 新<br>git diff ea83556 a0553e3<br>git diff HEAD~<span class="hljs-number">1</span> HEAD<br>git diff HEAD~<span class="hljs-number">1</span><br>    <br></code></pre></td></tr></table></figure><h2 id="git-merge-操作"><a href="#git-merge-操作" class="headerlink" title="git merge 操作"></a>git merge 操作</h2><p><a href="https://blog.walterlv.com/post/git-merge-strategy.html#patience">https://blog.walterlv.com/post/git-merge-strategy.html#patience</a></p><h3 id="git-fatch"><a href="#git-fatch" class="headerlink" title="git fatch"></a>git fatch</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git fetch origin master <span class="hljs-regexp">//</span>从远程主机的master分支拉取最新内容 （不加master就是全部库）<br>git merge FETCH_HEAD    <span class="hljs-regexp">//</span>将拉取下来的最新内容合并到当前所在的分支中<br><br></code></pre></td></tr></table></figure><h2 id="git-回滚操作"><a href="#git-回滚操作" class="headerlink" title="git 回滚操作"></a>git 回滚操作</h2><h3 id="场景1：已经commit，但是未push到远端"><a href="#场景1：已经commit，但是未push到远端" class="headerlink" title="场景1：已经commit，但是未push到远端"></a>场景1：已经commit，但是未push到远端</h3><h4 id="回退到上一个版本"><a href="#回退到上一个版本" class="headerlink" title="回退到上一个版本"></a>回退到上一个版本</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD^</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD~2 //具有破坏性</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--mixed HEAD~2 // 有所保留</span><br></code></pre></td></tr></table></figure><h4 id="更改-commit-内容（未push）"><a href="#更改-commit-内容（未push）" class="headerlink" title="更改 commit 内容（未push）"></a>更改 commit 内容（未push）</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend</span><br></code></pre></td></tr></table></figure><h3 id="场景2：已经push"><a href="#场景2：已经push" class="headerlink" title="场景2：已经push"></a>场景2：已经push</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git push -u origin <span class="hljs-keyword">master</span> <span class="hljs-title">-f</span><br></code></pre></td></tr></table></figure><h3 id="场景3：想要把cf2e245-嫁接到某个分支目录下："><a href="#场景3：想要把cf2e245-嫁接到某个分支目录下：" class="headerlink" title="场景3：想要把cf2e245 嫁接到某个分支目录下："></a>场景3：想要把cf2e245 嫁接到某个分支目录下：</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> checkout feat/xxx<br><span class="hljs-attribute">git</span> cherry-pick cf<span class="hljs-number">2</span>e<span class="hljs-number">245</span><br></code></pre></td></tr></table></figure><h2 id="git-checkout-操作"><a href="#git-checkout-操作" class="headerlink" title="git checkout 操作"></a>git checkout 操作</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">* git checkout -- filename <span class="hljs-regexp">//</span> 撤销 filename 上次修改操作<br></code></pre></td></tr></table></figure><h2 id="git-branch-操作"><a href="#git-branch-操作" class="headerlink" title="git branch 操作"></a>git branch 操作</h2><ul><li>删除本地分支<ul><li>git branch -D branchName</li></ul></li><li>删除远端分支<ul><li>git push origin –delete branchName</li><li>git push origin :branchName</li></ul></li><li>查看本地和远程分支<ul><li>git branch -a</li></ul></li></ul><h2 id="git-删除文件"><a href="#git-删除文件" class="headerlink" title="git 删除文件"></a>git 删除文件</h2><p>git rm -r –cached 文件/文件夹名称<br>git commit -m “提交说明”<br>git push origin master</p><h2 id="git-暂存"><a href="#git-暂存" class="headerlink" title="git 暂存"></a>git 暂存</h2><p>思想：</p><ul><li>可以暂存到工作区，并恢复该分支到上一个commit后的状态。</li><li>可以再任意分支 pop 出来并继续更改。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">git stash<br>git stash save <span class="hljs-string">&quot;test-cmd-stash&quot;</span>  <span class="hljs-regexp">//</span> 给 stash 加 message<br>git stash pop  <span class="hljs-regexp">//</span> 第一个stash删除，并将对应修改应用到当前的工作目录<br>git stash apply <span class="hljs-regexp">//</span> 不删除<br>git stash list <span class="hljs-regexp">//</span> 查看缓存列表<br>git stash drop stash@&#123;<span class="hljs-number">0</span>&#125; <span class="hljs-regexp">//</span> 删除某stash<br>git stash pop stash@&#123;<span class="hljs-number">1</span>&#125;  <span class="hljs-regexp">//</span> 恢复指定stash<br></code></pre></td></tr></table></figure><h2 id="多个-Git-切换"><a href="#多个-Git-切换" class="headerlink" title="多个 Git 切换"></a>多个 Git 切换</h2><ul><li>gitlab 和 github 切换使用</li></ul><h3 id="新建-ssh-config"><a href="#新建-ssh-config" class="headerlink" title="新建 ~/.ssh/config"></a>新建 ~/.ssh/config</h3><ul><li>id_rsa 为 GitLab 密钥</li><li>github_rsa 为 GitHub 密钥</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># gitlab</span><br>Host gitlab<br>HostName git.zerozero.cn<br><span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>IdentityFile ~/.ssh/id_rsa<br><span class="hljs-comment"># githab</span><br>Host github.com<br>HostName github.com<br><span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>IdentityFile ~/.ssh/github_rsa<br></code></pre></td></tr></table></figure><h3 id="切换-Git-命令"><a href="#切换-Git-命令" class="headerlink" title="切换 Git 命令"></a>切换 Git 命令</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh -<span class="hljs-built_in">T</span> github.com<br>ssh -<span class="hljs-built_in">T</span> github<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/28/hello-world/"/>
    <url>/2020/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
