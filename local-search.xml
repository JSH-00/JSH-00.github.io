<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Swift APPDelegate 文件写法</title>
    <link href="/2021/01/10/Swift%20AppDelegate%20%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95/"/>
    <url>/2021/01/10/Swift%20AppDelegate%20%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="通过导航视图控制器设置根视图"><a href="#通过导航视图控制器设置根视图" class="headerlink" title="通过导航视图控制器设置根视图"></a>通过导航视图控制器设置根视图</h2><p>AppDelegate.swift</p><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<span class="hljs-keyword">@main</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppDelegate</span>: <span class="hljs-title">UIResponder</span>, <span class="hljs-title">UIApplicationDelegate</span> </span>&#123;    <span class="hljs-keyword">var</span> window: <span class="hljs-type">UIWindow</span>?        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">application</span><span class="hljs-params">(<span class="hljs-keyword">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="hljs-keyword">Any</span>]?)</span></span> -&gt; <span class="hljs-type">Bool</span> &#123;        <span class="hljs-comment">// Override point for customization after application launch.</span>        <span class="hljs-keyword">self</span>.window <span class="hljs-operator">=</span> <span class="hljs-type">UIWindow</span>(frame: <span class="hljs-type">UIScreen</span>.main.bounds)        <span class="hljs-comment">// 把初始视图控制器压入导航视图控制器</span>        <span class="hljs-keyword">let</span> navigationController <span class="hljs-operator">=</span> <span class="hljs-type">UINavigationController</span>(rootViewController: <span class="hljs-type">MyRootViewController</span>())        <span class="hljs-comment">// 把根视图控制器设为导航视图控制器</span>        <span class="hljs-keyword">self</span>.window<span class="hljs-operator">?</span>.rootViewController <span class="hljs-operator">=</span> navigationController        <span class="hljs-comment">// 渲染页面</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>    &#125;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 页面跳转</title>
    <link href="/2021/01/10/Swift%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/"/>
    <url>/2021/01/10/Swift%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Swift-页面跳转"><a href="#Swift-页面跳转" class="headerlink" title="Swift 页面跳转"></a>Swift 页面跳转</h1><div class="hljs code-wrapper"><pre><code class="hljs reasonml">    override func view<span class="hljs-constructor">DidLoad()</span> &#123;    super.view<span class="hljs-constructor">DidLoad()</span>        <span class="hljs-comment">// Do any additional setup after loading the view.</span>    <span class="hljs-comment">// 每次当前视图控制器创建一次，全局变量加一</span>    pageNum = pageNum + <span class="hljs-number">1</span>    <span class="hljs-comment">//        根据当前的全局变量名设置标题</span>    self.title = <span class="hljs-string">&quot;Page\(pageNum)&quot;</span>    self.view.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>purple    <span class="hljs-comment">// 添加一个页面跳转按钮</span>    <span class="hljs-keyword">let</span> push = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 120, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    push.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Push page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    push.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    push.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">pushPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">push</span>)</span>        <span class="hljs-comment">// 添加一个按钮，点击时返回上一个页面</span>    <span class="hljs-keyword">let</span> pop = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 180, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    pop.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Pop Page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    pop.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    pop.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">popPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">pop</span>)</span>        <span class="hljs-comment">// 添加一个按钮，点击时跳转到已经push但未pop的指定序号的页面</span>    <span class="hljs-keyword">let</span> index = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 280, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    index.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Goto Index Page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    index.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    index.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">gotoIndexPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">index</span>)</span>        <span class="hljs-comment">// 添加一个按钮，点击时跳转到根视图</span>    <span class="hljs-keyword">let</span> root = <span class="hljs-constructor">UIButton(<span class="hljs-params">frame</span>: CGRect(<span class="hljs-params">x</span>: 40, <span class="hljs-params">y</span>: 340, <span class="hljs-params">width</span>: 240, <span class="hljs-params">height</span>: 40)</span>)    root.set<span class="hljs-constructor">Title(<span class="hljs-string">&quot;Goto root Page&quot;</span>, <span class="hljs-params">for</span>: UIControl.State()</span>)    root.backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIColor</span>.</span></span>orange    root.add<span class="hljs-constructor">Target(<span class="hljs-params">self</span>, <span class="hljs-params">action</span>: #<span class="hljs-params">selector</span>(<span class="hljs-params">gotoRootPage</span>)</span>, <span class="hljs-keyword">for</span>: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UIControl</span>.</span><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span>touchUpInside)    self.view.add<span class="hljs-constructor">Subview(<span class="hljs-params">root</span>)</span>&#125;    override func did<span class="hljs-constructor">ReceiveMemoryWarning()</span> &#123;super.did<span class="hljs-constructor">ReceiveMemoryWarning()</span><span class="hljs-comment">// Dispose of any resources that can be recreated.</span>&#125;    <span class="hljs-comment">// 创建第一个按钮绑定的方法打开页面（入栈）</span>@objc func push<span class="hljs-constructor">Page()</span>&#123;<span class="hljs-comment">// 实例化第二个视图控制器</span><span class="hljs-keyword">let</span> viewController = <span class="hljs-constructor">FirstViewController()</span><span class="hljs-comment">// 把视图压入导航视图</span>self.navigationController?.push<span class="hljs-constructor">ViewController(<span class="hljs-params">viewController</span>, <span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;<span class="hljs-comment">// 第二个按钮的方法，将导航视图控制器从堆栈中移除</span>@objc func pop<span class="hljs-constructor">Page()</span>&#123;    self.navigationController?.pop<span class="hljs-constructor">ViewController(<span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;<span class="hljs-comment">// 第三个按钮绑定的方法，根据全局序号，查找堆栈中指定序号2的视图控制器</span>@objc func goto<span class="hljs-constructor">IndexPage()</span>&#123;    <span class="hljs-keyword">let</span> viewController = self.navigationController?.viewControllers<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>    self.navigationController?.pop<span class="hljs-constructor">ToViewController(<span class="hljs-params">viewController</span>!, <span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;<span class="hljs-comment">// 创建第四个按钮绑定的方法,所有子视图出栈</span>@objc func goto<span class="hljs-constructor">RootPage()</span>&#123;    self.navigationController?.pop<span class="hljs-constructor">ToRootViewController(<span class="hljs-params">animated</span>: <span class="hljs-params">true</span>)</span>&#125;</code></pre></div><p>参考资料：<a href="https://blog.csdn.net/weixin_41735943/article/details/81142709">https://blog.csdn.net/weixin_41735943/article/details/81142709</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基本命令</title>
    <link href="/2020/12/29/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/12/29/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-基本命令"><a href="#Git-基本命令" class="headerlink" title="Git 基本命令"></a>Git 基本命令</h1><h2 id="zsh-简写"><a href="#zsh-简写" class="headerlink" title="zsh 简写"></a>zsh 简写</h2><p><code>gco == git checkout</code><br><code>ga . == git add .</code><br><code>gcmsg &quot;add log&quot; == git commit -m “addlog”</code><br><code>git checkout -b feature-branch-name</code>  // 切分支</p><h2 id="新建并切换仓库"><a href="#新建并切换仓库" class="headerlink" title="新建并切换仓库"></a>新建并切换仓库</h2><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">git initgit <span class="hljs-built_in">add</span> .git commit -m ‘<span class="hljs-keyword">first</span> commit’git remote <span class="hljs-built_in">add</span> origin <span class="hljs-keyword">http</span>/s://github.com/yourgithubID/(git pull <span class="hljs-comment">--rebase origin master）</span>git push -u origin master <span class="hljs-comment">#将本地仓库push到远程仓库</span></code></pre></div><h2 id="diff操作"><a href="#diff操作" class="headerlink" title="diff操作"></a>diff操作</h2><p>在git提交环节，存在三大部分：<code>working tree</code>, <code>index file</code>, <code>commit</code></p><h3 id="这三大部分中："><a href="#这三大部分中：" class="headerlink" title="这三大部分中："></a>这三大部分中：</h3><ul><li>working tree：就是你所工作在的目录，每当你在代码中进行了修改，working tree的状态就改变了。</li><li>index file：是索引文件，它是连接working tree和commit的桥梁，每当我们使用git-add命令来登记后，index file的内容就改变了，此时index file就和working tree同步了。</li><li>commit：是最后的阶段，只有commit了，我们的代码才真正进入了git仓库。我们使用git-commit就是将index file里的内容提交到commit中。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><div class="hljs code-wrapper"><pre><code class="hljs awk">git diff <span class="hljs-regexp">//</span>查看 working tree 与 index file 的差别的。git diff --cached <span class="hljs-regexp">//</span>查看 index file 与 commit 的差别的。git diff HEAD <span class="hljs-regexp">//</span> 查看working tree和commit的差别的。（HEAD代表的是最近的一次commit的信息）<span class="hljs-regexp">//gi</span>t diff 旧 新git diff ea83556 a0553e3git diff HEAD~<span class="hljs-number">1</span> HEADgit diff HEAD~<span class="hljs-number">1</span></code></pre></div><h2 id="git-merge-操作"><a href="#git-merge-操作" class="headerlink" title="git merge 操作"></a>git merge 操作</h2><p><a href="https://blog.walterlv.com/post/git-merge-strategy.html#patience">https://blog.walterlv.com/post/git-merge-strategy.html#patience</a></p><h3 id="git-fatch"><a href="#git-fatch" class="headerlink" title="git fatch"></a>git fatch</h3><div class="hljs code-wrapper"><pre><code class="hljs awk">git fetch origin master <span class="hljs-regexp">//</span>从远程主机的master分支拉取最新内容 （不加master就是全部库）git merge FETCH_HEAD    <span class="hljs-regexp">//</span>将拉取下来的最新内容合并到当前所在的分支中</code></pre></div><h2 id="git-回滚操作"><a href="#git-回滚操作" class="headerlink" title="git 回滚操作"></a>git 回滚操作</h2><h3 id="场景1：未-add"><a href="#场景1：未-add" class="headerlink" title="场景1：未 add"></a>场景1：未 add</h3><div class="hljs code-wrapper"><pre><code class="hljs erlang">git checkout .</code></pre></div><h3 id="场景2：已经-commit，但是未-push-到远端"><a href="#场景2：已经-commit，但是未-push-到远端" class="headerlink" title="场景2：已经 commit，但是未 push 到远端"></a>场景2：已经 commit，但是未 push 到远端</h3><h4 id="回退到上一个版本"><a href="#回退到上一个版本" class="headerlink" title="回退到上一个版本"></a>回退到上一个版本</h4><div class="hljs code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD^</span>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD~2 //具有破坏性</span>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--mixed HEAD~2 // 有所保留</span></code></pre></div><h4 id="更改-commit-内容（未-push）"><a href="#更改-commit-内容（未-push）" class="headerlink" title="更改 commit 内容（未 push）"></a>更改 commit 内容（未 push）</h4><div class="hljs code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend</span></code></pre></div><h3 id="场景3：已经-push"><a href="#场景3：已经-push" class="headerlink" title="场景3：已经 push"></a>场景3：已经 push</h3><div class="hljs code-wrapper"><pre><code class="hljs crmsh">git push -u origin <span class="hljs-keyword">master</span> <span class="hljs-title">-f</span></code></pre></div><h3 id="场景4：想要把-cf2e245-嫁接到某个分支目录下："><a href="#场景4：想要把-cf2e245-嫁接到某个分支目录下：" class="headerlink" title="场景4：想要把 cf2e245 嫁接到某个分支目录下："></a>场景4：想要把 cf2e245 嫁接到某个分支目录下：</h3><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> checkout feat/xxx<span class="hljs-attribute">git</span> cherry-pick cf<span class="hljs-number">2</span>e<span class="hljs-number">245</span></code></pre></div><h2 id="git-checkout-操作"><a href="#git-checkout-操作" class="headerlink" title="git checkout 操作"></a>git checkout 操作</h2><div class="hljs code-wrapper"><pre><code class="hljs awk">* git checkout -- filename <span class="hljs-regexp">//</span> 撤销 filename 上次修改操作</code></pre></div><h2 id="git-branch-操作"><a href="#git-branch-操作" class="headerlink" title="git branch 操作"></a>git branch 操作</h2><ul><li>删除本地分支<ul><li>git branch -D branchName</li></ul></li><li>删除远端分支<ul><li>git push origin –delete branchName</li><li>git push origin :branchName</li></ul></li><li>查看本地和远程分支<ul><li>git branch -a</li></ul></li></ul><h2 id="git-删除文件"><a href="#git-删除文件" class="headerlink" title="git 删除文件"></a>git 删除文件</h2><p>git rm -r –cached 文件/文件夹名称<br>git commit -m “提交说明”<br>git push origin master</p><h2 id="git-暂存"><a href="#git-暂存" class="headerlink" title="git 暂存"></a>git 暂存</h2><p>思想：</p><ul><li>可以暂存到工作区，并恢复该分支到上一个commit后的状态。</li><li>可以再任意分支 pop 出来并继续更改。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs awk">git stashgit stash save <span class="hljs-string">&quot;test-cmd-stash&quot;</span>  <span class="hljs-regexp">//</span> 给 stash 加 messagegit stash pop  <span class="hljs-regexp">//</span> 第一个stash删除，并将对应修改应用到当前的工作目录git stash apply <span class="hljs-regexp">//</span> 不删除git stash list <span class="hljs-regexp">//</span> 查看缓存列表git stash drop stash@&#123;<span class="hljs-number">0</span>&#125; <span class="hljs-regexp">//</span> 删除某stashgit stash pop stash@&#123;<span class="hljs-number">1</span>&#125;  <span class="hljs-regexp">//</span> 恢复指定stash</code></pre></div><h2 id="多个-Git-切换"><a href="#多个-Git-切换" class="headerlink" title="多个 Git 切换"></a>多个 Git 切换</h2><ul><li>gitlab 和 github 切换使用</li></ul><h3 id="新建-ssh-config"><a href="#新建-ssh-config" class="headerlink" title="新建 ~/.ssh/config"></a>新建 ~/.ssh/config</h3><ul><li>id_rsa 为 GitLab 密钥</li><li>github_rsa 为 GitHub 密钥</li></ul><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-comment"># gitlab</span>Host gitlabHostName git.zerozero.cn<span class="hljs-keyword">User</span> <span class="hljs-title">git</span>IdentityFile ~/.ssh/id_rsa<span class="hljs-comment"># githab</span>Host github.comHostName github.com<span class="hljs-keyword">User</span> <span class="hljs-title">git</span>IdentityFile ~/.ssh/github_rsa</code></pre></div><h3 id="切换-Git-命令"><a href="#切换-Git-命令" class="headerlink" title="切换 Git 命令"></a>切换 Git 命令</h3><div class="hljs code-wrapper"><pre><code class="hljs excel">ssh -<span class="hljs-built_in">T</span> github.comssh -<span class="hljs-built_in">T</span> github</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/28/hello-world/"/>
    <url>/2020/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
